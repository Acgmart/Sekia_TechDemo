//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/Particles/UVmove_2Mask" {
Properties {
_DayColor ("DayColor", Color) = (1,1,1,1)
_MainColor ("MainColor", Color) = (1,1,1,1)
_ColorBrightness ("ColorBrightness", Float) = 1
_AlphaBrightness ("AlphaBrightness", Float) = 1
_BaseTex ("BaseTex", 2D) = "white" { }
[Enum(RGB,0,R,1,G,2,B,3,A,4)] _BaseTexColorChannelToggle ("BaseTexColorChannelToggle", Float) = 0
[Enum(A,0,R,1,G,2,B,3)] _BaseTexAlphaChannelToggle ("BaseTexAlphaChannelToggle", Float) = 0
_BaseTexAlphaScaler ("BaseTexAlphaScaler", Float) = 1
[MHYToggle] _UmoveRandomToggle ("UmoveRandomToggle", Float) = 0
[MHYToggle] _VmoveRandomToggle ("VmoveRandomToggle", Float) = 0
_BaseTex_Uspeed ("BaseTex_Uspeed", Float) = 1
_BaseTex_Vspeed ("BaseTex_Vspeed", Float) = 1
[Toggle(_NOISETEXTOGGLE_ON)] _NoiseTexToggle ("NoiseTex[Toggle]", Float) = 0
_NoiseTex01 ("NoiseTex01", 2D) = "white" { }
[Enum(R,0,G,1,B,2,A,3)] _NoiseTex01ChannelToggle ("NoiseTex01ChannelToggle", Float) = 0
_NoiseTex01_Uspeed ("NoiseTex01_Uspeed", Float) = 1
_MeshParticleColorArray ("MeshParticleColorArray", Vector) = (1,1,1,1)
_NoiseTex01_Vspeed ("NoiseTex01_Vspeed", Float) = 1
_Noise_Brightness ("Noise_Brightness", Float) = 1
_Noise_Offset ("Noise_Offset", Float) = 0
[MHYToggle] _NoiseTex01UVmoveRandomToggle ("NoiseTex01UVmoveRandomToggle", Float) = 0
_NoiseIntensityOnMask02 ("NoiseIntensityOnMask02", Float) = 0
_NoiseIntensityOnMask ("NoiseIntensityOnMask", Float) = 0
[Enum(Multiply,0,Add,1)] _2MaskTexBlendModeToggle ("2MaskTexBlendModeToggle", Float) = 0
_MaskTexture ("MaskTexture", 2D) = "white" { }
[Enum(R,0,G,1,B,2,A,3)] _MaskTexChannelToggle ("MaskTexChannelToggle", Float) = 0
_MaskTex_Uspeed ("MaskTex_Uspeed", Float) = 0
_MaskTex_Vspeed ("MaskTex_Vspeed", Float) = 0
_MaskTexScaler ("MaskTexScaler", Float) = 1
_MaskTexture02 ("MaskTexture02", 2D) = "white" { }
[Enum(R,0,G,1,B,2,A,3)] _MaskTex02ChannelToggle ("MaskTex02ChannelToggle", Float) = 1
_MaskTex02_Uspeed ("MaskTex02_Uspeed", Float) = 0
_MaskTex02_Vspeed ("MaskTex02_Vspeed", Float) = 0
_MaskTex02Scaler ("MaskTex02Scaler", Float) = 1
[Enum(Multiply,0,Add,1)] _MaskTexBlendModeToggle ("MaskTexBlendModeToggle", Float) = 0
[Toggle(_ALPHASOFTEDGETOGGLE_ON)] _AlphaSoftedgeToggle ("AlphaSoftedge[Toggle]", Float) = 0
_AlphaSoftedgeScale ("AlphaSoftedgeScale", Float) = 1
_AlphaSoftedgePower ("AlphaSoftedgePower", Float) = 1
[Toggle(_ALPHAFADEBYDISTANCETOGGLE_ON)] _AlphaFadeByDistanceToggle ("AlphaFadeByDistance[Toggle]", Float) = 0
[MHYToggle] _DistanceInvert ("DistanceInvert", Float) = 0
_AlphaFadeDistance ("AlphaFadeDistance", Float) = 2
_AlphaFadeOffset ("AlphaFadeOffset", Float) = 0
[Header(MiHoYoDepthFade)] [Toggle(_SOFTPARTICLES_ON)] _SOFTPARTICLES ("SOFTPARTICLES", Float) = 0
_DepthThresh ("DepthThresh", Range(0.001, 20)) = 1
_DepthFade ("DepthFade", Range(0.001, 20)) = 1
_DepthBrightnessColor ("DepthBrightnessColor", Color) = (1,1,1,1)
_DepthBrightnessColorScale ("DepthBrightnessColorScale", Float) = 1
_DepthBrightnessThrshold ("DepthBrightnessThrshold", Float) = 0
_DepthBrightnessScale ("DepthBrightnessScale", Float) = 1
[Header(Motion Vectors)] _MotionVectorsAlphaCutoff ("Motion Vectors Alpha Cutoff", Range(0, 1)) = 0.1
[Header(Cull Mode)] [Enum(UnityEngine.Rendering.CullMode)] _Cull ("Cull Mode", Float) = 2
_MHYZBias ("Z Bias", Float) = 0
_PolygonOffsetFactor ("Polygon Offset Factor", Float) = 0
_PolygonOffsetUnit ("Polygon Offset Unit", Float) = 0
[Header(Blend Mode)] [Enum(UnityEngine.Rendering.BlendMode)] _SrcBlendMode ("Src Blend Mode", Float) = 1
[Enum(UnityEngine.Rendering.BlendMode)] _DstBlendMode ("Dst Blend Mode", Float) = 0
[Enum(UnityEngine.Rendering.BlendOp)] _BlendOP ("BlendOp Mode", Float) = 0
[Header(Depth Mode)] [Enum(Off, 0, On, 1)] _Zwrite ("ZWrite Mode", Float) = 1
[Enum(UnityEngine.Rendering.CompareFunction)] _Ztest ("ZTest Mode", Float) = 4
[Header(Fog Mode)] [Toggle(EFFECTED_BY_FOG)] _EffectedByFog ("Effected by fog", Float) = 0
}
SubShader {
 Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Name "MAIN"
  Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "PreviewType" = "Plane" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZTest Off
  ZWrite Off
  Cull Off
  GpuProgramID 7343
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
float u_xlat5;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat4.y;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8 = u_xlat4.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_3.x;
    u_xlat4.x = _MaskTexScaler * u_xlat4.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat4.x = u_xlatb1.y ? u_xlat4.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8 = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8 : u_xlat1.x;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb2.x) ? u_xlat1.w : u_xlat8;
    u_xlat12 = u_xlat8 * _BaseTexAlphaScaler;
    u_xlat8 = u_xlat8 * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb2.y ? u_xlat8 : float(0.0);
    u_xlat4.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8 = u_xlatb8 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.z : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat6;
vec2 u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb5 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = (u_xlatb2.x) ? u_xlat10.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat10.xy);
    u_xlat5.x = u_xlatb5 ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = u_xlat5.x + _Noise_Offset;
    u_xlat10.x = u_xlat5.x * _Noise_Brightness;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat10.xx * vec2(_NoiseIntensityOnMask) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat1.x = u_xlat15 * _MaskTexScaler;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat6.y;
    u_xlat6.xy = u_xlat10.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat2 = texture(_MaskTexture02, u_xlat6.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_4.x = (u_xlatb3.w) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _MaskTex02Scaler;
    u_xlat10.x = u_xlat1.x * u_xlat16_4.x;
    u_xlat15 = _MaskTexScaler * u_xlat15 + u_xlat16_4.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb1.y ? u_xlat15 : float(0.0);
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb15 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat11 = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb15) ? u_xlat11 : u_xlat1.x;
    u_xlat15 = u_xlat6.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb1.x) ? u_xlat15 : u_xlat6.x;
    u_xlat5.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat5.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat5.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat15 = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat10.x;
    u_xlat10.x = u_xlat10.x * u_xlat15;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat5.x = u_xlatb2.y ? u_xlat5.x : float(0.0);
    u_xlat5.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb10 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat10.x = u_xlatb10 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat10.x;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_4.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
float u_xlat5;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat4.y;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8 = u_xlat4.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_3.x;
    u_xlat4.x = _MaskTexScaler * u_xlat4.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat4.x = u_xlatb1.y ? u_xlat4.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8 = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8 : u_xlat1.x;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb2.x) ? u_xlat1.w : u_xlat8;
    u_xlat12 = u_xlat8 * _BaseTexAlphaScaler;
    u_xlat8 = u_xlat8 * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb2.y ? u_xlat8 : float(0.0);
    u_xlat4.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8 = u_xlatb8 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.z : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat2.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xzw);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat6;
vec2 u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb5 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = (u_xlatb2.x) ? u_xlat10.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat10.xy);
    u_xlat5.x = u_xlatb5 ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = u_xlat5.x + _Noise_Offset;
    u_xlat10.x = u_xlat5.x * _Noise_Brightness;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat10.xx * vec2(_NoiseIntensityOnMask) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat1.x = u_xlat15 * _MaskTexScaler;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat6.y;
    u_xlat6.xy = u_xlat10.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat2 = texture(_MaskTexture02, u_xlat6.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_4.x = (u_xlatb3.w) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _MaskTex02Scaler;
    u_xlat10.x = u_xlat1.x * u_xlat16_4.x;
    u_xlat15 = _MaskTexScaler * u_xlat15 + u_xlat16_4.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb1.y ? u_xlat15 : float(0.0);
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb15 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat11 = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb15) ? u_xlat11 : u_xlat1.x;
    u_xlat15 = u_xlat6.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb1.x) ? u_xlat15 : u_xlat6.x;
    u_xlat5.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat5.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat5.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat15 = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat10.x;
    u_xlat10.x = u_xlat10.x * u_xlat15;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat5.x = u_xlatb2.y ? u_xlat5.x : float(0.0);
    u_xlat5.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb10 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat10.x = u_xlatb10 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat10.x;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_4.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat2.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xzw);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat4.yz).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = (-u_xlat4.x) + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat8.x * vs_COLOR0.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat4.yz).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = (-u_xlat4.x) + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat8.x * vs_COLOR0.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat4.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat4.x = u_xlat0.x * _Noise_Brightness;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = u_xlat4.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat8.x;
    u_xlat12 = u_xlat8.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat4.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat12 * u_xlat16_3.x;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb1.y ? u_xlat8.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8.x) ? u_xlat5 : u_xlat12;
    u_xlat8.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat8.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat4.yz).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = (-u_xlat4.x) + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat8.x * vs_COLOR0.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat10.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = u_xlat0.x * _MaskTexScaler;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat10.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat5.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb10.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb5 = _UmoveRandomToggle==1.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * _BaseTex_Uspeed + u_xlat10.x;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat10.y;
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : u_xlat10.x;
    u_xlat5.x = u_xlat15 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb10.x) ? u_xlat5.x : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat10.x = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat5.x = u_xlatb10.y ? u_xlat5.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTexture, u_xlat5.yz).x;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * vs_COLOR0.w;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3.x;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb10.x) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb15 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb15) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat10.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTexture, u_xlat5.yz).x;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * vs_COLOR0.w;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat4.yz).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = (-u_xlat4.x) + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat8.x = u_xlat8.x + (-_AlphaFadeOffset);
    u_xlat8.x = u_xlat8.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat8.x = (u_xlatb2.x) ? u_xlat8.x : u_xlat12;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat8.x * vs_COLOR0.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat10.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = u_xlat0.x * _MaskTexScaler;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat10.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat5.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb10.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb5 = _UmoveRandomToggle==1.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * _BaseTex_Uspeed + u_xlat10.x;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat10.y;
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : u_xlat10.x;
    u_xlat5.x = u_xlat15 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb10.x) ? u_xlat5.x : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat10.x = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat5.x = u_xlatb10.y ? u_xlat5.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTexture, u_xlat5.yz).x;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat10.x = u_xlat10.x + (-_AlphaFadeOffset);
    u_xlat10.x = u_xlat10.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat10.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat15;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * vs_COLOR0.w;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3.x;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb10.x) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb15 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb15) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat10.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTexture, u_xlat5.yz).x;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat10.x = u_xlat10.x + (-_AlphaFadeOffset);
    u_xlat10.x = u_xlat10.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat10.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat15;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * vs_COLOR0.w;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
float u_xlat5;
float u_xlat8;
int u_xlati8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat4.y;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8 = u_xlat4.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_3.x;
    u_xlat4.x = _MaskTexScaler * u_xlat4.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat4.x = u_xlatb1.y ? u_xlat4.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8 = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8 : u_xlat1.x;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb2.x) ? u_xlat1.w : u_xlat8;
    u_xlat12 = u_xlat8 * _BaseTexAlphaScaler;
    u_xlat8 = u_xlat8 * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb2.y ? u_xlat8 : float(0.0);
    u_xlat4.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8 = u_xlatb8 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.z : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati8 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati8]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat2.w * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat6;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb5 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = (u_xlatb2.x) ? u_xlat10.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat10.xy);
    u_xlat5.x = u_xlatb5 ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = u_xlat5.x + _Noise_Offset;
    u_xlat10.x = u_xlat5.x * _Noise_Brightness;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat10.xx * vec2(_NoiseIntensityOnMask) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat1.x = u_xlat15 * _MaskTexScaler;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat6.y;
    u_xlat6.xy = u_xlat10.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat2 = texture(_MaskTexture02, u_xlat6.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_4.x = (u_xlatb3.w) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _MaskTex02Scaler;
    u_xlat10.x = u_xlat1.x * u_xlat16_4.x;
    u_xlat15 = _MaskTexScaler * u_xlat15 + u_xlat16_4.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb1.y ? u_xlat15 : float(0.0);
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb15 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat11 = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb15) ? u_xlat11 : u_xlat1.x;
    u_xlat15 = u_xlat6.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb1.x) ? u_xlat15 : u_xlat6.x;
    u_xlat5.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat5.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat5.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat15 = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat10.x;
    u_xlat10.x = u_xlat10.x * u_xlat15;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat5.x = u_xlatb2.y ? u_xlat5.x : float(0.0);
    u_xlat5.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb10 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat10.x = u_xlatb10 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat10.x;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati10 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati10]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_4.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat2.w * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
float u_xlat5;
float u_xlat8;
int u_xlati8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat4.y;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8 = u_xlat4.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_3.x;
    u_xlat4.x = _MaskTexScaler * u_xlat4.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat4.x = u_xlatb1.y ? u_xlat4.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8 = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8 : u_xlat1.x;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb2.x) ? u_xlat1.w : u_xlat8;
    u_xlat12 = u_xlat8 * _BaseTexAlphaScaler;
    u_xlat8 = u_xlat8 * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb2.y ? u_xlat8 : float(0.0);
    u_xlat4.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8 = u_xlatb8 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.z : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati8 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati8]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat2.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xzw);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat2.w * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat6;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb5 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = (u_xlatb2.x) ? u_xlat10.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat10.xy);
    u_xlat5.x = u_xlatb5 ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = u_xlat5.x + _Noise_Offset;
    u_xlat10.x = u_xlat5.x * _Noise_Brightness;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat10.xx * vec2(_NoiseIntensityOnMask) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat1.x = u_xlat15 * _MaskTexScaler;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat6.y;
    u_xlat6.xy = u_xlat10.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat2 = texture(_MaskTexture02, u_xlat6.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_4.x = (u_xlatb3.w) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _MaskTex02Scaler;
    u_xlat10.x = u_xlat1.x * u_xlat16_4.x;
    u_xlat15 = _MaskTexScaler * u_xlat15 + u_xlat16_4.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb1.y ? u_xlat15 : float(0.0);
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb15 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat11 = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb15) ? u_xlat11 : u_xlat1.x;
    u_xlat15 = u_xlat6.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb1.x) ? u_xlat15 : u_xlat6.x;
    u_xlat5.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat5.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat5.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat15 = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat10.x;
    u_xlat10.x = u_xlat10.x * u_xlat15;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat5.x = u_xlatb2.y ? u_xlat5.x : float(0.0);
    u_xlat5.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb10 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat10.x = u_xlatb10 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat10.x;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati10 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati10]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_4.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat2.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xzw);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat2.w * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat4.yz).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = (-u_xlat4.x) + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati12 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati12]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat2.w * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat4.yz).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = (-u_xlat4.x) + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati12 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati12]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat2.w * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat4.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat4.x = u_xlat0.x * _Noise_Brightness;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = u_xlat4.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat8.x;
    u_xlat12 = u_xlat8.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat4.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat12 * u_xlat16_3.x;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb1.y ? u_xlat8.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8.x) ? u_xlat5 : u_xlat12;
    u_xlat8.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat8.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat4.yz).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = (-u_xlat4.x) + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati12 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati12]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat2.w * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat10.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = u_xlat0.x * _MaskTexScaler;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat10.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat5.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb10.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb5 = _UmoveRandomToggle==1.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * _BaseTex_Uspeed + u_xlat10.x;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat10.y;
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : u_xlat10.x;
    u_xlat5.x = u_xlat15 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb10.x) ? u_xlat5.x : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat10.x = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat5.x = u_xlatb10.y ? u_xlat5.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTexture, u_xlat5.yz).x;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati15 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati15]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat2.w * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3.x;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb10.x) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb15 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb15) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat10.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTexture, u_xlat5.yz).x;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati15 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati15]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat2.w * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat4.yz).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = (-u_xlat4.x) + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati12 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati12]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat8.x = u_xlat8.x + (-_AlphaFadeOffset);
    u_xlat8.x = u_xlat8.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat8.x = (u_xlatb2.x) ? u_xlat8.x : u_xlat12;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat2.w * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat10.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = u_xlat0.x * _MaskTexScaler;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat10.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat5.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb10.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb5 = _UmoveRandomToggle==1.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * _BaseTex_Uspeed + u_xlat10.x;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat10.y;
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : u_xlat10.x;
    u_xlat5.x = u_xlat15 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb10.x) ? u_xlat5.x : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat10.x = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat5.x = u_xlatb10.y ? u_xlat5.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTexture, u_xlat5.yz).x;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati15 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati15]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat10.x = u_xlat10.x + (-_AlphaFadeOffset);
    u_xlat10.x = u_xlat10.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat10.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat15;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat2.w * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3.x;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb10.x) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb15 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb15) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat10.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTexture, u_xlat5.yz).x;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati15 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati15]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat10.x = u_xlat10.x + (-_AlphaFadeOffset);
    u_xlat10.x = u_xlat10.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat10.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat15;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat2.w * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
float u_xlat5;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z;
    u_xlat0.x = u_xlat4.x * _ProjectionParams.z + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat4.y;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8 = u_xlat4.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_3.x;
    u_xlat4.x = _MaskTexScaler * u_xlat4.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat4.x = u_xlatb1.y ? u_xlat4.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8 = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8 : u_xlat1.x;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb2.x) ? u_xlat1.w : u_xlat8;
    u_xlat12 = u_xlat8 * _BaseTexAlphaScaler;
    u_xlat8 = u_xlat8 * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb2.y ? u_xlat8 : float(0.0);
    u_xlat4.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8 = u_xlatb8 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.z : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat4.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat4.x = u_xlat0.x * _Noise_Brightness;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = u_xlat4.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat8.x;
    u_xlat12 = u_xlat8.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat4.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat12 * u_xlat16_3.x;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb1.y ? u_xlat8.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8.x) ? u_xlat5 : u_xlat12;
    u_xlat8.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat8.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z;
    u_xlat4.x = u_xlat8.x * _ProjectionParams.z + (-u_xlat4.x);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8.x = u_xlatb8.x ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat8.x;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : u_xlat8.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
float u_xlat5;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z;
    u_xlat0.x = u_xlat4.x * _ProjectionParams.z + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat4.y;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8 = u_xlat4.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_3.x;
    u_xlat4.x = _MaskTexScaler * u_xlat4.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat4.x = u_xlatb1.y ? u_xlat4.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8 = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8 : u_xlat1.x;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb2.x) ? u_xlat1.w : u_xlat8;
    u_xlat12 = u_xlat8 * _BaseTexAlphaScaler;
    u_xlat8 = u_xlat8 * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb2.y ? u_xlat8 : float(0.0);
    u_xlat4.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8 = u_xlatb8 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.z : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat2.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xzw);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat4.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat4.x = u_xlat0.x * _Noise_Brightness;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = u_xlat4.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat8.x;
    u_xlat12 = u_xlat8.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat4.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat12 * u_xlat16_3.x;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb1.y ? u_xlat8.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8.x) ? u_xlat5 : u_xlat12;
    u_xlat8.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat8.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z;
    u_xlat4.x = u_xlat8.x * _ProjectionParams.z + (-u_xlat4.x);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8.x = u_xlatb8.x ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat8.x;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : u_xlat8.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat4.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD6.xyz;
    u_xlat2.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD7.xyz;
    u_xlat4.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgePower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat12 = u_xlat8.x * _ProjectionParams.z;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4.x = (-u_xlat4.x) * _ProjectionParams.z + u_xlat12;
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat8.x * vs_COLOR0.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat12 = u_xlat8.x * _ProjectionParams.z;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4.x = (-u_xlat4.x) * _ProjectionParams.z + u_xlat12;
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat8.x * vs_COLOR0.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat4.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat4.x = u_xlat0.x * _Noise_Brightness;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = u_xlat4.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat8.x;
    u_xlat12 = u_xlat8.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat4.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat12 * u_xlat16_3.x;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb1.y ? u_xlat8.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8.x) ? u_xlat5 : u_xlat12;
    u_xlat8.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat8.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat12 = u_xlat8.x * _ProjectionParams.z;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4.x = (-u_xlat4.x) * _ProjectionParams.z + u_xlat12;
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat8.x * vs_COLOR0.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat10.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = u_xlat0.x * _MaskTexScaler;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat10.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat5.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb10.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb5 = _UmoveRandomToggle==1.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * _BaseTex_Uspeed + u_xlat10.x;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat10.y;
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : u_xlat10.x;
    u_xlat5.x = u_xlat15 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb10.x) ? u_xlat5.x : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat10.x = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat5.x = u_xlatb10.y ? u_xlat5.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTextureScaled, u_xlat5.yz).x;
    u_xlat15 = u_xlat10.x * _ProjectionParams.z;
    u_xlat10.x = u_xlat10.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) * _ProjectionParams.z + u_xlat15;
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * vs_COLOR0.w;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3.x;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb10.x) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb15 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb15) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat10.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTextureScaled, u_xlat5.yz).x;
    u_xlat15 = u_xlat10.x * _ProjectionParams.z;
    u_xlat10.x = u_xlat10.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) * _ProjectionParams.z + u_xlat15;
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * vs_COLOR0.w;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat12 = u_xlat8.x * _ProjectionParams.z;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4.x = (-u_xlat4.x) * _ProjectionParams.z + u_xlat12;
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat8.x = u_xlat8.x + (-_AlphaFadeOffset);
    u_xlat8.x = u_xlat8.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat8.x = (u_xlatb2.x) ? u_xlat8.x : u_xlat12;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat8.x * vs_COLOR0.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat10.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = u_xlat0.x * _MaskTexScaler;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat10.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat5.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb10.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb5 = _UmoveRandomToggle==1.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * _BaseTex_Uspeed + u_xlat10.x;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat10.y;
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : u_xlat10.x;
    u_xlat5.x = u_xlat15 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb10.x) ? u_xlat5.x : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat10.x = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat5.x = u_xlatb10.y ? u_xlat5.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTextureScaled, u_xlat5.yz).x;
    u_xlat15 = u_xlat10.x * _ProjectionParams.z;
    u_xlat10.x = u_xlat10.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) * _ProjectionParams.z + u_xlat15;
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat10.x = u_xlat10.x + (-_AlphaFadeOffset);
    u_xlat10.x = u_xlat10.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat10.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat15;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * vs_COLOR0.w;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3.x;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb10.x) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb15 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb15) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat10.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTextureScaled, u_xlat5.yz).x;
    u_xlat15 = u_xlat10.x * _ProjectionParams.z;
    u_xlat10.x = u_xlat10.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) * _ProjectionParams.z + u_xlat15;
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat10.x = u_xlat10.x + (-_AlphaFadeOffset);
    u_xlat10.x = u_xlat10.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat10.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat15;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * vs_COLOR0.w;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
float u_xlat5;
float u_xlat8;
int u_xlati8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z;
    u_xlat0.x = u_xlat4.x * _ProjectionParams.z + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat4.y;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8 = u_xlat4.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_3.x;
    u_xlat4.x = _MaskTexScaler * u_xlat4.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat4.x = u_xlatb1.y ? u_xlat4.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8 = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8 : u_xlat1.x;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb2.x) ? u_xlat1.w : u_xlat8;
    u_xlat12 = u_xlat8 * _BaseTexAlphaScaler;
    u_xlat8 = u_xlat8 * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb2.y ? u_xlat8 : float(0.0);
    u_xlat4.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8 = u_xlatb8 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.z : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati8 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati8]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat2.w * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec2 u_xlat8;
int u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat4.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat4.x = u_xlat0.x * _Noise_Brightness;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = u_xlat4.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat8.x;
    u_xlat12 = u_xlat8.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat4.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat12 * u_xlat16_3.x;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb1.y ? u_xlat8.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8.x) ? u_xlat5 : u_xlat12;
    u_xlat8.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat8.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z;
    u_xlat4.x = u_xlat8.x * _ProjectionParams.z + (-u_xlat4.x);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8.x = u_xlatb8.x ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat8.x;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : u_xlat8.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati8 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati8]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat2.w * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
float u_xlat5;
float u_xlat8;
int u_xlati8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z;
    u_xlat0.x = u_xlat4.x * _ProjectionParams.z + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat4.y;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8 = u_xlat4.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_3.x;
    u_xlat4.x = _MaskTexScaler * u_xlat4.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat4.x = u_xlatb1.y ? u_xlat4.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8 = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8 : u_xlat1.x;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb2.x) ? u_xlat1.w : u_xlat8;
    u_xlat12 = u_xlat8 * _BaseTexAlphaScaler;
    u_xlat8 = u_xlat8 * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb2.y ? u_xlat8 : float(0.0);
    u_xlat4.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8 = u_xlatb8 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.z : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati8 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati8]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat2.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xzw);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat2.w * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec2 u_xlat8;
int u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat4.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat4.x = u_xlat0.x * _Noise_Brightness;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = u_xlat4.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat8.x;
    u_xlat12 = u_xlat8.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat4.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat12 * u_xlat16_3.x;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb1.y ? u_xlat8.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8.x) ? u_xlat5 : u_xlat12;
    u_xlat8.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat8.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z;
    u_xlat4.x = u_xlat8.x * _ProjectionParams.z + (-u_xlat4.x);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8.x = u_xlatb8.x ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat8.x;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : u_xlat8.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati8 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati8]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat4.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD6.xyz;
    u_xlat2.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD7.xyz;
    u_xlat4.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgePower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat2.w * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat12 = u_xlat8.x * _ProjectionParams.z;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4.x = (-u_xlat4.x) * _ProjectionParams.z + u_xlat12;
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati12 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati12]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat2.w * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat12 = u_xlat8.x * _ProjectionParams.z;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4.x = (-u_xlat4.x) * _ProjectionParams.z + u_xlat12;
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati12 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati12]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat2.w * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat4.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat4.x = u_xlat0.x * _Noise_Brightness;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = u_xlat4.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat8.x;
    u_xlat12 = u_xlat8.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat4.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat12 * u_xlat16_3.x;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb1.y ? u_xlat8.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8.x) ? u_xlat5 : u_xlat12;
    u_xlat8.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat8.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat12 = u_xlat8.x * _ProjectionParams.z;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4.x = (-u_xlat4.x) * _ProjectionParams.z + u_xlat12;
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati12 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati12]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat2.w * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat10.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = u_xlat0.x * _MaskTexScaler;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat10.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat5.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb10.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb5 = _UmoveRandomToggle==1.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * _BaseTex_Uspeed + u_xlat10.x;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat10.y;
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : u_xlat10.x;
    u_xlat5.x = u_xlat15 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb10.x) ? u_xlat5.x : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat10.x = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat5.x = u_xlatb10.y ? u_xlat5.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTextureScaled, u_xlat5.yz).x;
    u_xlat15 = u_xlat10.x * _ProjectionParams.z;
    u_xlat10.x = u_xlat10.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) * _ProjectionParams.z + u_xlat15;
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati15 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati15]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat2.w * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3.x;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb10.x) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb15 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb15) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat10.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTextureScaled, u_xlat5.yz).x;
    u_xlat15 = u_xlat10.x * _ProjectionParams.z;
    u_xlat10.x = u_xlat10.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) * _ProjectionParams.z + u_xlat15;
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati15 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati15]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat2.w * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat12 = u_xlat8.x * _ProjectionParams.z;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4.x = (-u_xlat4.x) * _ProjectionParams.z + u_xlat12;
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati12 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati12]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat8.x = u_xlat8.x + (-_AlphaFadeOffset);
    u_xlat8.x = u_xlat8.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat8.x = (u_xlatb2.x) ? u_xlat8.x : u_xlat12;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat2.w * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat10.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = u_xlat0.x * _MaskTexScaler;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat10.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat5.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb10.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb5 = _UmoveRandomToggle==1.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * _BaseTex_Uspeed + u_xlat10.x;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat10.y;
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : u_xlat10.x;
    u_xlat5.x = u_xlat15 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb10.x) ? u_xlat5.x : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat10.x = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat5.x = u_xlatb10.y ? u_xlat5.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTextureScaled, u_xlat5.yz).x;
    u_xlat15 = u_xlat10.x * _ProjectionParams.z;
    u_xlat10.x = u_xlat10.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) * _ProjectionParams.z + u_xlat15;
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati15 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati15]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat10.x = u_xlat10.x + (-_AlphaFadeOffset);
    u_xlat10.x = u_xlat10.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat10.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat15;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat2.w * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3.x;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb10.x) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb15 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb15) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat10.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTextureScaled, u_xlat5.yz).x;
    u_xlat15 = u_xlat10.x * _ProjectionParams.z;
    u_xlat10.x = u_xlat10.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) * _ProjectionParams.z + u_xlat15;
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati15 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati15]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat10.x = u_xlat10.x + (-_AlphaFadeOffset);
    u_xlat10.x = u_xlat10.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat10.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat15;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat2.w * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb18 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat6.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb18) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat18 = u_xlat6.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat6.x;
    u_xlat12 = u_xlat6.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat2.x = u_xlat18 * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat2.x = u_xlat2.x * u_xlat16_5.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat18 = _MaskTexScaler * u_xlat18 + u_xlat16_5.x;
    u_xlat18 = u_xlatb8.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb8.x) ? u_xlat2.x : u_xlat18;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlat6.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat6.x = u_xlatb2.y ? u_xlat6.x : float(0.0);
    u_xlat6.x = (u_xlatb2.x) ? u_xlat12 : u_xlat6.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat12 = _DayColor.w * _AlphaBrightness;
    u_xlat12 = u_xlat12 * vs_COLOR0.w;
    u_xlat12 = u_xlat12 * _MainColor.w;
    u_xlat2.w = u_xlat6.x * u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb18 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat6.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb18) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat18 = u_xlat6.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb6 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + _Noise_Offset;
    u_xlat12 = u_xlat6.x * _Noise_Brightness;
    u_xlat6.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat6.x;
    u_xlat18 = u_xlat6.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2.xy = vec2(u_xlat12) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat2 = texture(_MaskTexture, u_xlat2.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat14.xy = vec2(u_xlat12) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat14.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat12 = u_xlat8 * u_xlat16_5.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb8.y ? u_xlat2.x : float(0.0);
    u_xlat12 = (u_xlatb8.x) ? u_xlat12 : u_xlat2.x;
    u_xlat18 = u_xlat12 * u_xlat18;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlat6.x * _BaseTexAlphaScaler + u_xlat12;
    u_xlat6.x = u_xlatb2.y ? u_xlat6.x : float(0.0);
    u_xlat6.x = (u_xlatb2.x) ? u_xlat18 : u_xlat6.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat12 = _DayColor.w * _AlphaBrightness;
    u_xlat12 = u_xlat12 * vs_COLOR0.w;
    u_xlat12 = u_xlat12 * _MainColor.w;
    u_xlat2.w = u_xlat6.x * u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb18 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat6.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb18) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat18 = u_xlat6.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat6.x;
    u_xlat12 = u_xlat6.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat2.x = u_xlat18 * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat2.x = u_xlat2.x * u_xlat16_5.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat18 = _MaskTexScaler * u_xlat18 + u_xlat16_5.x;
    u_xlat18 = u_xlatb8.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb8.x) ? u_xlat2.x : u_xlat18;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlat6.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat6.x = u_xlatb2.y ? u_xlat6.x : float(0.0);
    u_xlat6.x = (u_xlatb2.x) ? u_xlat12 : u_xlat6.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD7.xyz;
    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = log2(u_xlat12);
    u_xlat12 = u_xlat12 * _AlphaSoftedgePower;
    u_xlat12 = exp2(u_xlat12);
    u_xlat12 = u_xlat12 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat6.x;
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat2.w = u_xlat12 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb18 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat6.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb18) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat18 = u_xlat6.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb6 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + _Noise_Offset;
    u_xlat12 = u_xlat6.x * _Noise_Brightness;
    u_xlat6.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat6.x;
    u_xlat18 = u_xlat6.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2.xy = vec2(u_xlat12) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat2 = texture(_MaskTexture, u_xlat2.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat14.xy = vec2(u_xlat12) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat14.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat12 = u_xlat8 * u_xlat16_5.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb8.y ? u_xlat2.x : float(0.0);
    u_xlat12 = (u_xlatb8.x) ? u_xlat12 : u_xlat2.x;
    u_xlat18 = u_xlat12 * u_xlat18;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlat6.x * _BaseTexAlphaScaler + u_xlat12;
    u_xlat6.x = u_xlatb2.y ? u_xlat6.x : float(0.0);
    u_xlat6.x = (u_xlatb2.x) ? u_xlat18 : u_xlat6.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD7.xyz;
    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = log2(u_xlat12);
    u_xlat12 = u_xlat12 * _AlphaSoftedgePower;
    u_xlat12 = exp2(u_xlat12);
    u_xlat12 = u_xlat12 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat6.x;
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat2.w = u_xlat12 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6 = _ZBufferParams.z * u_xlat6 + _ZBufferParams.w;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat18 = u_xlat12.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6 = _ZBufferParams.z * u_xlat6 + _ZBufferParams.w;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat18 = u_xlat12.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6 = _ZBufferParams.z * u_xlat6 + _ZBufferParams.w;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat18 = u_xlat12.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6 = _ZBufferParams.z * u_xlat6 + _ZBufferParams.w;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD7.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgePower;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6 = _ZBufferParams.z * u_xlat6 + _ZBufferParams.w;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD7.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgePower;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6 = _ZBufferParams.z * u_xlat6 + _ZBufferParams.w;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat18 = u_xlat18 + (-_AlphaFadeOffset);
    u_xlat18 = u_xlat18 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(_DistanceInvert==1.0);
#else
    u_xlatb19 = _DistanceInvert==1.0;
#endif
    u_xlat2.x = (-u_xlat18) + 1.0;
    u_xlat18 = (u_xlatb19) ? u_xlat18 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6 = _ZBufferParams.z * u_xlat6 + _ZBufferParams.w;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD7.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgePower;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat19 = u_xlat19 + (-_AlphaFadeOffset);
    u_xlat19 = u_xlat19 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat8 = (-u_xlat19) + 1.0;
    u_xlat19 = (u_xlatb2.x) ? u_xlat19 : u_xlat8;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6 = _ZBufferParams.z * u_xlat6 + _ZBufferParams.w;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD7.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgePower;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat19 = u_xlat19 + (-_AlphaFadeOffset);
    u_xlat19 = u_xlat19 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat8.x = (-u_xlat19) + 1.0;
    u_xlat19 = (u_xlatb2.x) ? u_xlat19 : u_xlat8.x;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat2.w * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat3.w = u_xlat12.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat6.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat2.w * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat3.w = u_xlat12.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat6.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat4.xyz = u_xlat0.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat2.w * u_xlat18;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat3.w = u_xlat0.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat6.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat4.xyz = u_xlat0.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat2.w * u_xlat18;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat3.w = u_xlat0.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat6.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12 = _ZBufferParams.z * u_xlat12 + _ZBufferParams.w;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat2.w * u_xlat0;
    u_xlat0 = u_xlat0 * _MainColor.w;
    u_xlat0 = u_xlat18 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12 = _ZBufferParams.z * u_xlat12 + _ZBufferParams.w;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat2.w * u_xlat0;
    u_xlat0 = u_xlat0 * _MainColor.w;
    u_xlat0 = u_xlat18 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat7;
float u_xlat12;
vec2 u_xlat13;
bvec2 u_xlatb13;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12 = _ZBufferParams.z * u_xlat12 + _ZBufferParams.w;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat13.x = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat13.x : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat7.x = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1.x) ? u_xlat7.x : u_xlat18;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex01_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex01_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat14.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat14.xy = (u_xlatb1.x) ? u_xlat14.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex01, u_xlat14.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb18 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat3.w : float(0.0);
    u_xlat18 = (u_xlatb1.w) ? u_xlat3.z : u_xlat18;
    u_xlat18 = (u_xlatb1.z) ? u_xlat3.y : u_xlat18;
    u_xlat18 = (u_xlatb1.y) ? u_xlat3.x : u_xlat18;
    u_xlat18 = u_xlat18 + _Noise_Offset;
    u_xlat1.x = u_xlat18 * _Noise_Brightness;
    u_xlat7.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat18) + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.x : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.w : u_xlat18;
    u_xlat7.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat13.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat13.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat13.y;
    u_xlat13.xy = u_xlat1.xx * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat13.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat13.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat13.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat13.x;
    u_xlat19 = u_xlat13.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = u_xlat1.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat1.x = u_xlat19 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat13.x = _MaskTexScaler * u_xlat13.x + u_xlat16_5.x;
    u_xlat13.x = u_xlatb3.y ? u_xlat13.x : float(0.0);
    u_xlat1.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat13.x;
    u_xlat7.x = u_xlat1.x * u_xlat7.x;
    u_xlatb13.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat1.x;
    u_xlat18 = u_xlatb13.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb13.x) ? u_xlat7.x : u_xlat18;
    u_xlatb1 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat20 = u_xlatb3.x ? u_xlat2.w : float(0.0);
    u_xlat19 = (u_xlatb1.w) ? u_xlat2.z : u_xlat20;
    u_xlat13.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat19;
    u_xlat7.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat13.x;
    u_xlat1.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat7.xxx;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat2.w * u_xlat0;
    u_xlat0 = u_xlat0 * _MainColor.w;
    u_xlat0 = u_xlat18 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12 = _ZBufferParams.z * u_xlat12 + _ZBufferParams.w;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat3.xyz = vec3(u_xlat0) * vs_TEXCOORD6.xyz;
    u_xlat0 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat4.xyz = vec3(u_xlat0) * vs_TEXCOORD7.xyz;
    u_xlat0 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgePower;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat7;
float u_xlat12;
vec2 u_xlat13;
bvec2 u_xlatb13;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12 = _ZBufferParams.z * u_xlat12 + _ZBufferParams.w;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat13.x = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat13.x : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat7.x = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1.x) ? u_xlat7.x : u_xlat18;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex01_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex01_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat14.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat14.xy = (u_xlatb1.x) ? u_xlat14.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex01, u_xlat14.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb18 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat3.w : float(0.0);
    u_xlat18 = (u_xlatb1.w) ? u_xlat3.z : u_xlat18;
    u_xlat18 = (u_xlatb1.z) ? u_xlat3.y : u_xlat18;
    u_xlat18 = (u_xlatb1.y) ? u_xlat3.x : u_xlat18;
    u_xlat18 = u_xlat18 + _Noise_Offset;
    u_xlat1.x = u_xlat18 * _Noise_Brightness;
    u_xlat7.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat18) + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.x : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.w : u_xlat18;
    u_xlat7.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat13.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat13.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat13.y;
    u_xlat13.xy = u_xlat1.xx * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat13.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat13.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat13.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat13.x;
    u_xlat19 = u_xlat13.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = u_xlat1.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat1.x = u_xlat19 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat13.x = _MaskTexScaler * u_xlat13.x + u_xlat16_5.x;
    u_xlat13.x = u_xlatb3.y ? u_xlat13.x : float(0.0);
    u_xlat1.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat13.x;
    u_xlat7.x = u_xlat1.x * u_xlat7.x;
    u_xlatb13.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat1.x;
    u_xlat18 = u_xlatb13.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb13.x) ? u_xlat7.x : u_xlat18;
    u_xlatb1 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat20 = u_xlatb3.x ? u_xlat2.w : float(0.0);
    u_xlat19 = (u_xlatb1.w) ? u_xlat2.z : u_xlat20;
    u_xlat13.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat19;
    u_xlat7.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat13.x;
    u_xlat1.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat7.xxx;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat3.xyz = vec3(u_xlat0) * vs_TEXCOORD6.xyz;
    u_xlat0 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat4.xyz = vec3(u_xlat0) * vs_TEXCOORD7.xyz;
    u_xlat0 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgePower;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12 = _ZBufferParams.z * u_xlat12 + _ZBufferParams.w;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat0 = u_xlat0 + (-_AlphaFadeOffset);
    u_xlat0 = u_xlat0 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(_DistanceInvert==1.0);
#else
    u_xlatb19 = _DistanceInvert==1.0;
#endif
    u_xlat3.x = (-u_xlat0) + 1.0;
    u_xlat0 = (u_xlatb19) ? u_xlat0 : u_xlat3.x;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat9;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12 = _ZBufferParams.z * u_xlat12 + _ZBufferParams.w;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat3.xyz = vec3(u_xlat0) * vs_TEXCOORD6.xyz;
    u_xlat0 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat4.xyz = vec3(u_xlat0) * vs_TEXCOORD7.xyz;
    u_xlat0 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgePower;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat19 = u_xlat19 + (-_AlphaFadeOffset);
    u_xlat19 = u_xlat19 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb3.x = _DistanceInvert==1.0;
#endif
    u_xlat9 = (-u_xlat19) + 1.0;
    u_xlat19 = (u_xlatb3.x) ? u_xlat19 : u_xlat9;
    u_xlat0 = u_xlat0 * u_xlat19;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat7;
float u_xlat9;
float u_xlat12;
vec2 u_xlat13;
bvec2 u_xlatb13;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12 = _ZBufferParams.z * u_xlat12 + _ZBufferParams.w;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat13.x = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat13.x : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat7.x = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1.x) ? u_xlat7.x : u_xlat18;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex01_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex01_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat14.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat14.xy = (u_xlatb1.x) ? u_xlat14.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex01, u_xlat14.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb18 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat3.w : float(0.0);
    u_xlat18 = (u_xlatb1.w) ? u_xlat3.z : u_xlat18;
    u_xlat18 = (u_xlatb1.z) ? u_xlat3.y : u_xlat18;
    u_xlat18 = (u_xlatb1.y) ? u_xlat3.x : u_xlat18;
    u_xlat18 = u_xlat18 + _Noise_Offset;
    u_xlat1.x = u_xlat18 * _Noise_Brightness;
    u_xlat7.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat18) + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.x : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.w : u_xlat18;
    u_xlat7.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat13.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat13.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat13.y;
    u_xlat13.xy = u_xlat1.xx * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat13.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat13.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat13.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat13.x;
    u_xlat19 = u_xlat13.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = u_xlat1.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat1.x = u_xlat19 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat13.x = _MaskTexScaler * u_xlat13.x + u_xlat16_5.x;
    u_xlat13.x = u_xlatb3.y ? u_xlat13.x : float(0.0);
    u_xlat1.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat13.x;
    u_xlat7.x = u_xlat1.x * u_xlat7.x;
    u_xlatb13.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat1.x;
    u_xlat18 = u_xlatb13.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb13.x) ? u_xlat7.x : u_xlat18;
    u_xlatb1 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat20 = u_xlatb3.x ? u_xlat2.w : float(0.0);
    u_xlat19 = (u_xlatb1.w) ? u_xlat2.z : u_xlat20;
    u_xlat13.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat19;
    u_xlat7.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat13.x;
    u_xlat1.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat7.xxx;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat3.xyz = vec3(u_xlat0) * vs_TEXCOORD6.xyz;
    u_xlat0 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat4.xyz = vec3(u_xlat0) * vs_TEXCOORD7.xyz;
    u_xlat0 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgePower;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat19 = u_xlat19 + (-_AlphaFadeOffset);
    u_xlat19 = u_xlat19 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb3.x = _DistanceInvert==1.0;
#endif
    u_xlat9 = (-u_xlat19) + 1.0;
    u_xlat19 = (u_xlatb3.x) ? u_xlat19 : u_xlat9;
    u_xlat0 = u_xlat0 * u_xlat19;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6.x = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z;
    u_xlat0.x = u_xlat6.x * _ProjectionParams.z + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb18 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat6.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb18) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat18 = u_xlat6.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat6.x;
    u_xlat12 = u_xlat6.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat2.x = u_xlat18 * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat2.x = u_xlat2.x * u_xlat16_5.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat18 = _MaskTexScaler * u_xlat18 + u_xlat16_5.x;
    u_xlat18 = u_xlatb8.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb8.x) ? u_xlat2.x : u_xlat18;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlat6.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat6.x = u_xlatb2.y ? u_xlat6.x : float(0.0);
    u_xlat6.x = (u_xlatb2.x) ? u_xlat12 : u_xlat6.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat12 = _DayColor.w * _AlphaBrightness;
    u_xlat12 = u_xlat12 * vs_COLOR0.w;
    u_xlat12 = u_xlat12 * _MainColor.w;
    u_xlat2.w = u_xlat6.x * u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6.x = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z;
    u_xlat0.x = u_xlat6.x * _ProjectionParams.z + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb18 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat6.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb18) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat18 = u_xlat6.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb6 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + _Noise_Offset;
    u_xlat12 = u_xlat6.x * _Noise_Brightness;
    u_xlat6.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat6.x;
    u_xlat18 = u_xlat6.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2.xy = vec2(u_xlat12) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat2 = texture(_MaskTexture, u_xlat2.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat14.xy = vec2(u_xlat12) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat14.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat12 = u_xlat8 * u_xlat16_5.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb8.y ? u_xlat2.x : float(0.0);
    u_xlat12 = (u_xlatb8.x) ? u_xlat12 : u_xlat2.x;
    u_xlat18 = u_xlat12 * u_xlat18;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlat6.x * _BaseTexAlphaScaler + u_xlat12;
    u_xlat6.x = u_xlatb2.y ? u_xlat6.x : float(0.0);
    u_xlat6.x = (u_xlatb2.x) ? u_xlat18 : u_xlat6.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat12 = _DayColor.w * _AlphaBrightness;
    u_xlat12 = u_xlat12 * vs_COLOR0.w;
    u_xlat12 = u_xlat12 * _MainColor.w;
    u_xlat2.w = u_xlat6.x * u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6.x = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z;
    u_xlat0.x = u_xlat6.x * _ProjectionParams.z + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb18 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat6.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb18) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat18 = u_xlat6.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat6.x;
    u_xlat12 = u_xlat6.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat2.x = u_xlat18 * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat2.x = u_xlat2.x * u_xlat16_5.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat18 = _MaskTexScaler * u_xlat18 + u_xlat16_5.x;
    u_xlat18 = u_xlatb8.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb8.x) ? u_xlat2.x : u_xlat18;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlat6.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat6.x = u_xlatb2.y ? u_xlat6.x : float(0.0);
    u_xlat6.x = (u_xlatb2.x) ? u_xlat12 : u_xlat6.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD7.xyz;
    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = log2(u_xlat12);
    u_xlat12 = u_xlat12 * _AlphaSoftedgePower;
    u_xlat12 = exp2(u_xlat12);
    u_xlat12 = u_xlat12 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat6.x;
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat2.w = u_xlat12 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6.x = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z;
    u_xlat0.x = u_xlat6.x * _ProjectionParams.z + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb18 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat6.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb18) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat18 = u_xlat6.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb6 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + _Noise_Offset;
    u_xlat12 = u_xlat6.x * _Noise_Brightness;
    u_xlat6.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat6.x;
    u_xlat18 = u_xlat6.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2.xy = vec2(u_xlat12) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat2 = texture(_MaskTexture, u_xlat2.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat14.xy = vec2(u_xlat12) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat14.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat12 = u_xlat8 * u_xlat16_5.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb8.y ? u_xlat2.x : float(0.0);
    u_xlat12 = (u_xlatb8.x) ? u_xlat12 : u_xlat2.x;
    u_xlat18 = u_xlat12 * u_xlat18;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlat6.x * _BaseTexAlphaScaler + u_xlat12;
    u_xlat6.x = u_xlatb2.y ? u_xlat6.x : float(0.0);
    u_xlat6.x = (u_xlatb2.x) ? u_xlat18 : u_xlat6.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD7.xyz;
    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = log2(u_xlat12);
    u_xlat12 = u_xlat12 * _AlphaSoftedgePower;
    u_xlat12 = exp2(u_xlat12);
    u_xlat12 = u_xlat12 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat6.x;
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat2.w = u_xlat12 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat12.x = u_xlat6 * _ProjectionParams.z;
    u_xlat0.x = (-u_xlat0.x) * _ProjectionParams.z + u_xlat12.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat18 = u_xlat12.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat12.x = u_xlat6 * _ProjectionParams.z;
    u_xlat0.x = (-u_xlat0.x) * _ProjectionParams.z + u_xlat12.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat18 = u_xlat12.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat12.x = u_xlat6 * _ProjectionParams.z;
    u_xlat0.x = (-u_xlat0.x) * _ProjectionParams.z + u_xlat12.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat18 = u_xlat12.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat12.x = u_xlat6 * _ProjectionParams.z;
    u_xlat0.x = (-u_xlat0.x) * _ProjectionParams.z + u_xlat12.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD7.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgePower;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat12.x = u_xlat6 * _ProjectionParams.z;
    u_xlat0.x = (-u_xlat0.x) * _ProjectionParams.z + u_xlat12.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD7.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgePower;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat12.x = u_xlat6 * _ProjectionParams.z;
    u_xlat0.x = (-u_xlat0.x) * _ProjectionParams.z + u_xlat12.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat18 = u_xlat18 + (-_AlphaFadeOffset);
    u_xlat18 = u_xlat18 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(_DistanceInvert==1.0);
#else
    u_xlatb19 = _DistanceInvert==1.0;
#endif
    u_xlat2.x = (-u_xlat18) + 1.0;
    u_xlat18 = (u_xlatb19) ? u_xlat18 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat12.x = u_xlat6 * _ProjectionParams.z;
    u_xlat0.x = (-u_xlat0.x) * _ProjectionParams.z + u_xlat12.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD7.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgePower;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat19 = u_xlat19 + (-_AlphaFadeOffset);
    u_xlat19 = u_xlat19 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat8 = (-u_xlat19) + 1.0;
    u_xlat19 = (u_xlatb2.x) ? u_xlat19 : u_xlat8;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat12.x = u_xlat6 * _ProjectionParams.z;
    u_xlat0.x = (-u_xlat0.x) * _ProjectionParams.z + u_xlat12.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD7.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgePower;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat19 = u_xlat19 + (-_AlphaFadeOffset);
    u_xlat19 = u_xlat19 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat8.x = (-u_xlat19) + 1.0;
    u_xlat19 = (u_xlatb2.x) ? u_xlat19 : u_xlat8.x;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12.x = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat6.x = u_xlat6.x * _ProjectionParams.z;
    u_xlat6.x = u_xlat12.x * _ProjectionParams.z + (-u_xlat6.x);
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat2.w * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat3.w = u_xlat12.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat6.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12.x = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat6.x = u_xlat6.x * _ProjectionParams.z;
    u_xlat6.x = u_xlat12.x * _ProjectionParams.z + (-u_xlat6.x);
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat2.w * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat3.w = u_xlat12.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat6.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12.x = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat6.x = u_xlat6.x * _ProjectionParams.z;
    u_xlat6.x = u_xlat12.x * _ProjectionParams.z + (-u_xlat6.x);
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat4.xyz = u_xlat0.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat2.w * u_xlat18;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat3.w = u_xlat0.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat6.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12.x = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat6.x = u_xlat6.x * _ProjectionParams.z;
    u_xlat6.x = u_xlat12.x * _ProjectionParams.z + (-u_xlat6.x);
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat4.xyz = u_xlat0.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat2.w * u_xlat18;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat3.w = u_xlat0.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat6.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat18 = u_xlat12 * _ProjectionParams.z;
    u_xlat6.x = (-u_xlat6.x) * _ProjectionParams.z + u_xlat18;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat2.w * u_xlat0;
    u_xlat0 = u_xlat0 * _MainColor.w;
    u_xlat0 = u_xlat18 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat18 = u_xlat12 * _ProjectionParams.z;
    u_xlat6.x = (-u_xlat6.x) * _ProjectionParams.z + u_xlat18;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat2.w * u_xlat0;
    u_xlat0 = u_xlat0 * _MainColor.w;
    u_xlat0 = u_xlat18 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat7;
float u_xlat12;
vec2 u_xlat13;
bvec2 u_xlatb13;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat18 = u_xlat12 * _ProjectionParams.z;
    u_xlat6.x = (-u_xlat6.x) * _ProjectionParams.z + u_xlat18;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat13.x = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat13.x : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat7.x = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1.x) ? u_xlat7.x : u_xlat18;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex01_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex01_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat14.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat14.xy = (u_xlatb1.x) ? u_xlat14.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex01, u_xlat14.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb18 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat3.w : float(0.0);
    u_xlat18 = (u_xlatb1.w) ? u_xlat3.z : u_xlat18;
    u_xlat18 = (u_xlatb1.z) ? u_xlat3.y : u_xlat18;
    u_xlat18 = (u_xlatb1.y) ? u_xlat3.x : u_xlat18;
    u_xlat18 = u_xlat18 + _Noise_Offset;
    u_xlat1.x = u_xlat18 * _Noise_Brightness;
    u_xlat7.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat18) + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.x : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.w : u_xlat18;
    u_xlat7.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat13.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat13.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat13.y;
    u_xlat13.xy = u_xlat1.xx * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat13.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat13.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat13.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat13.x;
    u_xlat19 = u_xlat13.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = u_xlat1.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat1.x = u_xlat19 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat13.x = _MaskTexScaler * u_xlat13.x + u_xlat16_5.x;
    u_xlat13.x = u_xlatb3.y ? u_xlat13.x : float(0.0);
    u_xlat1.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat13.x;
    u_xlat7.x = u_xlat1.x * u_xlat7.x;
    u_xlatb13.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat1.x;
    u_xlat18 = u_xlatb13.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb13.x) ? u_xlat7.x : u_xlat18;
    u_xlatb1 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat20 = u_xlatb3.x ? u_xlat2.w : float(0.0);
    u_xlat19 = (u_xlatb1.w) ? u_xlat2.z : u_xlat20;
    u_xlat13.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat19;
    u_xlat7.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat13.x;
    u_xlat1.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat7.xxx;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat2.w * u_xlat0;
    u_xlat0 = u_xlat0 * _MainColor.w;
    u_xlat0 = u_xlat18 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat18 = u_xlat12 * _ProjectionParams.z;
    u_xlat6.x = (-u_xlat6.x) * _ProjectionParams.z + u_xlat18;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat3.xyz = vec3(u_xlat0) * vs_TEXCOORD6.xyz;
    u_xlat0 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat4.xyz = vec3(u_xlat0) * vs_TEXCOORD7.xyz;
    u_xlat0 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgePower;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat7;
float u_xlat12;
vec2 u_xlat13;
bvec2 u_xlatb13;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat18 = u_xlat12 * _ProjectionParams.z;
    u_xlat6.x = (-u_xlat6.x) * _ProjectionParams.z + u_xlat18;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat13.x = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat13.x : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat7.x = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1.x) ? u_xlat7.x : u_xlat18;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex01_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex01_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat14.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat14.xy = (u_xlatb1.x) ? u_xlat14.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex01, u_xlat14.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb18 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat3.w : float(0.0);
    u_xlat18 = (u_xlatb1.w) ? u_xlat3.z : u_xlat18;
    u_xlat18 = (u_xlatb1.z) ? u_xlat3.y : u_xlat18;
    u_xlat18 = (u_xlatb1.y) ? u_xlat3.x : u_xlat18;
    u_xlat18 = u_xlat18 + _Noise_Offset;
    u_xlat1.x = u_xlat18 * _Noise_Brightness;
    u_xlat7.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat18) + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.x : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.w : u_xlat18;
    u_xlat7.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat13.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat13.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat13.y;
    u_xlat13.xy = u_xlat1.xx * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat13.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat13.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat13.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat13.x;
    u_xlat19 = u_xlat13.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = u_xlat1.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat1.x = u_xlat19 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat13.x = _MaskTexScaler * u_xlat13.x + u_xlat16_5.x;
    u_xlat13.x = u_xlatb3.y ? u_xlat13.x : float(0.0);
    u_xlat1.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat13.x;
    u_xlat7.x = u_xlat1.x * u_xlat7.x;
    u_xlatb13.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat1.x;
    u_xlat18 = u_xlatb13.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb13.x) ? u_xlat7.x : u_xlat18;
    u_xlatb1 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat20 = u_xlatb3.x ? u_xlat2.w : float(0.0);
    u_xlat19 = (u_xlatb1.w) ? u_xlat2.z : u_xlat20;
    u_xlat13.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat19;
    u_xlat7.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat13.x;
    u_xlat1.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat7.xxx;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat3.xyz = vec3(u_xlat0) * vs_TEXCOORD6.xyz;
    u_xlat0 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat4.xyz = vec3(u_xlat0) * vs_TEXCOORD7.xyz;
    u_xlat0 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgePower;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat18 = u_xlat12 * _ProjectionParams.z;
    u_xlat6.x = (-u_xlat6.x) * _ProjectionParams.z + u_xlat18;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat0 = u_xlat0 + (-_AlphaFadeOffset);
    u_xlat0 = u_xlat0 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(_DistanceInvert==1.0);
#else
    u_xlatb19 = _DistanceInvert==1.0;
#endif
    u_xlat3.x = (-u_xlat0) + 1.0;
    u_xlat0 = (u_xlatb19) ? u_xlat0 : u_xlat3.x;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat9;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat18 = u_xlat12 * _ProjectionParams.z;
    u_xlat6.x = (-u_xlat6.x) * _ProjectionParams.z + u_xlat18;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat3.xyz = vec3(u_xlat0) * vs_TEXCOORD6.xyz;
    u_xlat0 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat4.xyz = vec3(u_xlat0) * vs_TEXCOORD7.xyz;
    u_xlat0 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgePower;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat19 = u_xlat19 + (-_AlphaFadeOffset);
    u_xlat19 = u_xlat19 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb3.x = _DistanceInvert==1.0;
#endif
    u_xlat9 = (-u_xlat19) + 1.0;
    u_xlat19 = (u_xlatb3.x) ? u_xlat19 : u_xlat9;
    u_xlat0 = u_xlat0 * u_xlat19;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat7;
float u_xlat9;
float u_xlat12;
vec2 u_xlat13;
bvec2 u_xlatb13;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat18 = u_xlat12 * _ProjectionParams.z;
    u_xlat6.x = (-u_xlat6.x) * _ProjectionParams.z + u_xlat18;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat13.x = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat13.x : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat7.x = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1.x) ? u_xlat7.x : u_xlat18;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex01_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex01_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat14.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat14.xy = (u_xlatb1.x) ? u_xlat14.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex01, u_xlat14.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb18 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat3.w : float(0.0);
    u_xlat18 = (u_xlatb1.w) ? u_xlat3.z : u_xlat18;
    u_xlat18 = (u_xlatb1.z) ? u_xlat3.y : u_xlat18;
    u_xlat18 = (u_xlatb1.y) ? u_xlat3.x : u_xlat18;
    u_xlat18 = u_xlat18 + _Noise_Offset;
    u_xlat1.x = u_xlat18 * _Noise_Brightness;
    u_xlat7.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat18) + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.x : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.w : u_xlat18;
    u_xlat7.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat13.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat13.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat13.y;
    u_xlat13.xy = u_xlat1.xx * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat13.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat13.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat13.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat13.x;
    u_xlat19 = u_xlat13.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = u_xlat1.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat1.x = u_xlat19 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat13.x = _MaskTexScaler * u_xlat13.x + u_xlat16_5.x;
    u_xlat13.x = u_xlatb3.y ? u_xlat13.x : float(0.0);
    u_xlat1.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat13.x;
    u_xlat7.x = u_xlat1.x * u_xlat7.x;
    u_xlatb13.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat1.x;
    u_xlat18 = u_xlatb13.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb13.x) ? u_xlat7.x : u_xlat18;
    u_xlatb1 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat20 = u_xlatb3.x ? u_xlat2.w : float(0.0);
    u_xlat19 = (u_xlatb1.w) ? u_xlat2.z : u_xlat20;
    u_xlat13.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat19;
    u_xlat7.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat13.x;
    u_xlat1.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat7.xxx;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat3.xyz = vec3(u_xlat0) * vs_TEXCOORD6.xyz;
    u_xlat0 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat4.xyz = vec3(u_xlat0) * vs_TEXCOORD7.xyz;
    u_xlat0 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgePower;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat19 = u_xlat19 + (-_AlphaFadeOffset);
    u_xlat19 = u_xlat19 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb3.x = _DistanceInvert==1.0;
#endif
    u_xlat9 = (-u_xlat19) + 1.0;
    u_xlat19 = (u_xlatb3.x) ? u_xlat19 : u_xlat9;
    u_xlat0 = u_xlat0 * u_xlat19;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
float u_xlat5;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat4.y;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8 = u_xlat4.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_3.x;
    u_xlat4.x = _MaskTexScaler * u_xlat4.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat4.x = u_xlatb1.y ? u_xlat4.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8 = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8 : u_xlat1.x;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb2.x) ? u_xlat1.w : u_xlat8;
    u_xlat12 = u_xlat8 * _BaseTexAlphaScaler;
    u_xlat8 = u_xlat8 * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb2.y ? u_xlat8 : float(0.0);
    u_xlat4.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8 = u_xlatb8 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.z : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat6;
vec2 u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb5 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = (u_xlatb2.x) ? u_xlat10.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat10.xy);
    u_xlat5.x = u_xlatb5 ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = u_xlat5.x + _Noise_Offset;
    u_xlat10.x = u_xlat5.x * _Noise_Brightness;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat10.xx * vec2(_NoiseIntensityOnMask) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat1.x = u_xlat15 * _MaskTexScaler;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat6.y;
    u_xlat6.xy = u_xlat10.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat2 = texture(_MaskTexture02, u_xlat6.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_4.x = (u_xlatb3.w) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _MaskTex02Scaler;
    u_xlat10.x = u_xlat1.x * u_xlat16_4.x;
    u_xlat15 = _MaskTexScaler * u_xlat15 + u_xlat16_4.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb1.y ? u_xlat15 : float(0.0);
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb15 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat11 = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb15) ? u_xlat11 : u_xlat1.x;
    u_xlat15 = u_xlat6.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb1.x) ? u_xlat15 : u_xlat6.x;
    u_xlat5.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat5.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat5.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat15 = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat10.x;
    u_xlat10.x = u_xlat10.x * u_xlat15;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat5.x = u_xlatb2.y ? u_xlat5.x : float(0.0);
    u_xlat5.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb10 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat10.x = u_xlatb10 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat10.x;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_4.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
float u_xlat5;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat4.y;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8 = u_xlat4.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_3.x;
    u_xlat4.x = _MaskTexScaler * u_xlat4.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat4.x = u_xlatb1.y ? u_xlat4.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8 = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8 : u_xlat1.x;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb2.x) ? u_xlat1.w : u_xlat8;
    u_xlat12 = u_xlat8 * _BaseTexAlphaScaler;
    u_xlat8 = u_xlat8 * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb2.y ? u_xlat8 : float(0.0);
    u_xlat4.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8 = u_xlatb8 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.z : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat2.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xzw);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat6;
vec2 u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb5 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = (u_xlatb2.x) ? u_xlat10.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat10.xy);
    u_xlat5.x = u_xlatb5 ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = u_xlat5.x + _Noise_Offset;
    u_xlat10.x = u_xlat5.x * _Noise_Brightness;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat10.xx * vec2(_NoiseIntensityOnMask) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat1.x = u_xlat15 * _MaskTexScaler;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat6.y;
    u_xlat6.xy = u_xlat10.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat2 = texture(_MaskTexture02, u_xlat6.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_4.x = (u_xlatb3.w) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _MaskTex02Scaler;
    u_xlat10.x = u_xlat1.x * u_xlat16_4.x;
    u_xlat15 = _MaskTexScaler * u_xlat15 + u_xlat16_4.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb1.y ? u_xlat15 : float(0.0);
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb15 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat11 = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb15) ? u_xlat11 : u_xlat1.x;
    u_xlat15 = u_xlat6.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb1.x) ? u_xlat15 : u_xlat6.x;
    u_xlat5.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat5.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat5.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat15 = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat10.x;
    u_xlat10.x = u_xlat10.x * u_xlat15;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat5.x = u_xlatb2.y ? u_xlat5.x : float(0.0);
    u_xlat5.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb10 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat10.x = u_xlatb10 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat10.x;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_4.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat2.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xzw);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat4.yz).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = (-u_xlat4.x) + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat8.x * vs_COLOR0.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat10;
mediump float u_xlat16_11;
vec3 u_xlat12;
float u_xlat17;
float u_xlat21;
bool u_xlatb21;
float u_xlat24;
bool u_xlatb24;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat21 * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.00999999978<abs(u_xlat21));
#else
    u_xlatb21 = 0.00999999978<abs(u_xlat21);
#endif
    u_xlat16_4.x = (u_xlatb21) ? u_xlat24 : 1.0;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat24 = u_xlat21 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5.x = u_xlat24 * -1.44269502;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat5.x / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_11 = (u_xlatb24) ? u_xlat5.x : 1.0;
    u_xlat24 = u_xlat21 * _HeigtFogParams2.y;
    u_xlat16_11 = u_xlat24 * u_xlat16_11;
    u_xlat16_11 = exp2((-u_xlat16_11));
    u_xlat16_4.y = (-u_xlat16_11) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat21 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_11 = (-u_xlat24) + 2.0;
    u_xlat16_11 = u_xlat24 * u_xlat16_11;
    u_xlat24 = u_xlat16_11 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5.x = (-u_xlat24) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
    u_xlat10 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat10);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat10;
#endif
    u_xlat10 = u_xlat21 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 + (-_HeigtFogRamp.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat17 = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat17 * u_xlat10;
    u_xlat17 = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat17 : u_xlat10;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat10) + 2.0;
    u_xlat16_4.x = u_xlat10 * u_xlat16_4.x;
    u_xlat12.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat12.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat12.xyz = vec3(u_xlat21) * u_xlat6.xyz + u_xlat12.xyz;
    u_xlat12.xyz = u_xlat3.xxx * u_xlat12.xyz;
    u_xlat21 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat5.x * u_xlat21;
    u_xlat3.xyz = u_xlat5.xxx * u_xlat12.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.xyz = vec3(u_xlat21) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat21;
    vs_TEXCOORD6.w = (-u_xlat21);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    vs_TEXCOORD6.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    vs_TEXCOORD7.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat4.yz).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = (-u_xlat4.x) + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat8.x * vs_COLOR0.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat4.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat4.x = u_xlat0.x * _Noise_Brightness;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = u_xlat4.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat8.x;
    u_xlat12 = u_xlat8.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat4.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat12 * u_xlat16_3.x;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb1.y ? u_xlat8.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8.x) ? u_xlat5 : u_xlat12;
    u_xlat8.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat8.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat4.yz).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = (-u_xlat4.x) + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat8.x * vs_COLOR0.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat10.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = u_xlat0.x * _MaskTexScaler;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat10.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat5.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb10.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb5 = _UmoveRandomToggle==1.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * _BaseTex_Uspeed + u_xlat10.x;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat10.y;
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : u_xlat10.x;
    u_xlat5.x = u_xlat15 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb10.x) ? u_xlat5.x : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat10.x = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat5.x = u_xlatb10.y ? u_xlat5.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTexture, u_xlat5.yz).x;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * vs_COLOR0.w;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3.x;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb10.x) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb15 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb15) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat10.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTexture, u_xlat5.yz).x;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * vs_COLOR0.w;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat4.yz).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = (-u_xlat4.x) + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat8.x = u_xlat8.x + (-_AlphaFadeOffset);
    u_xlat8.x = u_xlat8.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat8.x = (u_xlatb2.x) ? u_xlat8.x : u_xlat12;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat8.x * vs_COLOR0.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat10.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = u_xlat0.x * _MaskTexScaler;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat10.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat5.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb10.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb5 = _UmoveRandomToggle==1.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * _BaseTex_Uspeed + u_xlat10.x;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat10.y;
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : u_xlat10.x;
    u_xlat5.x = u_xlat15 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb10.x) ? u_xlat5.x : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat10.x = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat5.x = u_xlatb10.y ? u_xlat5.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTexture, u_xlat5.yz).x;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat10.x = u_xlat10.x + (-_AlphaFadeOffset);
    u_xlat10.x = u_xlat10.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat10.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat15;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * vs_COLOR0.w;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3.x;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb10.x) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb15 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb15) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat10.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTexture, u_xlat5.yz).x;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat10.x = u_xlat10.x + (-_AlphaFadeOffset);
    u_xlat10.x = u_xlat10.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat10.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat15;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * vs_COLOR0.w;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
float u_xlat5;
float u_xlat8;
int u_xlati8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat4.y;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8 = u_xlat4.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_3.x;
    u_xlat4.x = _MaskTexScaler * u_xlat4.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat4.x = u_xlatb1.y ? u_xlat4.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8 = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8 : u_xlat1.x;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb2.x) ? u_xlat1.w : u_xlat8;
    u_xlat12 = u_xlat8 * _BaseTexAlphaScaler;
    u_xlat8 = u_xlat8 * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb2.y ? u_xlat8 : float(0.0);
    u_xlat4.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8 = u_xlatb8 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.z : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati8 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati8]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat2.w * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat6;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb5 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = (u_xlatb2.x) ? u_xlat10.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat10.xy);
    u_xlat5.x = u_xlatb5 ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = u_xlat5.x + _Noise_Offset;
    u_xlat10.x = u_xlat5.x * _Noise_Brightness;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat10.xx * vec2(_NoiseIntensityOnMask) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat1.x = u_xlat15 * _MaskTexScaler;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat6.y;
    u_xlat6.xy = u_xlat10.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat2 = texture(_MaskTexture02, u_xlat6.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_4.x = (u_xlatb3.w) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _MaskTex02Scaler;
    u_xlat10.x = u_xlat1.x * u_xlat16_4.x;
    u_xlat15 = _MaskTexScaler * u_xlat15 + u_xlat16_4.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb1.y ? u_xlat15 : float(0.0);
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb15 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat11 = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb15) ? u_xlat11 : u_xlat1.x;
    u_xlat15 = u_xlat6.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb1.x) ? u_xlat15 : u_xlat6.x;
    u_xlat5.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat5.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat5.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat15 = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat10.x;
    u_xlat10.x = u_xlat10.x * u_xlat15;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat5.x = u_xlatb2.y ? u_xlat5.x : float(0.0);
    u_xlat5.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb10 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat10.x = u_xlatb10 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat10.x;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati10 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati10]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_4.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat2.w * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
float u_xlat5;
float u_xlat8;
int u_xlati8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat4.y;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8 = u_xlat4.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_3.x;
    u_xlat4.x = _MaskTexScaler * u_xlat4.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat4.x = u_xlatb1.y ? u_xlat4.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8 = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8 : u_xlat1.x;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb2.x) ? u_xlat1.w : u_xlat8;
    u_xlat12 = u_xlat8 * _BaseTexAlphaScaler;
    u_xlat8 = u_xlat8 * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb2.y ? u_xlat8 : float(0.0);
    u_xlat4.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8 = u_xlatb8 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.z : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati8 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati8]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat2.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xzw);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat2.w * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat6;
vec2 u_xlat10;
int u_xlati10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb5 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = (u_xlatb2.x) ? u_xlat10.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat10.xy);
    u_xlat5.x = u_xlatb5 ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = u_xlat5.x + _Noise_Offset;
    u_xlat10.x = u_xlat5.x * _Noise_Brightness;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat10.xx * vec2(_NoiseIntensityOnMask) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat1.x = u_xlat15 * _MaskTexScaler;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat6.y;
    u_xlat6.xy = u_xlat10.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat2 = texture(_MaskTexture02, u_xlat6.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_4.x = (u_xlatb3.w) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _MaskTex02Scaler;
    u_xlat10.x = u_xlat1.x * u_xlat16_4.x;
    u_xlat15 = _MaskTexScaler * u_xlat15 + u_xlat16_4.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb1.y ? u_xlat15 : float(0.0);
    u_xlat10.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb15 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat11 = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb15) ? u_xlat11 : u_xlat1.x;
    u_xlat15 = u_xlat6.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb1.x) ? u_xlat15 : u_xlat6.x;
    u_xlat5.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat5.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat5.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat15 = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat10.x;
    u_xlat10.x = u_xlat10.x * u_xlat15;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat5.x = u_xlatb2.y ? u_xlat5.x : float(0.0);
    u_xlat5.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb10 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat10.x = u_xlatb10 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat10.x;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati10 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati10]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_4.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat2.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xzw);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat2.w * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat4.yz).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = (-u_xlat4.x) + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati12 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati12]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat2.w * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
float u_xlat4;
bool u_xlatb4;
mediump vec2 u_xlat16_5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat11;
vec3 u_xlat12;
mediump float u_xlat16_13;
float u_xlat19;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat4 = u_xlat27 * -1.44269502;
    u_xlat4 = exp2(u_xlat4);
    u_xlat4 = (-u_xlat4) + 1.0;
    u_xlat4 = u_xlat4 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4 : 1.0;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4 = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat12.x = u_xlat4 * -1.44269502;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = u_xlat12.x / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_13 = (u_xlatb4) ? u_xlat12.x : 1.0;
    u_xlat4 = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_13 = u_xlat4 * u_xlat16_13;
    u_xlat16_13 = exp2((-u_xlat16_13));
    u_xlat16_5.y = (-u_xlat16_13) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4 = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat16_13 = (-u_xlat4) + 2.0;
    u_xlat16_13 = u_xlat4 * u_xlat16_13;
    u_xlat4 = u_xlat16_13 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4 = u_xlat4 + 1.0;
    u_xlat16_5.x = u_xlat4 * u_xlat16_5.x;
    u_xlat4 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat12.x = (-u_xlat4) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
    u_xlat11.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11.x;
#endif
    u_xlat11.x = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat19 = u_xlat19 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat27 = (-u_xlat11.x) + 2.0;
    u_xlat11.x = u_xlat27 * u_xlat11.x;
    u_xlat27 = u_xlat11.x * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat27 : u_xlat11.x;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11.x = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11.x) + 2.0;
    u_xlat16_5.x = u_xlat11.x * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat11.xyz = vec3(u_xlat19) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat11.xyz = u_xlat3.xxx * u_xlat11.xyz;
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat12.x * u_xlat3.x;
    u_xlat3.xyz = u_xlat12.xxx * u_xlat11.xyz;
    u_xlat27 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD3.xyz = u_xlat12.xyz * vec3(u_xlat4) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat8.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat4.yz).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = (-u_xlat4.x) + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati12 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati12]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat2.w * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat4.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat4.x = u_xlat0.x * _Noise_Brightness;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = u_xlat4.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat8.x;
    u_xlat12 = u_xlat8.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat4.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat12 * u_xlat16_3.x;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb1.y ? u_xlat8.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8.x) ? u_xlat5 : u_xlat12;
    u_xlat8.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat8.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat4.yz).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = (-u_xlat4.x) + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati12 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati12]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat2.w * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat10.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = u_xlat0.x * _MaskTexScaler;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat10.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat5.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb10.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb5 = _UmoveRandomToggle==1.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * _BaseTex_Uspeed + u_xlat10.x;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat10.y;
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : u_xlat10.x;
    u_xlat5.x = u_xlat15 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb10.x) ? u_xlat5.x : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat10.x = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat5.x = u_xlatb10.y ? u_xlat5.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTexture, u_xlat5.yz).x;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati15 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati15]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat2.w * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3.x;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb10.x) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb15 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb15) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat10.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTexture, u_xlat5.yz).x;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati15 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati15]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat2.w * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat4.yz).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = (-u_xlat4.x) + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD5.w);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati12 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati12]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat8.x = u_xlat8.x + (-_AlphaFadeOffset);
    u_xlat8.x = u_xlat8.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat8.x = (u_xlatb2.x) ? u_xlat8.x : u_xlat12;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat2.w * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat10.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = u_xlat0.x * _MaskTexScaler;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat10.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat5.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb10.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb5 = _UmoveRandomToggle==1.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * _BaseTex_Uspeed + u_xlat10.x;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat10.y;
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : u_xlat10.x;
    u_xlat5.x = u_xlat15 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb10.x) ? u_xlat5.x : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat10.x = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat5.x = u_xlatb10.y ? u_xlat5.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTexture, u_xlat5.yz).x;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati15 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati15]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat10.x = u_xlat10.x + (-_AlphaFadeOffset);
    u_xlat10.x = u_xlat10.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat10.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat15;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat2.w * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3.x;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb10.x) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb15 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb15) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat10.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTexture, u_xlat5.yz).x;
    u_xlat10.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + u_xlat10.x;
    u_xlat10.x = u_xlat10.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati15 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati15]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat10.x = u_xlat10.x + (-_AlphaFadeOffset);
    u_xlat10.x = u_xlat10.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat10.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat15;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat2.w * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
float u_xlat5;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z;
    u_xlat0.x = u_xlat4.x * _ProjectionParams.z + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat4.y;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8 = u_xlat4.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_3.x;
    u_xlat4.x = _MaskTexScaler * u_xlat4.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat4.x = u_xlatb1.y ? u_xlat4.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8 = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8 : u_xlat1.x;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb2.x) ? u_xlat1.w : u_xlat8;
    u_xlat12 = u_xlat8 * _BaseTexAlphaScaler;
    u_xlat8 = u_xlat8 * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb2.y ? u_xlat8 : float(0.0);
    u_xlat4.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8 = u_xlatb8 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.z : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat4.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat4.x = u_xlat0.x * _Noise_Brightness;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = u_xlat4.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat8.x;
    u_xlat12 = u_xlat8.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat4.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat12 * u_xlat16_3.x;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb1.y ? u_xlat8.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8.x) ? u_xlat5 : u_xlat12;
    u_xlat8.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat8.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z;
    u_xlat4.x = u_xlat8.x * _ProjectionParams.z + (-u_xlat4.x);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8.x = u_xlatb8.x ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat8.x;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : u_xlat8.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
float u_xlat5;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z;
    u_xlat0.x = u_xlat4.x * _ProjectionParams.z + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat4.y;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8 = u_xlat4.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_3.x;
    u_xlat4.x = _MaskTexScaler * u_xlat4.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat4.x = u_xlatb1.y ? u_xlat4.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8 = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8 : u_xlat1.x;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb2.x) ? u_xlat1.w : u_xlat8;
    u_xlat12 = u_xlat8 * _BaseTexAlphaScaler;
    u_xlat8 = u_xlat8 * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb2.y ? u_xlat8 : float(0.0);
    u_xlat4.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8 = u_xlatb8 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.z : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat2.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xzw);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat4.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat4.x = u_xlat0.x * _Noise_Brightness;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = u_xlat4.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat8.x;
    u_xlat12 = u_xlat8.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat4.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat12 * u_xlat16_3.x;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb1.y ? u_xlat8.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8.x) ? u_xlat5 : u_xlat12;
    u_xlat8.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat8.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z;
    u_xlat4.x = u_xlat8.x * _ProjectionParams.z + (-u_xlat4.x);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8.x = u_xlatb8.x ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat8.x;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : u_xlat8.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat4.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD6.xyz;
    u_xlat2.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD7.xyz;
    u_xlat4.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgePower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat12 = u_xlat8.x * _ProjectionParams.z;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4.x = (-u_xlat4.x) * _ProjectionParams.z + u_xlat12;
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat8.x * vs_COLOR0.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat10;
mediump float u_xlat16_11;
vec3 u_xlat12;
float u_xlat17;
float u_xlat21;
bool u_xlatb21;
float u_xlat24;
bool u_xlatb24;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat21 * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.00999999978<abs(u_xlat21));
#else
    u_xlatb21 = 0.00999999978<abs(u_xlat21);
#endif
    u_xlat16_4.x = (u_xlatb21) ? u_xlat24 : 1.0;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat24 = u_xlat21 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5.x = u_xlat24 * -1.44269502;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat5.x / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_11 = (u_xlatb24) ? u_xlat5.x : 1.0;
    u_xlat24 = u_xlat21 * _HeigtFogParams2.y;
    u_xlat16_11 = u_xlat24 * u_xlat16_11;
    u_xlat16_11 = exp2((-u_xlat16_11));
    u_xlat16_4.y = (-u_xlat16_11) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat21 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_11 = (-u_xlat24) + 2.0;
    u_xlat16_11 = u_xlat24 * u_xlat16_11;
    u_xlat24 = u_xlat16_11 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5.x = (-u_xlat24) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
    u_xlat10 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat10);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat10;
#endif
    u_xlat10 = u_xlat21 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 + (-_HeigtFogRamp.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat17 = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat17 * u_xlat10;
    u_xlat17 = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat17 : u_xlat10;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat10) + 2.0;
    u_xlat16_4.x = u_xlat10 * u_xlat16_4.x;
    u_xlat12.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat12.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat12.xyz = vec3(u_xlat21) * u_xlat6.xyz + u_xlat12.xyz;
    u_xlat12.xyz = u_xlat3.xxx * u_xlat12.xyz;
    u_xlat21 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat5.x * u_xlat21;
    u_xlat3.xyz = u_xlat5.xxx * u_xlat12.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.xyz = vec3(u_xlat21) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat21;
    vs_TEXCOORD6.w = (-u_xlat21);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    vs_TEXCOORD6.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    vs_TEXCOORD7.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat12 = u_xlat8.x * _ProjectionParams.z;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4.x = (-u_xlat4.x) * _ProjectionParams.z + u_xlat12;
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat8.x * vs_COLOR0.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat4.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat4.x = u_xlat0.x * _Noise_Brightness;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = u_xlat4.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat8.x;
    u_xlat12 = u_xlat8.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat4.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat12 * u_xlat16_3.x;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb1.y ? u_xlat8.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8.x) ? u_xlat5 : u_xlat12;
    u_xlat8.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat8.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat12 = u_xlat8.x * _ProjectionParams.z;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4.x = (-u_xlat4.x) * _ProjectionParams.z + u_xlat12;
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat8.x * vs_COLOR0.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat10.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = u_xlat0.x * _MaskTexScaler;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat10.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat5.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb10.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb5 = _UmoveRandomToggle==1.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * _BaseTex_Uspeed + u_xlat10.x;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat10.y;
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : u_xlat10.x;
    u_xlat5.x = u_xlat15 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb10.x) ? u_xlat5.x : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat10.x = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat5.x = u_xlatb10.y ? u_xlat5.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTextureScaled, u_xlat5.yz).x;
    u_xlat15 = u_xlat10.x * _ProjectionParams.z;
    u_xlat10.x = u_xlat10.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) * _ProjectionParams.z + u_xlat15;
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * vs_COLOR0.w;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3.x;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb10.x) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb15 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb15) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat10.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTextureScaled, u_xlat5.yz).x;
    u_xlat15 = u_xlat10.x * _ProjectionParams.z;
    u_xlat10.x = u_xlat10.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) * _ProjectionParams.z + u_xlat15;
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * vs_COLOR0.w;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat12 = u_xlat8.x * _ProjectionParams.z;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4.x = (-u_xlat4.x) * _ProjectionParams.z + u_xlat12;
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat8.x = u_xlat8.x + (-_AlphaFadeOffset);
    u_xlat8.x = u_xlat8.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat8.x = (u_xlatb2.x) ? u_xlat8.x : u_xlat12;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat8.x * vs_COLOR0.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat10.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = u_xlat0.x * _MaskTexScaler;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat10.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat5.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb10.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb5 = _UmoveRandomToggle==1.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * _BaseTex_Uspeed + u_xlat10.x;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat10.y;
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : u_xlat10.x;
    u_xlat5.x = u_xlat15 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb10.x) ? u_xlat5.x : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat10.x = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat5.x = u_xlatb10.y ? u_xlat5.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTextureScaled, u_xlat5.yz).x;
    u_xlat15 = u_xlat10.x * _ProjectionParams.z;
    u_xlat10.x = u_xlat10.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) * _ProjectionParams.z + u_xlat15;
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat10.x = u_xlat10.x + (-_AlphaFadeOffset);
    u_xlat10.x = u_xlat10.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat10.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat15;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * vs_COLOR0.w;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3.x;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb10.x) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb15 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb15) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat10.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTextureScaled, u_xlat5.yz).x;
    u_xlat15 = u_xlat10.x * _ProjectionParams.z;
    u_xlat10.x = u_xlat10.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) * _ProjectionParams.z + u_xlat15;
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat10.x = u_xlat10.x + (-_AlphaFadeOffset);
    u_xlat10.x = u_xlat10.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat10.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat15;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * vs_COLOR0.w;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
float u_xlat5;
float u_xlat8;
int u_xlati8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z;
    u_xlat0.x = u_xlat4.x * _ProjectionParams.z + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat4.y;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8 = u_xlat4.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_3.x;
    u_xlat4.x = _MaskTexScaler * u_xlat4.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat4.x = u_xlatb1.y ? u_xlat4.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8 = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8 : u_xlat1.x;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb2.x) ? u_xlat1.w : u_xlat8;
    u_xlat12 = u_xlat8 * _BaseTexAlphaScaler;
    u_xlat8 = u_xlat8 * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb2.y ? u_xlat8 : float(0.0);
    u_xlat4.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8 = u_xlatb8 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.z : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati8 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati8]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat2.w * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec2 u_xlat8;
int u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat4.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat4.x = u_xlat0.x * _Noise_Brightness;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = u_xlat4.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat8.x;
    u_xlat12 = u_xlat8.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat4.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat12 * u_xlat16_3.x;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb1.y ? u_xlat8.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8.x) ? u_xlat5 : u_xlat12;
    u_xlat8.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat8.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z;
    u_xlat4.x = u_xlat8.x * _ProjectionParams.z + (-u_xlat4.x);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8.x = u_xlatb8.x ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat8.x;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : u_xlat8.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati8 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati8]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat2.w * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
float u_xlat5;
float u_xlat8;
int u_xlati8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z;
    u_xlat0.x = u_xlat4.x * _ProjectionParams.z + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat4.y;
    u_xlat1 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8 = u_xlat4.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_3.x;
    u_xlat4.x = _MaskTexScaler * u_xlat4.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat4.x = u_xlatb1.y ? u_xlat4.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8 = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8 : u_xlat1.x;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb2.x) ? u_xlat1.w : u_xlat8;
    u_xlat12 = u_xlat8 * _BaseTexAlphaScaler;
    u_xlat8 = u_xlat8 * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb2.y ? u_xlat8 : float(0.0);
    u_xlat4.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8 = u_xlatb8 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.z : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.y) ? u_xlat1.x : u_xlat8;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati8 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati8]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xzw * _DayColor.xyz;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat2.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xzw);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat2.w * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec2 u_xlat8;
int u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat4.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat4.x = u_xlat0.x * _Noise_Brightness;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = u_xlat4.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat8.x;
    u_xlat12 = u_xlat8.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat4.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat12 * u_xlat16_3.x;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb1.y ? u_xlat8.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8.x) ? u_xlat5 : u_xlat12;
    u_xlat8.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat8.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z;
    u_xlat4.x = u_xlat8.x * _ProjectionParams.z + (-u_xlat4.x);
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb8.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat8.x = u_xlatb8.x ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat8.x;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : u_xlat8.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati8 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati8]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat4.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD6.xyz;
    u_xlat2.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD7.xyz;
    u_xlat4.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgePower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat2.w * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat1.w = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat12 = u_xlat8.x * _ProjectionParams.z;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4.x = (-u_xlat4.x) * _ProjectionParams.z + u_xlat12;
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati12 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati12]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat2.w * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
float u_xlat4;
bool u_xlatb4;
mediump vec2 u_xlat16_5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat11;
vec3 u_xlat12;
mediump float u_xlat16_13;
float u_xlat19;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat4 = u_xlat27 * -1.44269502;
    u_xlat4 = exp2(u_xlat4);
    u_xlat4 = (-u_xlat4) + 1.0;
    u_xlat4 = u_xlat4 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4 : 1.0;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4 = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat12.x = u_xlat4 * -1.44269502;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = u_xlat12.x / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_13 = (u_xlatb4) ? u_xlat12.x : 1.0;
    u_xlat4 = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_13 = u_xlat4 * u_xlat16_13;
    u_xlat16_13 = exp2((-u_xlat16_13));
    u_xlat16_5.y = (-u_xlat16_13) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4 = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat16_13 = (-u_xlat4) + 2.0;
    u_xlat16_13 = u_xlat4 * u_xlat16_13;
    u_xlat4 = u_xlat16_13 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4 = u_xlat4 + 1.0;
    u_xlat16_5.x = u_xlat4 * u_xlat16_5.x;
    u_xlat4 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat12.x = (-u_xlat4) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
    u_xlat11.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11.x;
#endif
    u_xlat11.x = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat19 = u_xlat19 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat27 = (-u_xlat11.x) + 2.0;
    u_xlat11.x = u_xlat27 * u_xlat11.x;
    u_xlat27 = u_xlat11.x * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat27 : u_xlat11.x;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11.x = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11.x) + 2.0;
    u_xlat16_5.x = u_xlat11.x * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat11.xyz = vec3(u_xlat19) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat11.xyz = u_xlat3.xxx * u_xlat11.xyz;
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat12.x * u_xlat3.x;
    u_xlat3.xyz = u_xlat12.xxx * u_xlat11.xyz;
    u_xlat27 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD3.xyz = u_xlat12.xyz * vec3(u_xlat4) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat8.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat12 = u_xlat8.x * _ProjectionParams.z;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4.x = (-u_xlat4.x) * _ProjectionParams.z + u_xlat12;
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati12 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati12]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat2.w * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat4.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat4.x = u_xlat0.x * _Noise_Brightness;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = u_xlat4.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat8.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat8.x;
    u_xlat12 = u_xlat8.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat4.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat12 * u_xlat16_3.x;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb1.y ? u_xlat8.x : float(0.0);
    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb8.x) ? u_xlat5 : u_xlat12;
    u_xlat8.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat8.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat12 = u_xlat8.x * _ProjectionParams.z;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4.x = (-u_xlat4.x) * _ProjectionParams.z + u_xlat12;
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati12 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati12]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat2.w * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat10.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = u_xlat0.x * _MaskTexScaler;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat10.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat5.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb10.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb5 = _UmoveRandomToggle==1.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * _BaseTex_Uspeed + u_xlat10.x;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat10.y;
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : u_xlat10.x;
    u_xlat5.x = u_xlat15 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb10.x) ? u_xlat5.x : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat10.x = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat5.x = u_xlatb10.y ? u_xlat5.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTextureScaled, u_xlat5.yz).x;
    u_xlat15 = u_xlat10.x * _ProjectionParams.z;
    u_xlat10.x = u_xlat10.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) * _ProjectionParams.z + u_xlat15;
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati15 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati15]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat2.w * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3.x;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb10.x) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb15 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb15) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat10.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTextureScaled, u_xlat5.yz).x;
    u_xlat15 = u_xlat10.x * _ProjectionParams.z;
    u_xlat10.x = u_xlat10.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) * _ProjectionParams.z + u_xlat15;
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati15 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati15]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat2.w * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb4 = _UmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb4) ? u_xlat1.x : u_xlat8.x;
    u_xlat4.x = u_xlat12 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb8.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb8.x) ? u_xlat4.x : u_xlat12;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat4.x;
    u_xlat8.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat4.x = u_xlatb8.y ? u_xlat4.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat4.yz).x;
    u_xlat12 = u_xlat8.x * _ProjectionParams.z;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4.x = (-u_xlat4.x) * _ProjectionParams.z + u_xlat12;
    u_xlat4.x = u_xlat4.x / _DepthBrightnessThrshold;
    u_xlat4.x = min(abs(u_xlat4.x), 1.0);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati12 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati12]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat4.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat12 + u_xlat8.x;
    u_xlat8.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat8.x = u_xlat8.x + (-_AlphaFadeOffset);
    u_xlat8.x = u_xlat8.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat8.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat8.x = (u_xlatb2.x) ? u_xlat8.x : u_xlat12;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat8.x = u_xlat2.w * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat4.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat10.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = u_xlat0.x * _MaskTexScaler;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat10.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat5.x * u_xlat16_3.x;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3.x;
    u_xlatb10.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb5 = _UmoveRandomToggle==1.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * _BaseTex_Uspeed + u_xlat10.x;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat10.y;
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : u_xlat10.x;
    u_xlat5.x = u_xlat15 + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.y = (u_xlatb10.x) ? u_xlat5.x : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat5.x;
    u_xlat10.x = u_xlat5.x * _BaseTexAlphaScaler;
    u_xlat5.x = u_xlat5.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat5.x = u_xlatb10.y ? u_xlat5.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTextureScaled, u_xlat5.yz).x;
    u_xlat15 = u_xlat10.x * _ProjectionParams.z;
    u_xlat10.x = u_xlat10.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) * _ProjectionParams.z + u_xlat15;
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati15 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati15]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat10.x = u_xlat10.x + (-_AlphaFadeOffset);
    u_xlat10.x = u_xlat10.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat10.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat15;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat2.w * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
int u_xlati15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3.x = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3.x;
    u_xlat16_3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3.x;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3.x;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb10.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat1.x = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb10.x) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb15 = _VmoveRandomToggle==1.0;
#endif
    u_xlat2.y = (u_xlatb15) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat0.x;
    u_xlat10.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlatb10.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb10.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb10.x) ? u_xlat5.x : u_xlat0.x;
    u_xlat5.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat5.x = u_xlat5.x * 0.5 + 0.5;
    u_xlat10.x = texture(_CameraDepthTextureScaled, u_xlat5.yz).x;
    u_xlat15 = u_xlat10.x * _ProjectionParams.z;
    u_xlat10.x = u_xlat10.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) * _ProjectionParams.z + u_xlat15;
    u_xlat5.x = u_xlat5.x / _DepthBrightnessThrshold;
    u_xlat5.x = min(abs(u_xlat5.x), 1.0);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb15 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat1.w : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.y) ? u_xlat1.x : u_xlat15;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlati15 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati15]._MeshParticleColorArray;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat16_3.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat1.xyz = u_xlat16_3.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat5.x = u_xlat10.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat10.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * vs_TEXCOORD6.xyz;
    u_xlat10.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat4.xyz = u_xlat10.xxx * vs_TEXCOORD7.xyz;
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat10.x = log2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgePower;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = u_xlat10.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat10.x = u_xlat10.x + (-_AlphaFadeOffset);
    u_xlat10.x = u_xlat10.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat10.x = (u_xlatb2.x) ? u_xlat10.x : u_xlat15;
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat2.w * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb18 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat6.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb18) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat18 = u_xlat6.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat6.x;
    u_xlat12 = u_xlat6.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat2.x = u_xlat18 * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat2.x = u_xlat2.x * u_xlat16_5.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat18 = _MaskTexScaler * u_xlat18 + u_xlat16_5.x;
    u_xlat18 = u_xlatb8.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb8.x) ? u_xlat2.x : u_xlat18;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlat6.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat6.x = u_xlatb2.y ? u_xlat6.x : float(0.0);
    u_xlat6.x = (u_xlatb2.x) ? u_xlat12 : u_xlat6.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat12 = _DayColor.w * _AlphaBrightness;
    u_xlat12 = u_xlat12 * vs_COLOR0.w;
    u_xlat12 = u_xlat12 * _MainColor.w;
    u_xlat2.w = u_xlat6.x * u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb18 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat6.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb18) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat18 = u_xlat6.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb6 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + _Noise_Offset;
    u_xlat12 = u_xlat6.x * _Noise_Brightness;
    u_xlat6.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat6.x;
    u_xlat18 = u_xlat6.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2.xy = vec2(u_xlat12) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat2 = texture(_MaskTexture, u_xlat2.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat14.xy = vec2(u_xlat12) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat14.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat12 = u_xlat8 * u_xlat16_5.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb8.y ? u_xlat2.x : float(0.0);
    u_xlat12 = (u_xlatb8.x) ? u_xlat12 : u_xlat2.x;
    u_xlat18 = u_xlat12 * u_xlat18;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlat6.x * _BaseTexAlphaScaler + u_xlat12;
    u_xlat6.x = u_xlatb2.y ? u_xlat6.x : float(0.0);
    u_xlat6.x = (u_xlatb2.x) ? u_xlat18 : u_xlat6.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat12 = _DayColor.w * _AlphaBrightness;
    u_xlat12 = u_xlat12 * vs_COLOR0.w;
    u_xlat12 = u_xlat12 * _MainColor.w;
    u_xlat2.w = u_xlat6.x * u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb18 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat6.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb18) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat18 = u_xlat6.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat6.x;
    u_xlat12 = u_xlat6.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat2.x = u_xlat18 * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat2.x = u_xlat2.x * u_xlat16_5.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat18 = _MaskTexScaler * u_xlat18 + u_xlat16_5.x;
    u_xlat18 = u_xlatb8.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb8.x) ? u_xlat2.x : u_xlat18;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlat6.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat6.x = u_xlatb2.y ? u_xlat6.x : float(0.0);
    u_xlat6.x = (u_xlatb2.x) ? u_xlat12 : u_xlat6.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD7.xyz;
    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = log2(u_xlat12);
    u_xlat12 = u_xlat12 * _AlphaSoftedgePower;
    u_xlat12 = exp2(u_xlat12);
    u_xlat12 = u_xlat12 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat6.x;
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat2.w = u_xlat12 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb18 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat6.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb18) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat18 = u_xlat6.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb6 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + _Noise_Offset;
    u_xlat12 = u_xlat6.x * _Noise_Brightness;
    u_xlat6.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat6.x;
    u_xlat18 = u_xlat6.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2.xy = vec2(u_xlat12) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat2 = texture(_MaskTexture, u_xlat2.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat14.xy = vec2(u_xlat12) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat14.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat12 = u_xlat8 * u_xlat16_5.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb8.y ? u_xlat2.x : float(0.0);
    u_xlat12 = (u_xlatb8.x) ? u_xlat12 : u_xlat2.x;
    u_xlat18 = u_xlat12 * u_xlat18;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlat6.x * _BaseTexAlphaScaler + u_xlat12;
    u_xlat6.x = u_xlatb2.y ? u_xlat6.x : float(0.0);
    u_xlat6.x = (u_xlatb2.x) ? u_xlat18 : u_xlat6.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD7.xyz;
    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = log2(u_xlat12);
    u_xlat12 = u_xlat12 * _AlphaSoftedgePower;
    u_xlat12 = exp2(u_xlat12);
    u_xlat12 = u_xlat12 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat6.x;
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat2.w = u_xlat12 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6 = _ZBufferParams.z * u_xlat6 + _ZBufferParams.w;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat18 = u_xlat12.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat10;
mediump float u_xlat16_11;
vec3 u_xlat12;
float u_xlat17;
float u_xlat21;
bool u_xlatb21;
float u_xlat24;
bool u_xlatb24;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat21 * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.00999999978<abs(u_xlat21));
#else
    u_xlatb21 = 0.00999999978<abs(u_xlat21);
#endif
    u_xlat16_4.x = (u_xlatb21) ? u_xlat24 : 1.0;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat24 = u_xlat21 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5.x = u_xlat24 * -1.44269502;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat5.x / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_11 = (u_xlatb24) ? u_xlat5.x : 1.0;
    u_xlat24 = u_xlat21 * _HeigtFogParams2.y;
    u_xlat16_11 = u_xlat24 * u_xlat16_11;
    u_xlat16_11 = exp2((-u_xlat16_11));
    u_xlat16_4.y = (-u_xlat16_11) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat21 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_11 = (-u_xlat24) + 2.0;
    u_xlat16_11 = u_xlat24 * u_xlat16_11;
    u_xlat24 = u_xlat16_11 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5.x = (-u_xlat24) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
    u_xlat10 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat10);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat10;
#endif
    u_xlat10 = u_xlat21 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 + (-_HeigtFogRamp.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat17 = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat17 * u_xlat10;
    u_xlat17 = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat17 : u_xlat10;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat10) + 2.0;
    u_xlat16_4.x = u_xlat10 * u_xlat16_4.x;
    u_xlat12.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat12.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat12.xyz = vec3(u_xlat21) * u_xlat6.xyz + u_xlat12.xyz;
    u_xlat12.xyz = u_xlat3.xxx * u_xlat12.xyz;
    u_xlat21 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat5.x * u_xlat21;
    u_xlat3.xyz = u_xlat5.xxx * u_xlat12.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.xyz = vec3(u_xlat21) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat21;
    vs_TEXCOORD6.w = (-u_xlat21);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    vs_TEXCOORD6.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    vs_TEXCOORD7.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6 = _ZBufferParams.z * u_xlat6 + _ZBufferParams.w;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat18 = u_xlat12.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.w = u_xlat6 * u_xlat18;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6 = _ZBufferParams.z * u_xlat6 + _ZBufferParams.w;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat18 = u_xlat12.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6 = _ZBufferParams.z * u_xlat6 + _ZBufferParams.w;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD7.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgePower;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6 = _ZBufferParams.z * u_xlat6 + _ZBufferParams.w;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD7.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgePower;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6 = _ZBufferParams.z * u_xlat6 + _ZBufferParams.w;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat18 = u_xlat18 + (-_AlphaFadeOffset);
    u_xlat18 = u_xlat18 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(_DistanceInvert==1.0);
#else
    u_xlatb19 = _DistanceInvert==1.0;
#endif
    u_xlat2.x = (-u_xlat18) + 1.0;
    u_xlat18 = (u_xlatb19) ? u_xlat18 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6 = _ZBufferParams.z * u_xlat6 + _ZBufferParams.w;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD7.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgePower;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat19 = u_xlat19 + (-_AlphaFadeOffset);
    u_xlat19 = u_xlat19 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat8 = (-u_xlat19) + 1.0;
    u_xlat19 = (u_xlatb2.x) ? u_xlat19 : u_xlat8;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTexture, u_xlat0.yz).x;
    u_xlat6 = _ZBufferParams.z * u_xlat6 + _ZBufferParams.w;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + u_xlat6;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD7.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgePower;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat19 = u_xlat19 + (-_AlphaFadeOffset);
    u_xlat19 = u_xlat19 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat8.x = (-u_xlat19) + 1.0;
    u_xlat19 = (u_xlatb2.x) ? u_xlat19 : u_xlat8.x;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat2.w * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat3.w = u_xlat12.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat6.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat2.w * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat3.w = u_xlat12.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat6.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat4.xyz = u_xlat0.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat2.w * u_xlat18;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat3.w = u_xlat0.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat6.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat4.xyz = u_xlat0.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat2.w * u_xlat18;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat3.w = u_xlat0.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat6.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12 = _ZBufferParams.z * u_xlat12 + _ZBufferParams.w;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat2.w * u_xlat0;
    u_xlat0 = u_xlat0 * _MainColor.w;
    u_xlat0 = u_xlat18 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
float u_xlat4;
bool u_xlatb4;
mediump vec2 u_xlat16_5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat11;
vec3 u_xlat12;
mediump float u_xlat16_13;
float u_xlat19;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat4 = u_xlat27 * -1.44269502;
    u_xlat4 = exp2(u_xlat4);
    u_xlat4 = (-u_xlat4) + 1.0;
    u_xlat4 = u_xlat4 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4 : 1.0;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4 = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat12.x = u_xlat4 * -1.44269502;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = u_xlat12.x / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_13 = (u_xlatb4) ? u_xlat12.x : 1.0;
    u_xlat4 = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_13 = u_xlat4 * u_xlat16_13;
    u_xlat16_13 = exp2((-u_xlat16_13));
    u_xlat16_5.y = (-u_xlat16_13) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4 = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat16_13 = (-u_xlat4) + 2.0;
    u_xlat16_13 = u_xlat4 * u_xlat16_13;
    u_xlat4 = u_xlat16_13 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4 = u_xlat4 + 1.0;
    u_xlat16_5.x = u_xlat4 * u_xlat16_5.x;
    u_xlat4 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat12.x = (-u_xlat4) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
    u_xlat11.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11.x;
#endif
    u_xlat11.x = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat19 = u_xlat19 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat27 = (-u_xlat11.x) + 2.0;
    u_xlat11.x = u_xlat27 * u_xlat11.x;
    u_xlat27 = u_xlat11.x * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat27 : u_xlat11.x;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11.x = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11.x) + 2.0;
    u_xlat16_5.x = u_xlat11.x * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat11.xyz = vec3(u_xlat19) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat11.xyz = u_xlat3.xxx * u_xlat11.xyz;
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat12.x * u_xlat3.x;
    u_xlat3.xyz = u_xlat12.xxx * u_xlat11.xyz;
    u_xlat27 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD3.xyz = u_xlat12.xyz * vec3(u_xlat4) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat8.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12 = _ZBufferParams.z * u_xlat12 + _ZBufferParams.w;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat2.w * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat0.x = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.w = u_xlat12 * u_xlat0.x;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat7;
float u_xlat12;
vec2 u_xlat13;
bvec2 u_xlatb13;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12 = _ZBufferParams.z * u_xlat12 + _ZBufferParams.w;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat13.x = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat13.x : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat7.x = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1.x) ? u_xlat7.x : u_xlat18;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex01_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex01_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat14.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat14.xy = (u_xlatb1.x) ? u_xlat14.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex01, u_xlat14.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb18 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat3.w : float(0.0);
    u_xlat18 = (u_xlatb1.w) ? u_xlat3.z : u_xlat18;
    u_xlat18 = (u_xlatb1.z) ? u_xlat3.y : u_xlat18;
    u_xlat18 = (u_xlatb1.y) ? u_xlat3.x : u_xlat18;
    u_xlat18 = u_xlat18 + _Noise_Offset;
    u_xlat1.x = u_xlat18 * _Noise_Brightness;
    u_xlat7.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat18) + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.x : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.w : u_xlat18;
    u_xlat7.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat13.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat13.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat13.y;
    u_xlat13.xy = u_xlat1.xx * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat13.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat13.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat13.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat13.x;
    u_xlat19 = u_xlat13.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = u_xlat1.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat1.x = u_xlat19 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat13.x = _MaskTexScaler * u_xlat13.x + u_xlat16_5.x;
    u_xlat13.x = u_xlatb3.y ? u_xlat13.x : float(0.0);
    u_xlat1.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat13.x;
    u_xlat7.x = u_xlat1.x * u_xlat7.x;
    u_xlatb13.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat1.x;
    u_xlat18 = u_xlatb13.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb13.x) ? u_xlat7.x : u_xlat18;
    u_xlatb1 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat20 = u_xlatb3.x ? u_xlat2.w : float(0.0);
    u_xlat19 = (u_xlatb1.w) ? u_xlat2.z : u_xlat20;
    u_xlat13.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat19;
    u_xlat7.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat13.x;
    u_xlat1.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat7.xxx;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat2.w * u_xlat0;
    u_xlat0 = u_xlat0 * _MainColor.w;
    u_xlat0 = u_xlat18 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12 = _ZBufferParams.z * u_xlat12 + _ZBufferParams.w;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat3.xyz = vec3(u_xlat0) * vs_TEXCOORD6.xyz;
    u_xlat0 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat4.xyz = vec3(u_xlat0) * vs_TEXCOORD7.xyz;
    u_xlat0 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgePower;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat7;
float u_xlat12;
vec2 u_xlat13;
bvec2 u_xlatb13;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12 = _ZBufferParams.z * u_xlat12 + _ZBufferParams.w;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat13.x = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat13.x : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat7.x = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1.x) ? u_xlat7.x : u_xlat18;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex01_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex01_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat14.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat14.xy = (u_xlatb1.x) ? u_xlat14.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex01, u_xlat14.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb18 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat3.w : float(0.0);
    u_xlat18 = (u_xlatb1.w) ? u_xlat3.z : u_xlat18;
    u_xlat18 = (u_xlatb1.z) ? u_xlat3.y : u_xlat18;
    u_xlat18 = (u_xlatb1.y) ? u_xlat3.x : u_xlat18;
    u_xlat18 = u_xlat18 + _Noise_Offset;
    u_xlat1.x = u_xlat18 * _Noise_Brightness;
    u_xlat7.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat18) + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.x : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.w : u_xlat18;
    u_xlat7.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat13.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat13.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat13.y;
    u_xlat13.xy = u_xlat1.xx * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat13.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat13.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat13.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat13.x;
    u_xlat19 = u_xlat13.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = u_xlat1.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat1.x = u_xlat19 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat13.x = _MaskTexScaler * u_xlat13.x + u_xlat16_5.x;
    u_xlat13.x = u_xlatb3.y ? u_xlat13.x : float(0.0);
    u_xlat1.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat13.x;
    u_xlat7.x = u_xlat1.x * u_xlat7.x;
    u_xlatb13.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat1.x;
    u_xlat18 = u_xlatb13.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb13.x) ? u_xlat7.x : u_xlat18;
    u_xlatb1 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat20 = u_xlatb3.x ? u_xlat2.w : float(0.0);
    u_xlat19 = (u_xlatb1.w) ? u_xlat2.z : u_xlat20;
    u_xlat13.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat19;
    u_xlat7.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat13.x;
    u_xlat1.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat7.xxx;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat3.xyz = vec3(u_xlat0) * vs_TEXCOORD6.xyz;
    u_xlat0 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat4.xyz = vec3(u_xlat0) * vs_TEXCOORD7.xyz;
    u_xlat0 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgePower;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12 = _ZBufferParams.z * u_xlat12 + _ZBufferParams.w;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat0 = u_xlat0 + (-_AlphaFadeOffset);
    u_xlat0 = u_xlat0 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(_DistanceInvert==1.0);
#else
    u_xlatb19 = _DistanceInvert==1.0;
#endif
    u_xlat3.x = (-u_xlat0) + 1.0;
    u_xlat0 = (u_xlatb19) ? u_xlat0 : u_xlat3.x;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat9;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12 = _ZBufferParams.z * u_xlat12 + _ZBufferParams.w;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat3.xyz = vec3(u_xlat0) * vs_TEXCOORD6.xyz;
    u_xlat0 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat4.xyz = vec3(u_xlat0) * vs_TEXCOORD7.xyz;
    u_xlat0 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgePower;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat19 = u_xlat19 + (-_AlphaFadeOffset);
    u_xlat19 = u_xlat19 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb3.x = _DistanceInvert==1.0;
#endif
    u_xlat9 = (-u_xlat19) + 1.0;
    u_xlat19 = (u_xlatb3.x) ? u_xlat19 : u_xlat9;
    u_xlat0 = u_xlat0 * u_xlat19;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat7;
float u_xlat9;
float u_xlat12;
vec2 u_xlat13;
bvec2 u_xlatb13;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTexture, u_xlat6.yz).x;
    u_xlat12 = _ZBufferParams.z * u_xlat12 + _ZBufferParams.w;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + u_xlat12;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat13.x = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat13.x : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat7.x = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1.x) ? u_xlat7.x : u_xlat18;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex01_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex01_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat14.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat14.xy = (u_xlatb1.x) ? u_xlat14.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex01, u_xlat14.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb18 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat3.w : float(0.0);
    u_xlat18 = (u_xlatb1.w) ? u_xlat3.z : u_xlat18;
    u_xlat18 = (u_xlatb1.z) ? u_xlat3.y : u_xlat18;
    u_xlat18 = (u_xlatb1.y) ? u_xlat3.x : u_xlat18;
    u_xlat18 = u_xlat18 + _Noise_Offset;
    u_xlat1.x = u_xlat18 * _Noise_Brightness;
    u_xlat7.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat18) + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.x : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.w : u_xlat18;
    u_xlat7.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat13.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat13.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat13.y;
    u_xlat13.xy = u_xlat1.xx * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat13.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat13.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat13.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat13.x;
    u_xlat19 = u_xlat13.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = u_xlat1.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat1.x = u_xlat19 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat13.x = _MaskTexScaler * u_xlat13.x + u_xlat16_5.x;
    u_xlat13.x = u_xlatb3.y ? u_xlat13.x : float(0.0);
    u_xlat1.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat13.x;
    u_xlat7.x = u_xlat1.x * u_xlat7.x;
    u_xlatb13.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat1.x;
    u_xlat18 = u_xlatb13.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb13.x) ? u_xlat7.x : u_xlat18;
    u_xlatb1 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat20 = u_xlatb3.x ? u_xlat2.w : float(0.0);
    u_xlat19 = (u_xlatb1.w) ? u_xlat2.z : u_xlat20;
    u_xlat13.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat19;
    u_xlat7.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat13.x;
    u_xlat1.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat7.xxx;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat3.xyz = vec3(u_xlat0) * vs_TEXCOORD6.xyz;
    u_xlat0 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat4.xyz = vec3(u_xlat0) * vs_TEXCOORD7.xyz;
    u_xlat0 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgePower;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat19 = u_xlat19 + (-_AlphaFadeOffset);
    u_xlat19 = u_xlat19 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb3.x = _DistanceInvert==1.0;
#endif
    u_xlat9 = (-u_xlat19) + 1.0;
    u_xlat19 = (u_xlatb3.x) ? u_xlat19 : u_xlat9;
    u_xlat0 = u_xlat0 * u_xlat19;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6.x = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z;
    u_xlat0.x = u_xlat6.x * _ProjectionParams.z + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb18 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat6.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb18) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat18 = u_xlat6.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat6.x;
    u_xlat12 = u_xlat6.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat2.x = u_xlat18 * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat2.x = u_xlat2.x * u_xlat16_5.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat18 = _MaskTexScaler * u_xlat18 + u_xlat16_5.x;
    u_xlat18 = u_xlatb8.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb8.x) ? u_xlat2.x : u_xlat18;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlat6.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat6.x = u_xlatb2.y ? u_xlat6.x : float(0.0);
    u_xlat6.x = (u_xlatb2.x) ? u_xlat12 : u_xlat6.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat12 = _DayColor.w * _AlphaBrightness;
    u_xlat12 = u_xlat12 * vs_COLOR0.w;
    u_xlat12 = u_xlat12 * _MainColor.w;
    u_xlat2.w = u_xlat6.x * u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6.x = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z;
    u_xlat0.x = u_xlat6.x * _ProjectionParams.z + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb18 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat6.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb18) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat18 = u_xlat6.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb6 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + _Noise_Offset;
    u_xlat12 = u_xlat6.x * _Noise_Brightness;
    u_xlat6.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat6.x;
    u_xlat18 = u_xlat6.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2.xy = vec2(u_xlat12) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat2 = texture(_MaskTexture, u_xlat2.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat14.xy = vec2(u_xlat12) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat14.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat12 = u_xlat8 * u_xlat16_5.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb8.y ? u_xlat2.x : float(0.0);
    u_xlat12 = (u_xlatb8.x) ? u_xlat12 : u_xlat2.x;
    u_xlat18 = u_xlat12 * u_xlat18;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlat6.x * _BaseTexAlphaScaler + u_xlat12;
    u_xlat6.x = u_xlatb2.y ? u_xlat6.x : float(0.0);
    u_xlat6.x = (u_xlatb2.x) ? u_xlat18 : u_xlat6.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat12 = _DayColor.w * _AlphaBrightness;
    u_xlat12 = u_xlat12 * vs_COLOR0.w;
    u_xlat12 = u_xlat12 * _MainColor.w;
    u_xlat2.w = u_xlat6.x * u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6.x = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z;
    u_xlat0.x = u_xlat6.x * _ProjectionParams.z + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb18 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat6.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb18) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat18 = u_xlat6.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat6.x;
    u_xlat12 = u_xlat6.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat2.x = u_xlat18 * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat2.x = u_xlat2.x * u_xlat16_5.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat18 = _MaskTexScaler * u_xlat18 + u_xlat16_5.x;
    u_xlat18 = u_xlatb8.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb8.x) ? u_xlat2.x : u_xlat18;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlat6.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat6.x = u_xlatb2.y ? u_xlat6.x : float(0.0);
    u_xlat6.x = (u_xlatb2.x) ? u_xlat12 : u_xlat6.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD7.xyz;
    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = log2(u_xlat12);
    u_xlat12 = u_xlat12 * _AlphaSoftedgePower;
    u_xlat12 = exp2(u_xlat12);
    u_xlat12 = u_xlat12 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat6.x;
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat2.w = u_xlat12 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6.x = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z;
    u_xlat0.x = u_xlat6.x * _ProjectionParams.z + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb18 = _UmoveRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat6.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb18) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb12 = _VmoveRandomToggle==1.0;
#endif
    u_xlat18 = u_xlat6.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb6 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + _Noise_Offset;
    u_xlat12 = u_xlat6.x * _Noise_Brightness;
    u_xlat6.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xz);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat6.x;
    u_xlat18 = u_xlat6.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2.xy = vec2(u_xlat12) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat2 = texture(_MaskTexture, u_xlat2.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat14.xy = vec2(u_xlat12) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat14.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat12 = u_xlat8 * u_xlat16_5.x;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb8.y ? u_xlat2.x : float(0.0);
    u_xlat12 = (u_xlatb8.x) ? u_xlat12 : u_xlat2.x;
    u_xlat18 = u_xlat12 * u_xlat18;
    u_xlatb2.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlat6.x * _BaseTexAlphaScaler + u_xlat12;
    u_xlat6.x = u_xlatb2.y ? u_xlat6.x : float(0.0);
    u_xlat6.x = (u_xlatb2.x) ? u_xlat18 : u_xlat6.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb12 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat12 = u_xlatb12 ? u_xlat1.w : float(0.0);
    u_xlat12 = (u_xlatb2.w) ? u_xlat1.z : u_xlat12;
    u_xlat12 = (u_xlatb2.z) ? u_xlat1.y : u_xlat12;
    u_xlat12 = (u_xlatb2.y) ? u_xlat1.x : u_xlat12;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat12);
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD7.xyz;
    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = log2(u_xlat12);
    u_xlat12 = u_xlat12 * _AlphaSoftedgePower;
    u_xlat12 = exp2(u_xlat12);
    u_xlat12 = u_xlat12 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat6.x;
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat2.w = u_xlat12 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat12.x = u_xlat6 * _ProjectionParams.z;
    u_xlat0.x = (-u_xlat0.x) * _ProjectionParams.z + u_xlat12.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat18 = u_xlat12.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat10;
mediump float u_xlat16_11;
vec3 u_xlat12;
float u_xlat17;
float u_xlat21;
bool u_xlatb21;
float u_xlat24;
bool u_xlatb24;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat21 * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.00999999978<abs(u_xlat21));
#else
    u_xlatb21 = 0.00999999978<abs(u_xlat21);
#endif
    u_xlat16_4.x = (u_xlatb21) ? u_xlat24 : 1.0;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat24 = u_xlat21 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5.x = u_xlat24 * -1.44269502;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat5.x / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_11 = (u_xlatb24) ? u_xlat5.x : 1.0;
    u_xlat24 = u_xlat21 * _HeigtFogParams2.y;
    u_xlat16_11 = u_xlat24 * u_xlat16_11;
    u_xlat16_11 = exp2((-u_xlat16_11));
    u_xlat16_4.y = (-u_xlat16_11) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat21 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_11 = (-u_xlat24) + 2.0;
    u_xlat16_11 = u_xlat24 * u_xlat16_11;
    u_xlat24 = u_xlat16_11 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5.x = (-u_xlat24) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
    u_xlat10 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat10);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat10;
#endif
    u_xlat10 = u_xlat21 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 + (-_HeigtFogRamp.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat17 = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat17 * u_xlat10;
    u_xlat17 = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat17 : u_xlat10;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat10) + 2.0;
    u_xlat16_4.x = u_xlat10 * u_xlat16_4.x;
    u_xlat12.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat12.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat12.xyz = vec3(u_xlat21) * u_xlat6.xyz + u_xlat12.xyz;
    u_xlat12.xyz = u_xlat3.xxx * u_xlat12.xyz;
    u_xlat21 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat5.x * u_xlat21;
    u_xlat3.xyz = u_xlat5.xxx * u_xlat12.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5.xyz = vec3(u_xlat21) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat21;
    u_xlat21 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat21;
    vs_TEXCOORD6.w = (-u_xlat21);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    vs_TEXCOORD6.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    vs_TEXCOORD7.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat12.x = u_xlat6 * _ProjectionParams.z;
    u_xlat0.x = (-u_xlat0.x) * _ProjectionParams.z + u_xlat12.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat18 = u_xlat12.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.w = u_xlat6 * u_xlat18;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat12.x = u_xlat6 * _ProjectionParams.z;
    u_xlat0.x = (-u_xlat0.x) * _ProjectionParams.z + u_xlat12.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat18 * vs_COLOR0.w;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat18 = u_xlat12.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat12.x = u_xlat6 * _ProjectionParams.z;
    u_xlat0.x = (-u_xlat0.x) * _ProjectionParams.z + u_xlat12.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD7.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgePower;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat12.x = u_xlat6 * _ProjectionParams.z;
    u_xlat0.x = (-u_xlat0.x) * _ProjectionParams.z + u_xlat12.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD7.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgePower;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat12.x = u_xlat6 * _ProjectionParams.z;
    u_xlat0.x = (-u_xlat0.x) * _ProjectionParams.z + u_xlat12.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat18 = u_xlat18 + (-_AlphaFadeOffset);
    u_xlat18 = u_xlat18 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(_DistanceInvert==1.0);
#else
    u_xlatb19 = _DistanceInvert==1.0;
#endif
    u_xlat2.x = (-u_xlat18) + 1.0;
    u_xlat18 = (u_xlatb19) ? u_xlat18 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat12.x = u_xlat6 * _ProjectionParams.z;
    u_xlat0.x = (-u_xlat0.x) * _ProjectionParams.z + u_xlat12.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD7.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgePower;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat19 = u_xlat19 + (-_AlphaFadeOffset);
    u_xlat19 = u_xlat19 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat8 = (-u_xlat19) + 1.0;
    u_xlat19 = (u_xlatb2.x) ? u_xlat19 : u_xlat8;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat12 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat12 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat12 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat12;
    u_xlat12 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat12;
    vs_TEXCOORD6.w = (-u_xlat12);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD7.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
float u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat6 = texture(_CameraDepthTextureScaled, u_xlat0.yz).x;
    u_xlat12.x = u_xlat6 * _ProjectionParams.z;
    u_xlat0.x = (-u_xlat0.x) * _ProjectionParams.z + u_xlat12.x;
    u_xlat0.x = u_xlat0.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD7.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgePower;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = u_xlat18 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat12.x;
    u_xlat19 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat19 = u_xlat19 + (-_AlphaFadeOffset);
    u_xlat19 = u_xlat19 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb2.x = _DistanceInvert==1.0;
#endif
    u_xlat8.x = (-u_xlat19) + 1.0;
    u_xlat19 = (u_xlatb2.x) ? u_xlat19 : u_xlat8.x;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat19 * vs_COLOR0.w;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat18 = u_xlat18 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat6 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat6 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat19) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat2.x + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat6 * u_xlat18;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12.x = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat6.x = u_xlat6.x * _ProjectionParams.z;
    u_xlat6.x = u_xlat12.x * _ProjectionParams.z + (-u_xlat6.x);
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat2.w * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat3.w = u_xlat12.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat6.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12.x = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat6.x = u_xlat6.x * _ProjectionParams.z;
    u_xlat6.x = u_xlat12.x * _ProjectionParams.z + (-u_xlat6.x);
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat2.w * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat3.w = u_xlat12.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat6.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12.x = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat6.x = u_xlat6.x * _ProjectionParams.z;
    u_xlat6.x = u_xlat12.x * _ProjectionParams.z + (-u_xlat6.x);
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat18 = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat2.y;
    u_xlat2 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat20 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat14.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat20;
    u_xlat8 = (u_xlatb3.y) ? u_xlat2.y : u_xlat14.x;
    u_xlat2.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8;
    u_xlat8 = u_xlat2.x * _MaskTexScaler;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex02_Uspeed + u_xlat14.x;
    u_xlat3.y = _Time.y * _MaskTex02_Vspeed + u_xlat14.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat8 = u_xlat8 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat2.x = _MaskTexScaler * u_xlat2.x + u_xlat16_5.x;
    u_xlat2.x = u_xlatb14.y ? u_xlat2.x : float(0.0);
    u_xlat2.x = (u_xlatb14.x) ? u_xlat8 : u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat2.x;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat18 : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat4.xyz = u_xlat0.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat2.w * u_xlat18;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat3.w = u_xlat0.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat6.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
bvec2 u_xlatb8;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12.x = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat6.x = u_xlat6.x * _ProjectionParams.z;
    u_xlat6.x = u_xlat12.x * _ProjectionParams.z + (-u_xlat6.x);
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat12.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12.x = _Time.y * _BaseTex_Uspeed + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat12.x + vs_TEXCOORD1.x;
    u_xlat1.x = (u_xlatb1) ? u_xlat7 : u_xlat12.x;
    u_xlat12.x = _Time.y * _BaseTex_Vspeed + u_xlat12.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb18 = _VmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat12.x + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb18) ? u_xlat13 : u_xlat12.x;
    u_xlat12.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex01_Uspeed + u_xlat12.x;
    u_xlat2.y = _Time.y * _NoiseTex01_Vspeed + u_xlat12.y;
    u_xlatb3 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlat12.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex01, u_xlat12.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb12 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat12.x = u_xlatb12 ? u_xlat2.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x + _Noise_Offset;
    u_xlat18 = u_xlat12.x * _Noise_Brightness;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat12.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.w : u_xlat12.x;
    u_xlat2.x = u_xlat12.x * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat18) * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat8.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(u_xlat18) * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat18 = u_xlat14 * u_xlat16_5.x;
    u_xlatb14.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb14.y ? u_xlat8.x : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat18 : u_xlat8.x;
    u_xlat2.x = u_xlat18 * u_xlat2.x;
    u_xlatb8.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat12.x = u_xlat12.x * _BaseTexAlphaScaler + u_xlat18;
    u_xlat12.x = u_xlatb8.y ? u_xlat12.x : float(0.0);
    u_xlat12.x = (u_xlatb8.x) ? u_xlat2.x : u_xlat12.x;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb18 = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat1.w : float(0.0);
    u_xlat18 = (u_xlatb2.w) ? u_xlat1.z : u_xlat18;
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat18);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat4.xyz = u_xlat0.xxx * vs_TEXCOORD7.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgePower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat18 = _DayColor.w * _AlphaBrightness;
    u_xlat18 = u_xlat2.w * u_xlat18;
    u_xlat18 = u_xlat18 * _MainColor.w;
    u_xlat3.w = u_xlat0.x * u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat0.x = min(abs(u_xlat6.x), 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * _MainColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat18 = u_xlat12 * _ProjectionParams.z;
    u_xlat6.x = (-u_xlat6.x) * _ProjectionParams.z + u_xlat18;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat2.w * u_xlat0;
    u_xlat0 = u_xlat0 * _MainColor.w;
    u_xlat0 = u_xlat18 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
float u_xlat4;
bool u_xlatb4;
mediump vec2 u_xlat16_5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat11;
vec3 u_xlat12;
mediump float u_xlat16_13;
float u_xlat19;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat4 = u_xlat27 * -1.44269502;
    u_xlat4 = exp2(u_xlat4);
    u_xlat4 = (-u_xlat4) + 1.0;
    u_xlat4 = u_xlat4 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4 : 1.0;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4 = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat12.x = u_xlat4 * -1.44269502;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = u_xlat12.x / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_13 = (u_xlatb4) ? u_xlat12.x : 1.0;
    u_xlat4 = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_13 = u_xlat4 * u_xlat16_13;
    u_xlat16_13 = exp2((-u_xlat16_13));
    u_xlat16_5.y = (-u_xlat16_13) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4 = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat16_13 = (-u_xlat4) + 2.0;
    u_xlat16_13 = u_xlat4 * u_xlat16_13;
    u_xlat4 = u_xlat16_13 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4 = u_xlat4 + 1.0;
    u_xlat16_5.x = u_xlat4 * u_xlat16_5.x;
    u_xlat4 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat12.x = (-u_xlat4) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
    u_xlat11.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11.x;
#endif
    u_xlat11.x = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat19 = u_xlat19 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat27 = (-u_xlat11.x) + 2.0;
    u_xlat11.x = u_xlat27 * u_xlat11.x;
    u_xlat27 = u_xlat11.x * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat27 : u_xlat11.x;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11.x = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11.x) + 2.0;
    u_xlat16_5.x = u_xlat11.x * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat11.xyz = vec3(u_xlat19) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat11.xyz = u_xlat3.xxx * u_xlat11.xyz;
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat12.x * u_xlat3.x;
    u_xlat3.xyz = u_xlat12.xxx * u_xlat11.xyz;
    u_xlat27 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD3.xyz = u_xlat12.xyz * vec3(u_xlat4) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat8.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat18 = u_xlat12 * _ProjectionParams.z;
    u_xlat6.x = (-u_xlat6.x) * _ProjectionParams.z + u_xlat18;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat2.w * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _MainColor.w;
    u_xlat0.x = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.w = u_xlat12 * u_xlat0.x;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat7;
float u_xlat12;
vec2 u_xlat13;
bvec2 u_xlatb13;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat18 = u_xlat12 * _ProjectionParams.z;
    u_xlat6.x = (-u_xlat6.x) * _ProjectionParams.z + u_xlat18;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat13.x = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat13.x : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat7.x = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1.x) ? u_xlat7.x : u_xlat18;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex01_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex01_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat14.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat14.xy = (u_xlatb1.x) ? u_xlat14.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex01, u_xlat14.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb18 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat3.w : float(0.0);
    u_xlat18 = (u_xlatb1.w) ? u_xlat3.z : u_xlat18;
    u_xlat18 = (u_xlatb1.z) ? u_xlat3.y : u_xlat18;
    u_xlat18 = (u_xlatb1.y) ? u_xlat3.x : u_xlat18;
    u_xlat18 = u_xlat18 + _Noise_Offset;
    u_xlat1.x = u_xlat18 * _Noise_Brightness;
    u_xlat7.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat18) + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.x : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.w : u_xlat18;
    u_xlat7.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat13.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat13.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat13.y;
    u_xlat13.xy = u_xlat1.xx * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat13.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat13.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat13.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat13.x;
    u_xlat19 = u_xlat13.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = u_xlat1.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat1.x = u_xlat19 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat13.x = _MaskTexScaler * u_xlat13.x + u_xlat16_5.x;
    u_xlat13.x = u_xlatb3.y ? u_xlat13.x : float(0.0);
    u_xlat1.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat13.x;
    u_xlat7.x = u_xlat1.x * u_xlat7.x;
    u_xlatb13.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat1.x;
    u_xlat18 = u_xlatb13.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb13.x) ? u_xlat7.x : u_xlat18;
    u_xlatb1 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat20 = u_xlatb3.x ? u_xlat2.w : float(0.0);
    u_xlat19 = (u_xlatb1.w) ? u_xlat2.z : u_xlat20;
    u_xlat13.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat19;
    u_xlat7.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat13.x;
    u_xlat1.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat7.xxx;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat2.w * u_xlat0;
    u_xlat0 = u_xlat0 * _MainColor.w;
    u_xlat0 = u_xlat18 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat18 = u_xlat12 * _ProjectionParams.z;
    u_xlat6.x = (-u_xlat6.x) * _ProjectionParams.z + u_xlat18;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat3.xyz = vec3(u_xlat0) * vs_TEXCOORD6.xyz;
    u_xlat0 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat4.xyz = vec3(u_xlat0) * vs_TEXCOORD7.xyz;
    u_xlat0 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgePower;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat7;
float u_xlat12;
vec2 u_xlat13;
bvec2 u_xlatb13;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat18 = u_xlat12 * _ProjectionParams.z;
    u_xlat6.x = (-u_xlat6.x) * _ProjectionParams.z + u_xlat18;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat13.x = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat13.x : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat7.x = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1.x) ? u_xlat7.x : u_xlat18;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex01_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex01_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat14.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat14.xy = (u_xlatb1.x) ? u_xlat14.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex01, u_xlat14.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb18 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat3.w : float(0.0);
    u_xlat18 = (u_xlatb1.w) ? u_xlat3.z : u_xlat18;
    u_xlat18 = (u_xlatb1.z) ? u_xlat3.y : u_xlat18;
    u_xlat18 = (u_xlatb1.y) ? u_xlat3.x : u_xlat18;
    u_xlat18 = u_xlat18 + _Noise_Offset;
    u_xlat1.x = u_xlat18 * _Noise_Brightness;
    u_xlat7.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat18) + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.x : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.w : u_xlat18;
    u_xlat7.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat13.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat13.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat13.y;
    u_xlat13.xy = u_xlat1.xx * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat13.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat13.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat13.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat13.x;
    u_xlat19 = u_xlat13.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = u_xlat1.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat1.x = u_xlat19 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat13.x = _MaskTexScaler * u_xlat13.x + u_xlat16_5.x;
    u_xlat13.x = u_xlatb3.y ? u_xlat13.x : float(0.0);
    u_xlat1.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat13.x;
    u_xlat7.x = u_xlat1.x * u_xlat7.x;
    u_xlatb13.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat1.x;
    u_xlat18 = u_xlatb13.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb13.x) ? u_xlat7.x : u_xlat18;
    u_xlatb1 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat20 = u_xlatb3.x ? u_xlat2.w : float(0.0);
    u_xlat19 = (u_xlatb1.w) ? u_xlat2.z : u_xlat20;
    u_xlat13.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat19;
    u_xlat7.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat13.x;
    u_xlat1.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat7.xxx;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat3.xyz = vec3(u_xlat0) * vs_TEXCOORD6.xyz;
    u_xlat0 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat4.xyz = vec3(u_xlat0) * vs_TEXCOORD7.xyz;
    u_xlat0 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgePower;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat18 = u_xlat12 * _ProjectionParams.z;
    u_xlat6.x = (-u_xlat6.x) * _ProjectionParams.z + u_xlat18;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat0 = u_xlat0 + (-_AlphaFadeOffset);
    u_xlat0 = u_xlat0 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(_DistanceInvert==1.0);
#else
    u_xlatb19 = _DistanceInvert==1.0;
#endif
    u_xlat3.x = (-u_xlat0) + 1.0;
    u_xlat0 = (u_xlatb19) ? u_xlat0 : u_xlat3.x;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat7;
vec2 u_xlat8;
float u_xlat9;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bvec2 u_xlatb14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat18 = u_xlat12 * _ProjectionParams.z;
    u_xlat6.x = (-u_xlat6.x) * _ProjectionParams.z + u_xlat18;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1 = _UmoveRandomToggle==1.0;
#endif
    u_xlat13 = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1) ? u_xlat13 : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1 = _VmoveRandomToggle==1.0;
#endif
    u_xlat7 = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1) ? u_xlat7 : u_xlat18;
    u_xlat1 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb2 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb2.w ? u_xlat1.z : float(0.0);
    u_xlat18 = (u_xlatb2.z) ? u_xlat1.y : u_xlat18;
    u_xlat18 = (u_xlatb2.y) ? u_xlat1.x : u_xlat18;
    u_xlat18 = (u_xlatb2.x) ? u_xlat1.w : u_xlat18;
    u_xlat2.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat8.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat8.y;
    u_xlat3 = texture(_MaskTexture, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat8.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat8.x;
    u_xlat14 = u_xlat8.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3 = texture(_MaskTexture02, u_xlat4.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat14 = u_xlat14 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat8.x = _MaskTexScaler * u_xlat8.x + u_xlat16_5.x;
    u_xlat8.x = u_xlatb3.y ? u_xlat8.x : float(0.0);
    u_xlat8.x = (u_xlatb3.x) ? u_xlat14 : u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat2.x;
    u_xlatb14.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat8.x;
    u_xlat18 = u_xlatb14.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb14.x) ? u_xlat2.x : u_xlat18;
    u_xlatb2 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat19 = u_xlatb3.x ? u_xlat1.w : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.z : u_xlat19;
    u_xlat19 = (u_xlatb2.z) ? u_xlat1.y : u_xlat19;
    u_xlat19 = (u_xlatb2.y) ? u_xlat1.x : u_xlat19;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat19);
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat3.xyz = vec3(u_xlat0) * vs_TEXCOORD6.xyz;
    u_xlat0 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat4.xyz = vec3(u_xlat0) * vs_TEXCOORD7.xyz;
    u_xlat0 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgePower;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat19 = u_xlat19 + (-_AlphaFadeOffset);
    u_xlat19 = u_xlat19 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb3.x = _DistanceInvert==1.0;
#endif
    u_xlat9 = (-u_xlat19) + 1.0;
    u_xlat19 = (u_xlatb3.x) ? u_xlat19 : u_xlat9;
    u_xlat0 = u_xlat0 * u_xlat19;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD6.w = (-u_xlat1.x);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    vs_TEXCOORD6.xyz = u_xlat4.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD7.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD7.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DepthBrightnessColor;
uniform 	mediump float _DepthBrightnessColorScale;
uniform 	mediump float _DepthBrightnessThrshold;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DepthBrightnessScale;
uniform 	float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelToggle;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_2MaskArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_2Mask {
	miHoYoParticlesUVmove_2MaskArray_Type miHoYoParticlesUVmove_2MaskArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
vec2 u_xlat7;
float u_xlat9;
float u_xlat12;
vec2 u_xlat13;
bvec2 u_xlatb13;
vec2 u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xyz = vs_TEXCOORD5.zxy / vs_TEXCOORD5.www;
    u_xlat6.x = u_xlat6.x * 0.5 + 0.5;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat6.yz).x;
    u_xlat18 = u_xlat12 * _ProjectionParams.z;
    u_xlat6.x = (-u_xlat6.x) * _ProjectionParams.z + u_xlat18;
    u_xlat6.x = u_xlat6.x / _DepthBrightnessThrshold;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18 = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_UmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _UmoveRandomToggle==1.0;
#endif
    u_xlat13.x = u_xlat18 + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat13.x : u_xlat18;
    u_xlat18 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb1.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat7.x = u_xlat18 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb1.x) ? u_xlat7.x : u_xlat18;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex01_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex01_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat14.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat14.xy = (u_xlatb1.x) ? u_xlat14.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex01, u_xlat14.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb18 = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat18 = u_xlatb18 ? u_xlat3.w : float(0.0);
    u_xlat18 = (u_xlatb1.w) ? u_xlat3.z : u_xlat18;
    u_xlat18 = (u_xlatb1.z) ? u_xlat3.y : u_xlat18;
    u_xlat18 = (u_xlatb1.y) ? u_xlat3.x : u_xlat18;
    u_xlat18 = u_xlat18 + _Noise_Offset;
    u_xlat1.x = u_xlat18 * _Noise_Brightness;
    u_xlat7.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat18) + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.x : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.w : u_xlat18;
    u_xlat7.x = u_xlat18 * _BaseTexAlphaScaler;
    u_xlat13.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat13.x;
    u_xlat3.y = _Time.y * _MaskTex_Vspeed + u_xlat13.y;
    u_xlat13.xy = u_xlat1.xx * vec2(_NoiseIntensityOnMask) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTexture, u_xlat13.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat13.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat13.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat13.x;
    u_xlat13.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat13.x;
    u_xlat19 = u_xlat13.x * _MaskTexScaler;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat4.x = _Time.y * _MaskTex02_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _MaskTex02_Vspeed + u_xlat3.y;
    u_xlat3.xy = u_xlat1.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat4.xy;
    u_xlat3 = texture(_MaskTexture02, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat3.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * _MaskTex02Scaler;
    u_xlat1.x = u_xlat19 * u_xlat16_5.x;
    u_xlatb3.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat13.x = _MaskTexScaler * u_xlat13.x + u_xlat16_5.x;
    u_xlat13.x = u_xlatb3.y ? u_xlat13.x : float(0.0);
    u_xlat1.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat13.x;
    u_xlat7.x = u_xlat1.x * u_xlat7.x;
    u_xlatb13.xy = equal(vec4(vec4(_MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat18 = u_xlat18 * _BaseTexAlphaScaler + u_xlat1.x;
    u_xlat18 = u_xlatb13.y ? u_xlat18 : float(0.0);
    u_xlat18 = (u_xlatb13.x) ? u_xlat7.x : u_xlat18;
    u_xlatb1 = equal(vec4(_BaseTexColorChannelToggle), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexColorChannelToggle==4.0);
#else
    u_xlatb3.x = _BaseTexColorChannelToggle==4.0;
#endif
    u_xlat20 = u_xlatb3.x ? u_xlat2.w : float(0.0);
    u_xlat19 = (u_xlatb1.w) ? u_xlat2.z : u_xlat20;
    u_xlat13.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat19;
    u_xlat7.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat13.x;
    u_xlat1.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat7.xxx;
    u_xlat2 = vs_COLOR0 * miHoYoParticlesUVmove_2MaskArray[u_xlati0]._MeshParticleColorArray;
    u_xlat0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat3.xyz = vec3(u_xlat0) * vs_TEXCOORD6.xyz;
    u_xlat0 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat4.xyz = vec3(u_xlat0) * vs_TEXCOORD7.xyz;
    u_xlat0 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgePower;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat0 * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat19 = vs_TEXCOORD6.w + (-_ProjectionParams.y);
    u_xlat19 = u_xlat19 + (-_AlphaFadeOffset);
    u_xlat19 = u_xlat19 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DistanceInvert==1.0);
#else
    u_xlatb3.x = _DistanceInvert==1.0;
#endif
    u_xlat9 = (-u_xlat19) + 1.0;
    u_xlat19 = (u_xlatb3.x) ? u_xlat19 : u_xlat9;
    u_xlat0 = u_xlat0 * u_xlat19;
    u_xlat19 = _DayColor.w * _AlphaBrightness;
    u_xlat19 = u_xlat2.w * u_xlat19;
    u_xlat19 = u_xlat19 * _MainColor.w;
    u_xlat0 = u_xlat0 * u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat19 = u_xlat12 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat20 = (-u_xlat19) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat20 + u_xlat19;
    u_xlat16_5.xyz = _DepthBrightnessColor.xyz * vec3(_DepthBrightnessColorScale);
    u_xlat6.x = min(abs(u_xlat6.x), 1.0);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _DepthBrightnessScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _MainColor.xyz;
    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat6.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.w = u_xlat12 * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
}
}
 Pass {
  Name "DISTORTIONVECTORS"
  Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "DISTORTIONVECTORS" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  Cull Off
  GpuProgramID 111177
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.497999996, 0.497999996, 0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.497999996, 0.497999996, 0.0, 1.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
}
}
 Pass {
  Name "MOTIONVECTORS"
  Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "MOTIONVECTORS" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  Cull Off
  GpuProgramID 166181
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
float u_xlat4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4 = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4;
    u_xlat4 = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4 = u_xlat4 * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4 : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4 : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4 = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4 = (u_xlatb2.w) ? u_xlat1.y : u_xlat4;
    u_xlat4 = (u_xlatb2.z) ? u_xlat1.x : u_xlat4;
    u_xlat4 = (u_xlatb2.y) ? u_xlat1.w : u_xlat4;
    u_xlat1.x = u_xlat4 * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4 = u_xlat4 * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4;
    u_xlat4 = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4;
    u_xlat4 = _DayColor.w * _AlphaBrightness;
    u_xlat4 = u_xlat4 * vs_COLOR0.w;
    u_xlat4 = u_xlat4 * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec2 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgePower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgePower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec2 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD7.w);
    u_xlat10.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10.x * u_xlat15 + u_xlat5.x;
    u_xlat16_4 = u_xlat0.x * u_xlat5.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgePower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgePower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD7.w);
    u_xlat10.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10.x * u_xlat15 + u_xlat5.x;
    u_xlat16_4 = u_xlat0.x * u_xlat5.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_DistanceInvert==1.0);
#else
    u_xlatb12 = _DistanceInvert==1.0;
#endif
    u_xlat4.x = (u_xlatb12) ? u_xlat4.x : u_xlat8.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgePower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_DistanceInvert==1.0);
#else
    u_xlatb12 = _DistanceInvert==1.0;
#endif
    u_xlat4.x = (u_xlatb12) ? u_xlat4.x : u_xlat8.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgePower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_DistanceInvert==1.0);
#else
    u_xlatb15 = _DistanceInvert==1.0;
#endif
    u_xlat5.x = (u_xlatb15) ? u_xlat5.x : u_xlat10.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD7.w);
    u_xlat10.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10.x * u_xlat15 + u_xlat5.x;
    u_xlat16_4 = u_xlat0.x * u_xlat5.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
float u_xlat4;
int u_xlati4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4 = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4;
    u_xlat4 = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4 = u_xlat4 * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4 : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4 : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4 = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4 = (u_xlatb2.w) ? u_xlat1.y : u_xlat4;
    u_xlat4 = (u_xlatb2.z) ? u_xlat1.x : u_xlat4;
    u_xlat4 = (u_xlatb2.y) ? u_xlat1.w : u_xlat4;
    u_xlat1.x = u_xlat4 * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4 = u_xlat4 * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4;
    u_xlat4 = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4 = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat4 = u_xlat4 * u_xlat8.x;
    u_xlat4 = u_xlat4 * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec2 u_xlat5;
int u_xlati5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlati5 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati5]._MeshParticleColorArray.w;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
int u_xlati4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgePower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgePower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlati5 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati5]._MeshParticleColorArray.w;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec2 u_xlat5;
int u_xlati5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlati5 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati5]._MeshParticleColorArray.w;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD7.w);
    u_xlat10.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10.x * u_xlat15 + u_xlat5.x;
    u_xlat16_4 = u_xlat0.x * u_xlat5.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
int u_xlati4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgePower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgePower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlati5 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati5]._MeshParticleColorArray.w;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD7.w);
    u_xlat10.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10.x * u_xlat15 + u_xlat5.x;
    u_xlat16_4 = u_xlat0.x * u_xlat5.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_DistanceInvert==1.0);
#else
    u_xlatb12 = _DistanceInvert==1.0;
#endif
    u_xlat4.x = (u_xlatb12) ? u_xlat4.x : u_xlat8.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
int u_xlati4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgePower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_DistanceInvert==1.0);
#else
    u_xlatb12 = _DistanceInvert==1.0;
#endif
    u_xlat4.x = (u_xlatb12) ? u_xlat4.x : u_xlat8.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgePower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_DistanceInvert==1.0);
#else
    u_xlatb15 = _DistanceInvert==1.0;
#endif
    u_xlat5.x = (u_xlatb15) ? u_xlat5.x : u_xlat10.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlati5 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati5]._MeshParticleColorArray.w;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD7.w);
    u_xlat10.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10.x * u_xlat15 + u_xlat5.x;
    u_xlat16_4 = u_xlat0.x * u_xlat5.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
float u_xlat4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4 = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4;
    u_xlat4 = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4 = u_xlat4 * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4 : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4 : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4 = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4 = (u_xlatb2.w) ? u_xlat1.y : u_xlat4;
    u_xlat4 = (u_xlatb2.z) ? u_xlat1.x : u_xlat4;
    u_xlat4 = (u_xlatb2.y) ? u_xlat1.w : u_xlat4;
    u_xlat1.x = u_xlat4 * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4 = u_xlat4 * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4;
    u_xlat4 = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4;
    u_xlat4 = _DayColor.w * _AlphaBrightness;
    u_xlat4 = u_xlat4 * vs_COLOR0.w;
    u_xlat4 = u_xlat4 * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec2 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgePower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgePower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec2 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat10.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10.x * u_xlat15 + u_xlat5.x;
    u_xlat16_4 = u_xlat0.x * u_xlat5.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgePower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgePower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat10.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10.x * u_xlat15 + u_xlat5.x;
    u_xlat16_4 = u_xlat0.x * u_xlat5.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_DistanceInvert==1.0);
#else
    u_xlatb12 = _DistanceInvert==1.0;
#endif
    u_xlat4.x = (u_xlatb12) ? u_xlat4.x : u_xlat8.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgePower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_DistanceInvert==1.0);
#else
    u_xlatb12 = _DistanceInvert==1.0;
#endif
    u_xlat4.x = (u_xlatb12) ? u_xlat4.x : u_xlat8.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgePower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_DistanceInvert==1.0);
#else
    u_xlatb15 = _DistanceInvert==1.0;
#endif
    u_xlat5.x = (u_xlatb15) ? u_xlat5.x : u_xlat10.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat10.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10.x * u_xlat15 + u_xlat5.x;
    u_xlat16_4 = u_xlat0.x * u_xlat5.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
float u_xlat4;
int u_xlati4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4 = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4;
    u_xlat4 = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4 = u_xlat4 * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4 : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4 : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4 = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4 = (u_xlatb2.w) ? u_xlat1.y : u_xlat4;
    u_xlat4 = (u_xlatb2.z) ? u_xlat1.x : u_xlat4;
    u_xlat4 = (u_xlatb2.y) ? u_xlat1.w : u_xlat4;
    u_xlat1.x = u_xlat4 * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4 = u_xlat4 * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4;
    u_xlat4 = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4 = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat4 = u_xlat4 * u_xlat8.x;
    u_xlat4 = u_xlat4 * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec2 u_xlat5;
int u_xlati5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlati5 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati5]._MeshParticleColorArray.w;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
int u_xlati4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgePower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgePower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlati5 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati5]._MeshParticleColorArray.w;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec2 u_xlat5;
int u_xlati5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlati5 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati5]._MeshParticleColorArray.w;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat10.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10.x * u_xlat15 + u_xlat5.x;
    u_xlat16_4 = u_xlat0.x * u_xlat5.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
int u_xlati4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgePower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgePower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlati5 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati5]._MeshParticleColorArray.w;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat10.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10.x * u_xlat15 + u_xlat5.x;
    u_xlat16_4 = u_xlat0.x * u_xlat5.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_DistanceInvert==1.0);
#else
    u_xlatb12 = _DistanceInvert==1.0;
#endif
    u_xlat4.x = (u_xlatb12) ? u_xlat4.x : u_xlat8.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec3 u_xlat4;
int u_xlati4;
bvec3 u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_MaskTexture, u_xlat1.xy);
    u_xlatb1 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = u_xlat0.x * _MaskTexScaler;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex02_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _MaskTex02_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat4.x = u_xlat4.x * u_xlat16_3;
    u_xlat0.x = _MaskTexScaler * u_xlat0.x + u_xlat16_3;
    u_xlatb8.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 1.0)).xy;
    u_xlat0.x = u_xlatb8.y ? u_xlat0.x : float(0.0);
    u_xlat0.x = (u_xlatb8.x) ? u_xlat4.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb4.x = _VmoveRandomToggle==1.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat8.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat1.y = (u_xlatb4.x) ? u_xlat1.x : u_xlat12;
    u_xlat4.x = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb2 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb4.xyz = equal(vec4(_BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 1.0, 1.0)).xyz;
    u_xlat4.x = u_xlatb4.x ? u_xlat1.z : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.w : u_xlat4.x;
    u_xlat1.x = u_xlat4.x * _BaseTexAlphaScaler + u_xlat0.x;
    u_xlat4.x = u_xlat4.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlatb4.z ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgePower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_DistanceInvert==1.0);
#else
    u_xlatb12 = _DistanceInvert==1.0;
#endif
    u_xlat4.x = (u_xlatb12) ? u_xlat4.x : u_xlat8.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat8.x = _DayColor.w * _AlphaBrightness;
    u_xlat4.x = u_xlat4.x * u_xlat8.x;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexBlendModeToggle;
uniform 	mediump float _BaseTexAlphaChannelToggle;
uniform 	mediump float _UmoveRandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _VmoveRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTex01ChannelToggle;
uniform 	mediump float _NoiseTex01UVmoveRandomToggle;
uniform 	float _NoiseTex01_Uspeed;
uniform 	vec4 _NoiseTex01_ST;
uniform 	float _NoiseTex01_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _BaseTexAlphaScaler;
uniform 	mediump float _2MaskTexBlendModeToggle;
uniform 	mediump float _MaskTexScaler;
uniform 	mediump float _MaskTexChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask;
uniform 	float _MaskTex_Uspeed;
uniform 	vec4 _MaskTexture_ST;
uniform 	float _MaskTex_Vspeed;
uniform 	mediump float _MaskTex02Scaler;
uniform 	mediump float _MaskTex02ChannelToggle;
uniform 	mediump float _NoiseIntensityOnMask02;
uniform 	float _MaskTex02_Uspeed;
uniform 	vec4 _MaskTexture02_ST;
uniform 	float _MaskTex02_Vspeed;
uniform 	float _AlphaSoftedgeScale;
uniform 	float _AlphaSoftedgePower;
uniform 	mediump float _DistanceInvert;
uniform 	float _AlphaFadeDistance;
uniform 	float _AlphaFadeOffset;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex01;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTexture;
uniform lowp sampler2D _MaskTexture02;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
float u_xlat6;
vec2 u_xlat10;
ivec2 u_xlati10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTex01ChannelToggle==3.0);
#else
    u_xlatb0.x = _NoiseTex01ChannelToggle==3.0;
#endif
    u_xlat5.xy = vs_TEXCOORD0.xy * _NoiseTex01_ST.xy + _NoiseTex01_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex01_Uspeed + u_xlat5.x;
    u_xlat1.y = _Time.y * _NoiseTex01_Vspeed + u_xlat5.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTex01UVmoveRandomToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle, _NoiseTex01ChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex01, u_xlat5.xy);
    u_xlat0.x = u_xlatb0.x ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
    u_xlat5.x = u_xlat0.x * _Noise_Brightness;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTexture_ST.xy + _MaskTexture_ST.zw;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat10.x;
    u_xlat1.y = _Time.y * _MaskTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = u_xlat5.xx * vec2(_NoiseIntensityOnMask) + u_xlat1.xy;
    u_xlat1 = texture(_MaskTexture, u_xlat10.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle, _MaskTexChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat10.x;
    u_xlat15 = u_xlat10.x * _MaskTexScaler;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTexture02_ST.xy + _MaskTexture02_ST.zw;
    u_xlat2.x = _Time.y * _MaskTex02_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _MaskTex02_Vspeed + u_xlat1.y;
    u_xlat1.xy = u_xlat5.xx * vec2(vec2(_NoiseIntensityOnMask02, _NoiseIntensityOnMask02)) + u_xlat2.xy;
    u_xlat1 = texture(_MaskTexture02, u_xlat1.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle, _MaskTex02ChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_3 = (u_xlatb2.w) ? u_xlat1.w : 0.0;
    u_xlat16_3 = (u_xlatb2.z) ? u_xlat1.z : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.y) ? u_xlat1.y : u_xlat16_3;
    u_xlat16_3 = (u_xlatb2.x) ? u_xlat1.x : u_xlat16_3;
    u_xlat16_3 = u_xlat16_3 * _MaskTex02Scaler;
    u_xlat5.x = u_xlat15 * u_xlat16_3;
    u_xlat10.x = _MaskTexScaler * u_xlat10.x + u_xlat16_3;
    u_xlatb1.xy = equal(vec4(vec4(_2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle, _2MaskTexBlendModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb1.y ? u_xlat10.x : float(0.0);
    u_xlat5.x = (u_xlatb1.x) ? u_xlat5.x : u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_VmoveRandomToggle==1.0);
#else
    u_xlatb10 = _VmoveRandomToggle==1.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat6 : u_xlat15;
    u_xlat10.x = u_xlat1.x + vs_TEXCOORD1.x;
    u_xlatb3 = equal(vec4(_UmoveRandomToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb3.x) ? u_xlat10.x : u_xlat1.x;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xzw = equal(vec4(_BaseTexAlphaChannelToggle, _BaseTexAlphaChannelToggle, _MaskTexBlendModeToggle, _MaskTexBlendModeToggle), vec4(3.0, 0.0, 0.0, 1.0)).xzw;
    u_xlat0.x = u_xlatb0.x ? u_xlat1.z : float(0.0);
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.w : u_xlat0.x;
    u_xlat1.x = u_xlat0.x * _BaseTexAlphaScaler + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _BaseTexAlphaScaler;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlatb0.w ? u_xlat1.x : float(0.0);
    u_xlat0.x = (u_xlatb0.z) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgePower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _AlphaSoftedgeScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_DistanceInvert==1.0);
#else
    u_xlatb15 = _DistanceInvert==1.0;
#endif
    u_xlat5.x = (u_xlatb15) ? u_xlat5.x : u_xlat10.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlati5 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati5]._MeshParticleColorArray.w;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat5.x = u_xlat5.x * u_xlat10.x;
    u_xlat5.x = u_xlat5.x * _MainColor.w;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat10.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10.x * u_xlat15 + u_xlat5.x;
    u_xlat16_4 = u_xlat0.x * u_xlat5.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_4<0.0);
#else
    u_xlatb0.x = u_xlat16_4<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat10.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati10.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati10.xy = (-u_xlati10.xy) + u_xlati1.xy;
    u_xlat10.xy = vec2(u_xlati10.xy);
    u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_ALPHASOFTEDGETOGGLE_ON" "_SOFTPARTICLES_ON" "_ALPHAFADEBYDISTANCETOGGLE_ON" }
""
}
}
}
}
CustomEditor "MiHoYoASEMaterialInspector"
}