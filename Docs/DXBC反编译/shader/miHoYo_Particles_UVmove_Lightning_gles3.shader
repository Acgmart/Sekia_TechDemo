//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/Particles/UVmove_Lightning" {
Properties {
_MainColor ("MainColor", Color) = (1,1,1,0)
_ColorBrightness ("ColorBrightness", Float) = 1
_AlphaBrightness ("AlphaBrightness", Float) = 1
_BaseTex ("BaseTex", 2D) = "white" { }
[Enum(RGB,0,R,1,G,2,B,3,A,4)] _BaseTexColorChannelSwitch ("BaseTexColorChannelSwitch", Float) = 0
[Enum(A,0,R,1,G,2,B,3)] _BaseTexAlphaChannelSwitch ("BaseTexAlphaChannelSwitch", Float) = 0
[MHYToggle] _BaseTexURandomToggle ("BaseTexURandomToggle", Float) = 0
[MHYToggle] _BaseTexVRandomToggle ("BaseTexVRandomToggle", Float) = 0
_BaseTex_Uspeed ("BaseTex_Uspeed", Float) = 1
_BaseTex_Vspeed ("BaseTex_Vspeed", Float) = 1
[Toggle(_NOISETEXTOGGLE_ON)] _NoiseTexToggle ("NoiseTex[Toggle]", Float) = 0
_NoiseTex ("NoiseTex", 2D) = "white" { }
[Enum(R,0,G,1,B,2,A,3)] _NoiseTexChannelSwitch ("NoiseTexChannelSwitch", Float) = 0
_NoiseTex_Uspeed ("NoiseTex_Uspeed", Float) = 1
_NoiseTex_Vspeed ("NoiseTex_Vspeed", Float) = 1
_MeshParticleColorArray ("MeshParticleColorArray", Vector) = (1,1,1,1)
_Noise_Brightness ("Noise_Brightness", Float) = 1
_Noise_Offset ("Noise_Offset", Float) = 0
[MHYToggle] _NoiseTexUVRandomToggle ("NoiseTexUVRandomToggle", Float) = 0
[Toggle(_MASKTEXTOGGLE_ON)] _MaskTexToggle ("MaskTex[Toggle]", Float) = 0
_MaskTex ("MaskTex", 2D) = "white" { }
[Enum(R,0,G,1,B,2,A,3)] _MaskTexChannelSwitch ("MaskTexChannelSwitch", Float) = 1
_MaskTex_Uspeed ("MaskTex_Uspeed", Float) = 0
_MaskTex_Vspeed ("MaskTex_Vspeed", Float) = 0
[Header(MiHoYoDepthFade)] [Toggle(_SOFTPARTICLES_ON)] _SOFTPARTICLES ("SOFTPARTICLES", Float) = 0
_DepthThresh ("DepthThresh", Range(0.001, 20)) = 1
_DepthFade ("DepthFade", Range(0.001, 20)) = 1
_TimeScale ("TimeScale", Float) = 1
_InteractionSize ("InteractionSize", Range(-20, 20)) = 1
_InteractionBrightness ("InteractionBrightness", Float) = 1
_DayColor ("DayColor", Color) = (1,1,1,1)
[Header(Motion Vectors)] _MotionVectorsAlphaCutoff ("Motion Vectors Alpha Cutoff", Range(0, 1)) = 0.1
[Header(Cull Mode)] [Enum(UnityEngine.Rendering.CullMode)] _Cull ("Cull Mode", Float) = 2
_MHYZBias ("Z Bias", Float) = 0
_PolygonOffsetFactor ("Polygon Offset Factor", Float) = 0
_PolygonOffsetUnit ("Polygon Offset Unit", Float) = 0
[Header(Blend Mode)] [Enum(UnityEngine.Rendering.BlendMode)] _SrcBlendMode ("Src Blend Mode", Float) = 1
[Enum(UnityEngine.Rendering.BlendMode)] _DstBlendMode ("Dst Blend Mode", Float) = 0
[Enum(UnityEngine.Rendering.BlendOp)] _BlendOP ("BlendOp Mode", Float) = 0
[Header(Depth Mode)] [Enum(Off, 0, On, 1)] _Zwrite ("ZWrite Mode", Float) = 1
[Enum(UnityEngine.Rendering.CompareFunction)] _Ztest ("ZTest Mode", Float) = 4
[Header(Fog Mode)] [Toggle(EFFECTED_BY_FOG)] _EffectedByFog ("Effected by fog", Float) = 0
}
SubShader {
 Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Name "MAIN"
  Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "PreviewType" = "Plane" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZTest Off
  ZWrite Off
  Cull Off
  GpuProgramID 48356
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
float u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4.x) ? u_xlat12 : u_xlat8;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8 = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5 = (u_xlatb3.z) ? u_xlat2.y : u_xlat5;
    u_xlat5 = (u_xlatb3.y) ? u_xlat2.x : u_xlat5;
    u_xlat5 = (u_xlatb3.x) ? u_xlat2.w : u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
float u_xlat5;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb4.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat8.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat2.y = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat8.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4.x ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.x = u_xlat4.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb8 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat12 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * u_xlat12 + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat12 : u_xlat8.x;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat4.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8.x;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5 = (u_xlatb3.z) ? u_xlat2.y : u_xlat5;
    u_xlat5 = (u_xlatb3.y) ? u_xlat2.x : u_xlat5;
    u_xlat5 = (u_xlatb3.x) ? u_xlat2.w : u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
float u_xlat5;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat15;
float u_xlat16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb0 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat5 = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5 = _Time.y * u_xlat5 + u_xlat10.y;
    u_xlat15 = u_xlat5 + vs_TEXCOORD1.y;
    u_xlat0.y = (u_xlatb0) ? u_xlat15 : u_xlat5;
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.x = _Time.y * u_xlat15 + u_xlat10.x;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.x = (u_xlatb1.x) ? u_xlat15 : u_xlat10.x;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat16 = _ZBufferParams.z * u_xlat16 + _ZBufferParams.w;
    u_xlat16 = float(1.0) / u_xlat16;
    u_xlat16 = u_xlat16 + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5 = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5 = u_xlat5 * u_xlat15 + u_xlat10.x;
    u_xlat3.w = u_xlat5 * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4.x) ? u_xlat12 : u_xlat8;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8 = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.w : u_xlat5.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat1.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb4.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat8.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat2.y = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat8.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4.x ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.x = u_xlat4.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb8 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat12 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * u_xlat12 + u_xlat1.y;
    u_xlat5.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb8) ? u_xlat5.x : u_xlat12;
    u_xlat8.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat12 : u_xlat8.x;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat4.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8.x;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.w : u_xlat5.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat1.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat15;
float u_xlat16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb0 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat0.y = (u_xlatb0) ? u_xlat15 : u_xlat5.x;
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.x = _Time.y * u_xlat15 + u_xlat10.x;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.x = (u_xlatb1.x) ? u_xlat15 : u_xlat10.x;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat16 = _ZBufferParams.z * u_xlat16 + _ZBufferParams.w;
    u_xlat16 = float(1.0) / u_xlat16;
    u_xlat16 = u_xlat16 + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat3.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat5.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlat5.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat5.x + u_xlat10.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb5 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb5) ? u_xlat15 : u_xlat10.x;
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat1.x;
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat16 = _ZBufferParams.z * u_xlat16 + _ZBufferParams.w;
    u_xlat16 = float(1.0) / u_xlat16;
    u_xlat16 = u_xlat16 + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat1.x = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat11 = (-u_xlat6) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat11 + u_xlat6;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.w = u_xlat1.x * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
float u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4.x) ? u_xlat12 : u_xlat8;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8 = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati1]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5 = (u_xlatb3.z) ? u_xlat2.y : u_xlat5;
    u_xlat5 = (u_xlatb3.y) ? u_xlat2.x : u_xlat5;
    u_xlat5 = (u_xlatb3.x) ? u_xlat2.w : u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
float u_xlat5;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb4.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat8.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat2.y = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat8.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4.x ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.x = u_xlat4.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb8 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat12 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * u_xlat12 + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat12 : u_xlat8.x;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat4.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8.x;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati1]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5 = (u_xlatb3.z) ? u_xlat2.y : u_xlat5;
    u_xlat5 = (u_xlatb3.y) ? u_xlat2.x : u_xlat5;
    u_xlat5 = (u_xlatb3.x) ? u_xlat2.w : u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
float u_xlat5;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat15;
float u_xlat16;
int u_xlati16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb0 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat5 = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5 = _Time.y * u_xlat5 + u_xlat10.y;
    u_xlat15 = u_xlat5 + vs_TEXCOORD1.y;
    u_xlat0.y = (u_xlatb0) ? u_xlat15 : u_xlat5;
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.x = _Time.y * u_xlat15 + u_xlat10.x;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.x = (u_xlatb1.x) ? u_xlat15 : u_xlat10.x;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati16 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati16]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat16 = _ZBufferParams.z * u_xlat16 + _ZBufferParams.w;
    u_xlat16 = float(1.0) / u_xlat16;
    u_xlat16 = u_xlat16 + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5 = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5 = u_xlat5 * u_xlat15 + u_xlat10.x;
    u_xlat3.w = u_xlat5 * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4.x) ? u_xlat12 : u_xlat8;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8 = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati1]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.w : u_xlat5.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat1.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb4.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat8.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat2.y = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat8.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4.x ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.x = u_xlat4.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb8 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat12 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * u_xlat12 + u_xlat1.y;
    u_xlat5.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb8) ? u_xlat5.x : u_xlat12;
    u_xlat8.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat12 : u_xlat8.x;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat4.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8.x;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati1]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.w : u_xlat5.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat1.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat15;
float u_xlat16;
int u_xlati16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb0 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat0.y = (u_xlatb0) ? u_xlat15 : u_xlat5.x;
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.x = _Time.y * u_xlat15 + u_xlat10.x;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.x = (u_xlatb1.x) ? u_xlat15 : u_xlat10.x;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati16 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati16]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat16 = _ZBufferParams.z * u_xlat16 + _ZBufferParams.w;
    u_xlat16 = float(1.0) / u_xlat16;
    u_xlat16 = u_xlat16 + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat3.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
int u_xlati16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat5.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlat5.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat5.x + u_xlat10.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb5 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb5) ? u_xlat15 : u_xlat10.x;
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat1.x;
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati16 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati16]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat16 = _ZBufferParams.z * u_xlat16 + _ZBufferParams.w;
    u_xlat16 = float(1.0) / u_xlat16;
    u_xlat16 = u_xlat16 + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat1.x = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat11 = (-u_xlat6) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat11 + u_xlat6;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.w = u_xlat1.x * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
float u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4.x) ? u_xlat12 : u_xlat8;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8 = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5 = (u_xlatb3.z) ? u_xlat2.y : u_xlat5;
    u_xlat5 = (u_xlatb3.y) ? u_xlat2.x : u_xlat5;
    u_xlat5 = (u_xlatb3.x) ? u_xlat2.w : u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
float u_xlat5;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb4.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat8.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat2.y = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat8.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4.x ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.x = u_xlat4.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb8 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat12 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * u_xlat12 + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat12 : u_xlat8.x;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat4.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8.x;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5 = (u_xlatb3.z) ? u_xlat2.y : u_xlat5;
    u_xlat5 = (u_xlatb3.y) ? u_xlat2.x : u_xlat5;
    u_xlat5 = (u_xlatb3.x) ? u_xlat2.w : u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
float u_xlat5;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat15;
float u_xlat16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb0 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat5 = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5 = _Time.y * u_xlat5 + u_xlat10.y;
    u_xlat15 = u_xlat5 + vs_TEXCOORD1.y;
    u_xlat0.y = (u_xlatb0) ? u_xlat15 : u_xlat5;
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.x = _Time.y * u_xlat15 + u_xlat10.x;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.x = (u_xlatb1.x) ? u_xlat15 : u_xlat10.x;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat16 = u_xlat16 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5 = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5 = u_xlat5 * u_xlat15 + u_xlat10.x;
    u_xlat3.w = u_xlat5 * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4.x) ? u_xlat12 : u_xlat8;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8 = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.w : u_xlat5.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat1.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb4.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat8.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat2.y = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat8.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4.x ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.x = u_xlat4.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb8 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat12 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * u_xlat12 + u_xlat1.y;
    u_xlat5.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb8) ? u_xlat5.x : u_xlat12;
    u_xlat8.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat12 : u_xlat8.x;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat4.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8.x;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.w : u_xlat5.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat1.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat15;
float u_xlat16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb0 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat0.y = (u_xlatb0) ? u_xlat15 : u_xlat5.x;
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.x = _Time.y * u_xlat15 + u_xlat10.x;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.x = (u_xlatb1.x) ? u_xlat15 : u_xlat10.x;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat16 = u_xlat16 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat3.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat5.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlat5.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat5.x + u_xlat10.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb5 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb5) ? u_xlat15 : u_xlat10.x;
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat1.x;
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat16 = u_xlat16 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat1.x = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat11 = (-u_xlat6) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat11 + u_xlat6;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.w = u_xlat1.x * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
float u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4.x) ? u_xlat12 : u_xlat8;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8 = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati1]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5 = (u_xlatb3.z) ? u_xlat2.y : u_xlat5;
    u_xlat5 = (u_xlatb3.y) ? u_xlat2.x : u_xlat5;
    u_xlat5 = (u_xlatb3.x) ? u_xlat2.w : u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
float u_xlat5;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb4.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat8.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat2.y = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat8.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4.x ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.x = u_xlat4.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb8 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat12 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * u_xlat12 + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat12 : u_xlat8.x;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat4.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8.x;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati1]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5 = (u_xlatb3.z) ? u_xlat2.y : u_xlat5;
    u_xlat5 = (u_xlatb3.y) ? u_xlat2.x : u_xlat5;
    u_xlat5 = (u_xlatb3.x) ? u_xlat2.w : u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
float u_xlat5;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat15;
float u_xlat16;
int u_xlati16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb0 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat5 = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5 = _Time.y * u_xlat5 + u_xlat10.y;
    u_xlat15 = u_xlat5 + vs_TEXCOORD1.y;
    u_xlat0.y = (u_xlatb0) ? u_xlat15 : u_xlat5;
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.x = _Time.y * u_xlat15 + u_xlat10.x;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.x = (u_xlatb1.x) ? u_xlat15 : u_xlat10.x;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati16 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati16]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat16 = u_xlat16 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5 = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5 = u_xlat5 * u_xlat15 + u_xlat10.x;
    u_xlat3.w = u_xlat5 * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4.x) ? u_xlat12 : u_xlat8;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8 = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati1]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.w : u_xlat5.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat1.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb4.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat8.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat2.y = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat8.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4.x ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.x = u_xlat4.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb8 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat12 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * u_xlat12 + u_xlat1.y;
    u_xlat5.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb8) ? u_xlat5.x : u_xlat12;
    u_xlat8.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat12 : u_xlat8.x;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat4.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8.x;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati1]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.w : u_xlat5.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat1.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec2 u_xlat5;
float u_xlat6;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
int u_xlati16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb0 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat0.y = (u_xlatb0) ? u_xlat15 : u_xlat5.x;
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.x = _Time.y * u_xlat15 + u_xlat10.x;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.x = (u_xlatb1.x) ? u_xlat15 : u_xlat10.x;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati16 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati16]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat16 = u_xlat16 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat1.x = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat11 = (-u_xlat6) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat11 + u_xlat6;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.w = u_xlat1.x * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
int u_xlati16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat5.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlat5.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat5.x + u_xlat10.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb5 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb5) ? u_xlat15 : u_xlat10.x;
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat1.x;
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati16 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati16]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat16 = u_xlat16 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat1.x = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat11 = (-u_xlat6) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat11 + u_xlat6;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.w = u_xlat1.x * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
bvec2 u_xlatb3;
float u_xlat4;
vec2 u_xlat6;
bool u_xlatb6;
float u_xlat7;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * u_xlat3.x + u_xlat6.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.x = u_xlat3.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat6.x : u_xlat3.x;
    u_xlat3.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat3.x = _Time.y * u_xlat3.x + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb6 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat9 = u_xlat3.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb6) ? u_xlat9 : u_xlat3.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb3.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlatb3.y ? u_xlat2.w : float(0.0);
    u_xlat3.x = (u_xlatb3.x) ? u_xlat2.z : u_xlat6.x;
    u_xlat3.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat3.x;
    u_xlat3.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat3.xxx;
    u_xlatb1 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10 = u_xlatb1.w ? u_xlat2.z : float(0.0);
    u_xlat7 = (u_xlatb1.z) ? u_xlat2.y : u_xlat10;
    u_xlat4 = (u_xlatb1.y) ? u_xlat2.x : u_xlat7;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.w : u_xlat4;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat4 = _DayColor.w * _AlphaBrightness;
    u_xlat1.w = u_xlat1.x * u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat3.xyz = vec3(u_xlat2.y * u_xlat3.x, u_xlat2.z * u_xlat3.y, u_xlat2.w * u_xlat3.z);
    u_xlat3.xyz = u_xlat3.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xxx;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
float u_xlat6;
vec2 u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb10 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat3.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlat3.y = _Time.y * u_xlat1.x + u_xlat10.y;
    u_xlatb4 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat5.xy = (u_xlatb4.x) ? u_xlat5.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex, u_xlat5.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb5.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat5.x = u_xlatb5.x ? u_xlat3.w : float(0.0);
    u_xlat5.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat5.x;
    u_xlat5.x = u_xlat5.x + _Noise_Offset;
    u_xlat5.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat5.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat5.xy);
    u_xlatb5.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb5.y ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb5.x) ? u_xlat2.z : u_xlat10.x;
    u_xlat5.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat5.xxx;
    u_xlatb1 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat2.z : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat2.y : u_xlat16;
    u_xlat6 = (u_xlatb1.y) ? u_xlat2.x : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.w : u_xlat6;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat6 = _DayColor.w * _AlphaBrightness;
    u_xlat1.w = u_xlat1.x * u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat2.y * u_xlat5.x, u_xlat2.z * u_xlat5.y, u_xlat2.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec2 u_xlat3;
bvec4 u_xlatb3;
float u_xlat4;
float u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat4 = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat8 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat12 : u_xlat8;
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb12 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb12) ? u_xlat1.x : u_xlat8;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb8.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat12 = u_xlatb8.y ? u_xlat1.w : float(0.0);
    u_xlat8 = (u_xlatb8.x) ? u_xlat1.z : u_xlat12;
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.x : u_xlat8;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb3.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb3.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb3.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb3.x) ? u_xlat1.w : u_xlat8;
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat8 = u_xlat8 * u_xlat1.x;
    u_xlat12 = _DayColor.w * _AlphaBrightness;
    u_xlat8 = u_xlat8 * u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat12) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + u_xlat12;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat4 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat1.w = u_xlat0.x * u_xlat8;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec2 u_xlat6;
vec2 u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb10 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat15 : u_xlat5.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb5.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb5.y ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb5.x) ? u_xlat2.z : u_xlat10.x;
    u_xlat5.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat5.xxx;
    u_xlatb1 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat2.z : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat2.y : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.w : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat6.xy;
    u_xlat3 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat6.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = _DayColor.w * _AlphaBrightness;
    u_xlat1.w = u_xlat1.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat2.y * u_xlat5.x, u_xlat2.z * u_xlat5.y, u_xlat2.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec2 u_xlat6;
vec2 u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb10 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat3.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlat3.y = _Time.y * u_xlat1.x + u_xlat10.y;
    u_xlatb4 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat5.xy = (u_xlatb4.x) ? u_xlat5.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex, u_xlat5.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb5.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat5.x = u_xlatb5.x ? u_xlat3.w : float(0.0);
    u_xlat5.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat5.x;
    u_xlat5.x = u_xlat5.x + _Noise_Offset;
    u_xlat5.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat5.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat5.xy);
    u_xlatb5.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb5.y ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb5.x) ? u_xlat2.z : u_xlat10.x;
    u_xlat5.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat5.xxx;
    u_xlatb1 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat2.z : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat2.y : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.w : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat6.xy;
    u_xlat3 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat6.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = _DayColor.w * _AlphaBrightness;
    u_xlat1.w = u_xlat1.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat2.y * u_xlat5.x, u_xlat2.z * u_xlat5.y, u_xlat2.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
float u_xlat5;
float u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat5 = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10 = _Time.y * u_xlat10 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10;
    u_xlat10 = _TimeScale * _BaseTex_Vspeed;
    u_xlat10 = _Time.y * u_xlat10 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10 = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10 = (u_xlatb2.w) ? u_xlat1.y : u_xlat10;
    u_xlat10 = (u_xlatb2.z) ? u_xlat1.x : u_xlat10;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat10);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10 = u_xlatb3.w ? u_xlat1.z : float(0.0);
    u_xlat10 = (u_xlatb3.z) ? u_xlat1.y : u_xlat10;
    u_xlat10 = (u_xlatb3.y) ? u_xlat1.x : u_xlat10;
    u_xlat10 = (u_xlatb3.x) ? u_xlat1.w : u_xlat10;
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat10 = u_xlat10 * u_xlat1.x;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat3.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTex, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat15 = (u_xlatb4.z) ? u_xlat3.z : u_xlat15;
    u_xlat15 = (u_xlatb4.y) ? u_xlat3.y : u_xlat15;
    u_xlat15 = (u_xlatb4.x) ? u_xlat3.x : u_xlat15;
    u_xlat10 = u_xlat15 * u_xlat10;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat10 = u_xlat10 * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + u_xlat15;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat5 = u_xlat5 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat5) * u_xlat1.xyz;
    u_xlat1.w = u_xlat0.x * u_xlat10;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
float u_xlat5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat5 = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10.x;
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10.x;
    u_xlat10.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat15 = _TimeScale * _NoiseTex_Vspeed;
    u_xlat4.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlat4.y = _Time.y * u_xlat15 + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = u_xlat4.xy + vs_TEXCOORD1.xy;
    u_xlat10.xy = (u_xlatb1.x) ? u_xlat10.xy : u_xlat4.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat10.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb10.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat10.x = u_xlatb10.x ? u_xlat4.w : float(0.0);
    u_xlat10.x = (u_xlatb1.w) ? u_xlat4.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.z) ? u_xlat4.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.y) ? u_xlat4.x : u_xlat10.x;
    u_xlat10.x = u_xlat10.x + _Noise_Offset;
    u_xlat10.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat10.xx + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat10.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat10.x;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb3.w ? u_xlat1.z : float(0.0);
    u_xlat10.x = (u_xlatb3.z) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb3.y) ? u_xlat1.x : u_xlat10.x;
    u_xlat10.x = (u_xlatb3.x) ? u_xlat1.w : u_xlat10.x;
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat10.x = u_xlat10.x * u_xlat1.x;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat3.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTex, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat15 = (u_xlatb4.z) ? u_xlat3.z : u_xlat15;
    u_xlat15 = (u_xlatb4.y) ? u_xlat3.y : u_xlat15;
    u_xlat15 = (u_xlatb4.x) ? u_xlat3.x : u_xlat15;
    u_xlat10.x = u_xlat15 * u_xlat10.x;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + u_xlat15;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat5 = u_xlat5 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat5) * u_xlat1.xyz;
    u_xlat1.w = u_xlat0.x * u_xlat10.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
float u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10 = _Time.y * u_xlat10 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10;
    u_xlat10 = _TimeScale * _BaseTex_Vspeed;
    u_xlat10 = _Time.y * u_xlat10 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10 = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10 = (u_xlatb2.w) ? u_xlat1.y : u_xlat10;
    u_xlat10 = (u_xlatb2.z) ? u_xlat1.x : u_xlat10;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat10);
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat10 = _DayColor.w * _AlphaBrightness;
    u_xlat3.w = u_xlat0 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat5.x * u_xlat5.x;
    u_xlat0 = u_xlat0 * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat1.y * u_xlat5.x, u_xlat1.z * u_xlat5.y, u_xlat1.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat0);
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10.x;
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10.x;
    u_xlat10.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat15 = _TimeScale * _NoiseTex_Vspeed;
    u_xlat4.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlat4.y = _Time.y * u_xlat15 + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = u_xlat4.xy + vs_TEXCOORD1.xy;
    u_xlat10.xy = (u_xlatb1.x) ? u_xlat10.xy : u_xlat4.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat10.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb10.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat10.x = u_xlatb10.x ? u_xlat4.w : float(0.0);
    u_xlat10.x = (u_xlatb1.w) ? u_xlat4.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.z) ? u_xlat4.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.y) ? u_xlat4.x : u_xlat10.x;
    u_xlat10.x = u_xlat10.x + _Noise_Offset;
    u_xlat10.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat10.xx + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat10.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat10.x;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat3.w = u_xlat0 * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat5.x * u_xlat5.x;
    u_xlat0 = u_xlat0 * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat1.y * u_xlat5.x, u_xlat1.z * u_xlat5.y, u_xlat1.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat0);
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
bvec4 u_xlatb4;
vec2 u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat15 = _TimeScale * _BaseTex_Vspeed;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb1 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb1) ? u_xlat6 : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb3.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb3.y ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb3.x) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.x : u_xlat15;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat0 * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat1.x + u_xlat15;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.w = u_xlat5.x * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10.x;
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10.x;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat10.x;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat10.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat10.xy;
    u_xlat3 = texture(_MaskTex, u_xlat10.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat10.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat10.x;
    u_xlat0 = u_xlat10.x * u_xlat0;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat3.w = u_xlat0 * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat5.x * u_xlat5.x;
    u_xlat0 = u_xlat0 * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat1.y * u_xlat5.x, u_xlat1.z * u_xlat5.y, u_xlat1.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat0);
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10.x;
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10.x;
    u_xlat10.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat15 = _TimeScale * _NoiseTex_Vspeed;
    u_xlat4.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlat4.y = _Time.y * u_xlat15 + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = u_xlat4.xy + vs_TEXCOORD1.xy;
    u_xlat10.xy = (u_xlatb1.x) ? u_xlat10.xy : u_xlat4.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat10.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb10.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat10.x = u_xlatb10.x ? u_xlat4.w : float(0.0);
    u_xlat10.x = (u_xlatb1.w) ? u_xlat4.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.z) ? u_xlat4.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.y) ? u_xlat4.x : u_xlat10.x;
    u_xlat10.x = u_xlat10.x + _Noise_Offset;
    u_xlat10.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat10.xx + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat10.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat10.x;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat10.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat10.xy;
    u_xlat3 = texture(_MaskTex, u_xlat10.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat10.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat10.x;
    u_xlat0 = u_xlat10.x * u_xlat0;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat3.w = u_xlat0 * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat5.x * u_xlat5.x;
    u_xlat0 = u_xlat0 * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat1.y * u_xlat5.x, u_xlat1.z * u_xlat5.y, u_xlat1.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat0);
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
bvec4 u_xlatb4;
vec2 u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat15 = _TimeScale * _BaseTex_Vspeed;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb1 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb1) ? u_xlat6 : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb3.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb3.y ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb3.x) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.x : u_xlat15;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat3.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTex, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat15 = (u_xlatb4.z) ? u_xlat3.z : u_xlat15;
    u_xlat15 = (u_xlatb4.y) ? u_xlat3.y : u_xlat15;
    u_xlat15 = (u_xlatb4.x) ? u_xlat3.x : u_xlat15;
    u_xlat0 = u_xlat15 * u_xlat0;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat0 * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat1.x + u_xlat15;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.w = u_xlat5.x * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat11;
vec2 u_xlat13;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat15 = _TimeScale * _BaseTex_Vspeed;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb1.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb1.x) ? u_xlat6 : u_xlat15;
    u_xlat15 = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat11 = _TimeScale * _NoiseTex_Vspeed;
    u_xlat4.x = _Time.y * u_xlat15 + u_xlat1.x;
    u_xlat4.y = _Time.y * u_xlat11 + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = u_xlat4.xy + vs_TEXCOORD1.xy;
    u_xlat13.xy = (u_xlatb1.x) ? u_xlat13.xy : u_xlat4.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat13.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb15 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat4.w : float(0.0);
    u_xlat15 = (u_xlatb1.w) ? u_xlat4.z : u_xlat15;
    u_xlat15 = (u_xlatb1.z) ? u_xlat4.y : u_xlat15;
    u_xlat15 = (u_xlatb1.y) ? u_xlat4.x : u_xlat15;
    u_xlat15 = u_xlat15 + _Noise_Offset;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat15) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb3.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb3.y ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb3.x) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.x : u_xlat15;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat3.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTex, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat15 = (u_xlatb4.z) ? u_xlat3.z : u_xlat15;
    u_xlat15 = (u_xlatb4.y) ? u_xlat3.y : u_xlat15;
    u_xlat15 = (u_xlatb4.x) ? u_xlat3.x : u_xlat15;
    u_xlat0 = u_xlat15 * u_xlat0;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat0 * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat1.x + u_xlat15;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.w = u_xlat5.x * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
bvec2 u_xlatb3;
float u_xlat4;
vec2 u_xlat6;
bool u_xlatb6;
float u_xlat7;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * u_xlat3.x + u_xlat6.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.x = u_xlat3.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat6.x : u_xlat3.x;
    u_xlat3.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat3.x = _Time.y * u_xlat3.x + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb6 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat9 = u_xlat3.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb6) ? u_xlat9 : u_xlat3.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb3.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlatb3.y ? u_xlat2.w : float(0.0);
    u_xlat3.x = (u_xlatb3.x) ? u_xlat2.z : u_xlat6.x;
    u_xlat3.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat3.x;
    u_xlat3.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat3.xxx;
    u_xlatb1 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10 = u_xlatb1.w ? u_xlat2.z : float(0.0);
    u_xlat7 = (u_xlatb1.z) ? u_xlat2.y : u_xlat10;
    u_xlat4 = (u_xlatb1.y) ? u_xlat2.x : u_xlat7;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.w : u_xlat4;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat4 = _DayColor.w * _AlphaBrightness;
    u_xlat1.w = u_xlat1.x * u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat3.xyz = vec3(u_xlat2.y * u_xlat3.x, u_xlat2.z * u_xlat3.y, u_xlat2.w * u_xlat3.z);
    u_xlat3.xyz = u_xlat3.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xxx;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
float u_xlat6;
vec2 u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb10 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat3.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlat3.y = _Time.y * u_xlat1.x + u_xlat10.y;
    u_xlatb4 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat5.xy = (u_xlatb4.x) ? u_xlat5.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex, u_xlat5.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb5.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat5.x = u_xlatb5.x ? u_xlat3.w : float(0.0);
    u_xlat5.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat5.x;
    u_xlat5.x = u_xlat5.x + _Noise_Offset;
    u_xlat5.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat5.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat5.xy);
    u_xlatb5.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb5.y ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb5.x) ? u_xlat2.z : u_xlat10.x;
    u_xlat5.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat5.xxx;
    u_xlatb1 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat2.z : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat2.y : u_xlat16;
    u_xlat6 = (u_xlatb1.y) ? u_xlat2.x : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.w : u_xlat6;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat6 = _DayColor.w * _AlphaBrightness;
    u_xlat1.w = u_xlat1.x * u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat2.y * u_xlat5.x, u_xlat2.z * u_xlat5.y, u_xlat2.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec2 u_xlat3;
bvec4 u_xlatb3;
float u_xlat4;
float u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4 = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat8 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat12 : u_xlat8;
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb12 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb12) ? u_xlat1.x : u_xlat8;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb8.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat12 = u_xlatb8.y ? u_xlat1.w : float(0.0);
    u_xlat8 = (u_xlatb8.x) ? u_xlat1.z : u_xlat12;
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.x : u_xlat8;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb3.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb3.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb3.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb3.x) ? u_xlat1.w : u_xlat8;
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat8 = u_xlat8 * u_xlat1.x;
    u_xlat12 = _DayColor.w * _AlphaBrightness;
    u_xlat8 = u_xlat8 * u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat12) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + u_xlat12;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat4 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat1.w = u_xlat0.x * u_xlat8;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec2 u_xlat6;
vec2 u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb10 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat15 : u_xlat5.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb5.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb5.y ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb5.x) ? u_xlat2.z : u_xlat10.x;
    u_xlat5.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat5.xxx;
    u_xlatb1 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat2.z : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat2.y : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.w : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat6.xy;
    u_xlat3 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat6.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = _DayColor.w * _AlphaBrightness;
    u_xlat1.w = u_xlat1.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat2.y * u_xlat5.x, u_xlat2.z * u_xlat5.y, u_xlat2.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec2 u_xlat6;
vec2 u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb10 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat3.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlat3.y = _Time.y * u_xlat1.x + u_xlat10.y;
    u_xlatb4 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat5.xy = (u_xlatb4.x) ? u_xlat5.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex, u_xlat5.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb5.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat5.x = u_xlatb5.x ? u_xlat3.w : float(0.0);
    u_xlat5.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat5.x;
    u_xlat5.x = u_xlat5.x + _Noise_Offset;
    u_xlat5.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat5.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat5.xy);
    u_xlatb5.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb5.y ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb5.x) ? u_xlat2.z : u_xlat10.x;
    u_xlat5.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat5.xxx;
    u_xlatb1 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat2.z : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat2.y : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.w : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat6.xy;
    u_xlat3 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat6.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = _DayColor.w * _AlphaBrightness;
    u_xlat1.w = u_xlat1.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat2.y * u_xlat5.x, u_xlat2.z * u_xlat5.y, u_xlat2.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
float u_xlat5;
float u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5 = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10 = _Time.y * u_xlat10 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10;
    u_xlat10 = _TimeScale * _BaseTex_Vspeed;
    u_xlat10 = _Time.y * u_xlat10 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10 = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10 = (u_xlatb2.w) ? u_xlat1.y : u_xlat10;
    u_xlat10 = (u_xlatb2.z) ? u_xlat1.x : u_xlat10;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat10);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10 = u_xlatb3.w ? u_xlat1.z : float(0.0);
    u_xlat10 = (u_xlatb3.z) ? u_xlat1.y : u_xlat10;
    u_xlat10 = (u_xlatb3.y) ? u_xlat1.x : u_xlat10;
    u_xlat10 = (u_xlatb3.x) ? u_xlat1.w : u_xlat10;
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat10 = u_xlat10 * u_xlat1.x;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat3.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTex, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat15 = (u_xlatb4.z) ? u_xlat3.z : u_xlat15;
    u_xlat15 = (u_xlatb4.y) ? u_xlat3.y : u_xlat15;
    u_xlat15 = (u_xlatb4.x) ? u_xlat3.x : u_xlat15;
    u_xlat10 = u_xlat15 * u_xlat10;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat10 = u_xlat10 * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + u_xlat15;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat5 = u_xlat5 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat5) * u_xlat1.xyz;
    u_xlat1.w = u_xlat0.x * u_xlat10;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
float u_xlat5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5 = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10.x;
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10.x;
    u_xlat10.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat15 = _TimeScale * _NoiseTex_Vspeed;
    u_xlat4.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlat4.y = _Time.y * u_xlat15 + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = u_xlat4.xy + vs_TEXCOORD1.xy;
    u_xlat10.xy = (u_xlatb1.x) ? u_xlat10.xy : u_xlat4.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat10.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb10.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat10.x = u_xlatb10.x ? u_xlat4.w : float(0.0);
    u_xlat10.x = (u_xlatb1.w) ? u_xlat4.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.z) ? u_xlat4.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.y) ? u_xlat4.x : u_xlat10.x;
    u_xlat10.x = u_xlat10.x + _Noise_Offset;
    u_xlat10.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat10.xx + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat10.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat10.x;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb3.w ? u_xlat1.z : float(0.0);
    u_xlat10.x = (u_xlatb3.z) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb3.y) ? u_xlat1.x : u_xlat10.x;
    u_xlat10.x = (u_xlatb3.x) ? u_xlat1.w : u_xlat10.x;
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat10.x = u_xlat10.x * u_xlat1.x;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat3.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTex, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat15 = (u_xlatb4.z) ? u_xlat3.z : u_xlat15;
    u_xlat15 = (u_xlatb4.y) ? u_xlat3.y : u_xlat15;
    u_xlat15 = (u_xlatb4.x) ? u_xlat3.x : u_xlat15;
    u_xlat10.x = u_xlat15 * u_xlat10.x;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + u_xlat15;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat5 = u_xlat5 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat5) * u_xlat1.xyz;
    u_xlat1.w = u_xlat0.x * u_xlat10.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
float u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10 = _Time.y * u_xlat10 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10;
    u_xlat10 = _TimeScale * _BaseTex_Vspeed;
    u_xlat10 = _Time.y * u_xlat10 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10 = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10 = (u_xlatb2.w) ? u_xlat1.y : u_xlat10;
    u_xlat10 = (u_xlatb2.z) ? u_xlat1.x : u_xlat10;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat10);
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat10 = _DayColor.w * _AlphaBrightness;
    u_xlat3.w = u_xlat0 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat5.x * u_xlat5.x;
    u_xlat0 = u_xlat0 * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat1.y * u_xlat5.x, u_xlat1.z * u_xlat5.y, u_xlat1.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat0);
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10.x;
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10.x;
    u_xlat10.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat15 = _TimeScale * _NoiseTex_Vspeed;
    u_xlat4.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlat4.y = _Time.y * u_xlat15 + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = u_xlat4.xy + vs_TEXCOORD1.xy;
    u_xlat10.xy = (u_xlatb1.x) ? u_xlat10.xy : u_xlat4.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat10.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb10.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat10.x = u_xlatb10.x ? u_xlat4.w : float(0.0);
    u_xlat10.x = (u_xlatb1.w) ? u_xlat4.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.z) ? u_xlat4.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.y) ? u_xlat4.x : u_xlat10.x;
    u_xlat10.x = u_xlat10.x + _Noise_Offset;
    u_xlat10.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat10.xx + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat10.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat10.x;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat3.w = u_xlat0 * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat5.x * u_xlat5.x;
    u_xlat0 = u_xlat0 * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat1.y * u_xlat5.x, u_xlat1.z * u_xlat5.y, u_xlat1.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat0);
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
bvec4 u_xlatb4;
vec2 u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat15 = _TimeScale * _BaseTex_Vspeed;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb1 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb1) ? u_xlat6 : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb3.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb3.y ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb3.x) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.x : u_xlat15;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat0 * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat1.x + u_xlat15;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.w = u_xlat5.x * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10.x;
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10.x;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat10.x;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat10.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat10.xy;
    u_xlat3 = texture(_MaskTex, u_xlat10.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat10.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat10.x;
    u_xlat0 = u_xlat10.x * u_xlat0;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat3.w = u_xlat0 * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat5.x * u_xlat5.x;
    u_xlat0 = u_xlat0 * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat1.y * u_xlat5.x, u_xlat1.z * u_xlat5.y, u_xlat1.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat0);
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10.x;
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10.x;
    u_xlat10.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat15 = _TimeScale * _NoiseTex_Vspeed;
    u_xlat4.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlat4.y = _Time.y * u_xlat15 + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = u_xlat4.xy + vs_TEXCOORD1.xy;
    u_xlat10.xy = (u_xlatb1.x) ? u_xlat10.xy : u_xlat4.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat10.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb10.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat10.x = u_xlatb10.x ? u_xlat4.w : float(0.0);
    u_xlat10.x = (u_xlatb1.w) ? u_xlat4.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.z) ? u_xlat4.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.y) ? u_xlat4.x : u_xlat10.x;
    u_xlat10.x = u_xlat10.x + _Noise_Offset;
    u_xlat10.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat10.xx + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat10.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat10.x;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat10.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat10.xy;
    u_xlat3 = texture(_MaskTex, u_xlat10.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat10.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat10.x;
    u_xlat0 = u_xlat10.x * u_xlat0;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat3.w = u_xlat0 * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat5.x * u_xlat5.x;
    u_xlat0 = u_xlat0 * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat1.y * u_xlat5.x, u_xlat1.z * u_xlat5.y, u_xlat1.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat0);
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
bvec4 u_xlatb4;
vec2 u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat15 = _TimeScale * _BaseTex_Vspeed;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb1 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb1) ? u_xlat6 : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb3.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb3.y ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb3.x) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.x : u_xlat15;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat3.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTex, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat15 = (u_xlatb4.z) ? u_xlat3.z : u_xlat15;
    u_xlat15 = (u_xlatb4.y) ? u_xlat3.y : u_xlat15;
    u_xlat15 = (u_xlatb4.x) ? u_xlat3.x : u_xlat15;
    u_xlat0 = u_xlat15 * u_xlat0;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat0 * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat1.x + u_xlat15;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.w = u_xlat5.x * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat11;
vec2 u_xlat13;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat15 = _TimeScale * _BaseTex_Vspeed;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb1.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb1.x) ? u_xlat6 : u_xlat15;
    u_xlat15 = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat11 = _TimeScale * _NoiseTex_Vspeed;
    u_xlat4.x = _Time.y * u_xlat15 + u_xlat1.x;
    u_xlat4.y = _Time.y * u_xlat11 + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = u_xlat4.xy + vs_TEXCOORD1.xy;
    u_xlat13.xy = (u_xlatb1.x) ? u_xlat13.xy : u_xlat4.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat13.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb15 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat4.w : float(0.0);
    u_xlat15 = (u_xlatb1.w) ? u_xlat4.z : u_xlat15;
    u_xlat15 = (u_xlatb1.z) ? u_xlat4.y : u_xlat15;
    u_xlat15 = (u_xlatb1.y) ? u_xlat4.x : u_xlat15;
    u_xlat15 = u_xlat15 + _Noise_Offset;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat15) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb3.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb3.y ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb3.x) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.x : u_xlat15;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat3.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTex, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat15 = (u_xlatb4.z) ? u_xlat3.z : u_xlat15;
    u_xlat15 = (u_xlatb4.y) ? u_xlat3.y : u_xlat15;
    u_xlat15 = (u_xlatb4.x) ? u_xlat3.x : u_xlat15;
    u_xlat0 = u_xlat15 * u_xlat0;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat0 * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat1.x + u_xlat15;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.w = u_xlat5.x * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
float u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4.x) ? u_xlat12 : u_xlat8;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8 = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5 = (u_xlatb3.z) ? u_xlat2.y : u_xlat5;
    u_xlat5 = (u_xlatb3.y) ? u_xlat2.x : u_xlat5;
    u_xlat5 = (u_xlatb3.x) ? u_xlat2.w : u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
float u_xlat5;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb4.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat8.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat2.y = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat8.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4.x ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.x = u_xlat4.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb8 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat12 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * u_xlat12 + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat12 : u_xlat8.x;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat4.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8.x;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5 = (u_xlatb3.z) ? u_xlat2.y : u_xlat5;
    u_xlat5 = (u_xlatb3.y) ? u_xlat2.x : u_xlat5;
    u_xlat5 = (u_xlatb3.x) ? u_xlat2.w : u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
float u_xlat5;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat15;
float u_xlat16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb0 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat5 = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5 = _Time.y * u_xlat5 + u_xlat10.y;
    u_xlat15 = u_xlat5 + vs_TEXCOORD1.y;
    u_xlat0.y = (u_xlatb0) ? u_xlat15 : u_xlat5;
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.x = _Time.y * u_xlat15 + u_xlat10.x;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.x = (u_xlatb1.x) ? u_xlat15 : u_xlat10.x;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat16 = _ZBufferParams.z * u_xlat16 + _ZBufferParams.w;
    u_xlat16 = float(1.0) / u_xlat16;
    u_xlat16 = u_xlat16 + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5 = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5 = u_xlat5 * u_xlat15 + u_xlat10.x;
    u_xlat3.w = u_xlat5 * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4.x) ? u_xlat12 : u_xlat8;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8 = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.w : u_xlat5.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat1.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb4.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat8.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat2.y = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat8.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4.x ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.x = u_xlat4.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb8 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat12 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * u_xlat12 + u_xlat1.y;
    u_xlat5.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb8) ? u_xlat5.x : u_xlat12;
    u_xlat8.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat12 : u_xlat8.x;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat4.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8.x;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.w : u_xlat5.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat1.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat15;
float u_xlat16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb0 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat0.y = (u_xlatb0) ? u_xlat15 : u_xlat5.x;
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.x = _Time.y * u_xlat15 + u_xlat10.x;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.x = (u_xlatb1.x) ? u_xlat15 : u_xlat10.x;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat16 = _ZBufferParams.z * u_xlat16 + _ZBufferParams.w;
    u_xlat16 = float(1.0) / u_xlat16;
    u_xlat16 = u_xlat16 + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat3.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat5.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlat5.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat5.x + u_xlat10.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb5 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb5) ? u_xlat15 : u_xlat10.x;
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat1.x;
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat16 = _ZBufferParams.z * u_xlat16 + _ZBufferParams.w;
    u_xlat16 = float(1.0) / u_xlat16;
    u_xlat16 = u_xlat16 + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat1.x = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat11 = (-u_xlat6) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat11 + u_xlat6;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.w = u_xlat1.x * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
float u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4.x) ? u_xlat12 : u_xlat8;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8 = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati1]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5 = (u_xlatb3.z) ? u_xlat2.y : u_xlat5;
    u_xlat5 = (u_xlatb3.y) ? u_xlat2.x : u_xlat5;
    u_xlat5 = (u_xlatb3.x) ? u_xlat2.w : u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
float u_xlat5;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb4.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat8.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat2.y = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat8.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4.x ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.x = u_xlat4.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb8 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat12 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * u_xlat12 + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat12 : u_xlat8.x;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat4.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8.x;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati1]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5 = (u_xlatb3.z) ? u_xlat2.y : u_xlat5;
    u_xlat5 = (u_xlatb3.y) ? u_xlat2.x : u_xlat5;
    u_xlat5 = (u_xlatb3.x) ? u_xlat2.w : u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
float u_xlat5;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat15;
float u_xlat16;
int u_xlati16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb0 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat5 = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5 = _Time.y * u_xlat5 + u_xlat10.y;
    u_xlat15 = u_xlat5 + vs_TEXCOORD1.y;
    u_xlat0.y = (u_xlatb0) ? u_xlat15 : u_xlat5;
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.x = _Time.y * u_xlat15 + u_xlat10.x;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.x = (u_xlatb1.x) ? u_xlat15 : u_xlat10.x;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati16 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati16]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat16 = _ZBufferParams.z * u_xlat16 + _ZBufferParams.w;
    u_xlat16 = float(1.0) / u_xlat16;
    u_xlat16 = u_xlat16 + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5 = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5 = u_xlat5 * u_xlat15 + u_xlat10.x;
    u_xlat3.w = u_xlat5 * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4.x) ? u_xlat12 : u_xlat8;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8 = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati1]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.w : u_xlat5.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat1.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb4.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat8.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat2.y = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat8.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4.x ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.x = u_xlat4.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb8 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat12 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * u_xlat12 + u_xlat1.y;
    u_xlat5.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb8) ? u_xlat5.x : u_xlat12;
    u_xlat8.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat12 : u_xlat8.x;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat4.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8.x;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati1]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.w : u_xlat5.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat1.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat15;
float u_xlat16;
int u_xlati16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb0 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat0.y = (u_xlatb0) ? u_xlat15 : u_xlat5.x;
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.x = _Time.y * u_xlat15 + u_xlat10.x;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.x = (u_xlatb1.x) ? u_xlat15 : u_xlat10.x;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati16 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati16]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat16 = _ZBufferParams.z * u_xlat16 + _ZBufferParams.w;
    u_xlat16 = float(1.0) / u_xlat16;
    u_xlat16 = u_xlat16 + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat3.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
int u_xlati16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat5.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlat5.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat5.x + u_xlat10.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb5 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb5) ? u_xlat15 : u_xlat10.x;
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat1.x;
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati16 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati16]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat16 = _ZBufferParams.z * u_xlat16 + _ZBufferParams.w;
    u_xlat16 = float(1.0) / u_xlat16;
    u_xlat16 = u_xlat16 + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat1.x = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat11 = (-u_xlat6) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat11 + u_xlat6;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.w = u_xlat1.x * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
float u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4.x) ? u_xlat12 : u_xlat8;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8 = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5 = (u_xlatb3.z) ? u_xlat2.y : u_xlat5;
    u_xlat5 = (u_xlatb3.y) ? u_xlat2.x : u_xlat5;
    u_xlat5 = (u_xlatb3.x) ? u_xlat2.w : u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
float u_xlat5;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb4.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat8.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat2.y = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat8.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4.x ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.x = u_xlat4.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb8 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat12 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * u_xlat12 + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat12 : u_xlat8.x;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat4.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8.x;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5 = (u_xlatb3.z) ? u_xlat2.y : u_xlat5;
    u_xlat5 = (u_xlatb3.y) ? u_xlat2.x : u_xlat5;
    u_xlat5 = (u_xlatb3.x) ? u_xlat2.w : u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
float u_xlat5;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat15;
float u_xlat16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb0 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat5 = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5 = _Time.y * u_xlat5 + u_xlat10.y;
    u_xlat15 = u_xlat5 + vs_TEXCOORD1.y;
    u_xlat0.y = (u_xlatb0) ? u_xlat15 : u_xlat5;
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.x = _Time.y * u_xlat15 + u_xlat10.x;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.x = (u_xlatb1.x) ? u_xlat15 : u_xlat10.x;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat16 = u_xlat16 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5 = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5 = u_xlat5 * u_xlat15 + u_xlat10.x;
    u_xlat3.w = u_xlat5 * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4.x) ? u_xlat12 : u_xlat8;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8 = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.w : u_xlat5.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat1.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb4.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat8.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat2.y = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat8.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4.x ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.x = u_xlat4.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb8 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat12 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * u_xlat12 + u_xlat1.y;
    u_xlat5.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb8) ? u_xlat5.x : u_xlat12;
    u_xlat8.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat12 : u_xlat8.x;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat4.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8.x;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.w : u_xlat5.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat1.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat15;
float u_xlat16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb0 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat0.y = (u_xlatb0) ? u_xlat15 : u_xlat5.x;
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.x = _Time.y * u_xlat15 + u_xlat10.x;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.x = (u_xlatb1.x) ? u_xlat15 : u_xlat10.x;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat16 = u_xlat16 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10.x;
    u_xlat3.w = u_xlat5.x * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat5.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlat5.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat5.x + u_xlat10.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb5 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb5) ? u_xlat15 : u_xlat10.x;
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat1.x;
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat16 = u_xlat16 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat1.x = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat11 = (-u_xlat6) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat11 + u_xlat6;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.w = u_xlat1.x * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
float u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4.x) ? u_xlat12 : u_xlat8;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8 = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati1]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5 = (u_xlatb3.z) ? u_xlat2.y : u_xlat5;
    u_xlat5 = (u_xlatb3.y) ? u_xlat2.x : u_xlat5;
    u_xlat5 = (u_xlatb3.x) ? u_xlat2.w : u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
float u_xlat5;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb4.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat8.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat2.y = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat8.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4.x ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.x = u_xlat4.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb8 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat12 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * u_xlat12 + u_xlat1.y;
    u_xlat5 = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb8) ? u_xlat5 : u_xlat12;
    u_xlat8.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat12 : u_xlat8.x;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat4.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8.x;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati1]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5 = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5 = (u_xlatb3.z) ? u_xlat2.y : u_xlat5;
    u_xlat5 = (u_xlatb3.y) ? u_xlat2.x : u_xlat5;
    u_xlat5 = (u_xlatb3.x) ? u_xlat2.w : u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
float u_xlat5;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat15;
float u_xlat16;
int u_xlati16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb0 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat5 = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5 = _Time.y * u_xlat5 + u_xlat10.y;
    u_xlat15 = u_xlat5 + vs_TEXCOORD1.y;
    u_xlat0.y = (u_xlatb0) ? u_xlat15 : u_xlat5;
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.x = _Time.y * u_xlat15 + u_xlat10.x;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.x = (u_xlatb1.x) ? u_xlat15 : u_xlat10.x;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati16 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati16]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat16 = u_xlat16 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5 = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10.x) + 1.0;
    u_xlat5 = u_xlat5 * u_xlat15 + u_xlat10.x;
    u_xlat3.w = u_xlat5 * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4.x) ? u_xlat12 : u_xlat8;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8 = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8 : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8 = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati1]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.w : u_xlat5.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat1.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb4.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat8.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat2.y = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat8.xy = u_xlat2.xy + vs_TEXCOORD1.xy;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4.x ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.x = u_xlat4.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb8 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat12 = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat12 = _Time.y * u_xlat12 + u_xlat1.y;
    u_xlat5.x = u_xlat12 + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb8) ? u_xlat5.x : u_xlat12;
    u_xlat8.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.x;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat12 : u_xlat8.x;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat4.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb4.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat8.x = u_xlatb4.y ? u_xlat2.w : float(0.0);
    u_xlat4.x = (u_xlatb4.x) ? u_xlat2.z : u_xlat8.x;
    u_xlat4.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat4.x;
    u_xlat4.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat4.xxx;
    u_xlat4.xyz = u_xlat4.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati1]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat4.xyz = vec3(u_xlat4.x * u_xlat1.y, u_xlat4.y * u_xlat1.z, u_xlat4.z * u_xlat1.w);
    u_xlat4.xyz = u_xlat4.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.z : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.w : u_xlat5.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb3 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat1.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.w = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.w = min(max(u_xlat0.w, 0.0), 1.0);
#else
    u_xlat0.w = clamp(u_xlat0.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec2 u_xlat5;
float u_xlat6;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
int u_xlati16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb0 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat0.y = (u_xlatb0) ? u_xlat15 : u_xlat5.x;
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.x = _Time.y * u_xlat15 + u_xlat10.x;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.x = (u_xlatb1.x) ? u_xlat15 : u_xlat10.x;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati16 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati16]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat16 = u_xlat16 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat1.x = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat11 = (-u_xlat6) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat11 + u_xlat6;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.w = u_xlat1.x * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat7;
vec2 u_xlat10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
int u_xlati16;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat5.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlat5.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat5.x + u_xlat10.y;
    u_xlat5.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = (u_xlatb2.x) ? u_xlat5.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat5.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb5 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb5) ? u_xlat15 : u_xlat10.x;
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat1.x;
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb2.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat1.x = u_xlatb2.y ? u_xlat0.w : float(0.0);
    u_xlat1.x = (u_xlatb2.x) ? u_xlat0.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat1.x;
    u_xlat1.xyz = (u_xlatb1.y) ? u_xlat0.xyz : u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlati16 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati16]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat1.xyz = vec3(u_xlat1.x * u_xlat2.y, u_xlat1.y * u_xlat2.z, u_xlat1.z * u_xlat2.w);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat16 = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat16 = u_xlat16 * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat7.x = (-u_xlat16) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat1.x = u_xlat16 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat16 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat11 = (-u_xlat6) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat11 + u_xlat6;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat0.z : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat0.y : u_xlat10.x;
    u_xlat0.x = (u_xlatb4.y) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.w : u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat2.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat2.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.w = u_xlat1.x * u_xlat0.x;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
bvec2 u_xlatb3;
float u_xlat4;
vec2 u_xlat6;
bool u_xlatb6;
float u_xlat7;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * u_xlat3.x + u_xlat6.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.x = u_xlat3.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat6.x : u_xlat3.x;
    u_xlat3.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat3.x = _Time.y * u_xlat3.x + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb6 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat9 = u_xlat3.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb6) ? u_xlat9 : u_xlat3.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb3.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlatb3.y ? u_xlat2.w : float(0.0);
    u_xlat3.x = (u_xlatb3.x) ? u_xlat2.z : u_xlat6.x;
    u_xlat3.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat3.x;
    u_xlat3.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat3.xxx;
    u_xlatb1 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10 = u_xlatb1.w ? u_xlat2.z : float(0.0);
    u_xlat7 = (u_xlatb1.z) ? u_xlat2.y : u_xlat10;
    u_xlat4 = (u_xlatb1.y) ? u_xlat2.x : u_xlat7;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.w : u_xlat4;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat4 = _DayColor.w * _AlphaBrightness;
    u_xlat1.w = u_xlat1.x * u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat3.xyz = vec3(u_xlat2.y * u_xlat3.x, u_xlat2.z * u_xlat3.y, u_xlat2.w * u_xlat3.z);
    u_xlat3.xyz = u_xlat3.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xxx;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
float u_xlat6;
vec2 u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb10 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat3.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlat3.y = _Time.y * u_xlat1.x + u_xlat10.y;
    u_xlatb4 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat5.xy = (u_xlatb4.x) ? u_xlat5.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex, u_xlat5.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb5.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat5.x = u_xlatb5.x ? u_xlat3.w : float(0.0);
    u_xlat5.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat5.x;
    u_xlat5.x = u_xlat5.x + _Noise_Offset;
    u_xlat5.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat5.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat5.xy);
    u_xlatb5.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb5.y ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb5.x) ? u_xlat2.z : u_xlat10.x;
    u_xlat5.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat5.xxx;
    u_xlatb1 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat2.z : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat2.y : u_xlat16;
    u_xlat6 = (u_xlatb1.y) ? u_xlat2.x : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.w : u_xlat6;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat6 = _DayColor.w * _AlphaBrightness;
    u_xlat1.w = u_xlat1.x * u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat2.y * u_xlat5.x, u_xlat2.z * u_xlat5.y, u_xlat2.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec2 u_xlat3;
bvec4 u_xlatb3;
float u_xlat4;
float u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat4 = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat8 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat12 : u_xlat8;
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb12 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb12) ? u_xlat1.x : u_xlat8;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb8.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat12 = u_xlatb8.y ? u_xlat1.w : float(0.0);
    u_xlat8 = (u_xlatb8.x) ? u_xlat1.z : u_xlat12;
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.x : u_xlat8;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb3.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb3.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb3.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb3.x) ? u_xlat1.w : u_xlat8;
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat8 = u_xlat8 * u_xlat1.x;
    u_xlat12 = _DayColor.w * _AlphaBrightness;
    u_xlat8 = u_xlat8 * u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat12) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + u_xlat12;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat4 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat1.w = u_xlat0.x * u_xlat8;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec2 u_xlat6;
vec2 u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb10 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat15 : u_xlat5.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb5.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb5.y ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb5.x) ? u_xlat2.z : u_xlat10.x;
    u_xlat5.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat5.xxx;
    u_xlatb1 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat2.z : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat2.y : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.w : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat6.xy;
    u_xlat3 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat6.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = _DayColor.w * _AlphaBrightness;
    u_xlat1.w = u_xlat1.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat2.y * u_xlat5.x, u_xlat2.z * u_xlat5.y, u_xlat2.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec2 u_xlat6;
vec2 u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb10 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat3.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlat3.y = _Time.y * u_xlat1.x + u_xlat10.y;
    u_xlatb4 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat5.xy = (u_xlatb4.x) ? u_xlat5.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex, u_xlat5.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb5.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat5.x = u_xlatb5.x ? u_xlat3.w : float(0.0);
    u_xlat5.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat5.x;
    u_xlat5.x = u_xlat5.x + _Noise_Offset;
    u_xlat5.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat5.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat5.xy);
    u_xlatb5.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb5.y ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb5.x) ? u_xlat2.z : u_xlat10.x;
    u_xlat5.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat5.xxx;
    u_xlatb1 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat2.z : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat2.y : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.w : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat6.xy;
    u_xlat3 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat6.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = _DayColor.w * _AlphaBrightness;
    u_xlat1.w = u_xlat1.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat2.y * u_xlat5.x, u_xlat2.z * u_xlat5.y, u_xlat2.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
float u_xlat5;
float u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat5 = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10 = _Time.y * u_xlat10 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10;
    u_xlat10 = _TimeScale * _BaseTex_Vspeed;
    u_xlat10 = _Time.y * u_xlat10 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10 = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10 = (u_xlatb2.w) ? u_xlat1.y : u_xlat10;
    u_xlat10 = (u_xlatb2.z) ? u_xlat1.x : u_xlat10;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat10);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10 = u_xlatb3.w ? u_xlat1.z : float(0.0);
    u_xlat10 = (u_xlatb3.z) ? u_xlat1.y : u_xlat10;
    u_xlat10 = (u_xlatb3.y) ? u_xlat1.x : u_xlat10;
    u_xlat10 = (u_xlatb3.x) ? u_xlat1.w : u_xlat10;
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat10 = u_xlat10 * u_xlat1.x;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat3.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTex, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat15 = (u_xlatb4.z) ? u_xlat3.z : u_xlat15;
    u_xlat15 = (u_xlatb4.y) ? u_xlat3.y : u_xlat15;
    u_xlat15 = (u_xlatb4.x) ? u_xlat3.x : u_xlat15;
    u_xlat10 = u_xlat15 * u_xlat10;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat10 = u_xlat10 * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + u_xlat15;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat5 = u_xlat5 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat5) * u_xlat1.xyz;
    u_xlat1.w = u_xlat0.x * u_xlat10;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
float u_xlat5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat5 = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10.x;
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10.x;
    u_xlat10.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat15 = _TimeScale * _NoiseTex_Vspeed;
    u_xlat4.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlat4.y = _Time.y * u_xlat15 + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = u_xlat4.xy + vs_TEXCOORD1.xy;
    u_xlat10.xy = (u_xlatb1.x) ? u_xlat10.xy : u_xlat4.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat10.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb10.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat10.x = u_xlatb10.x ? u_xlat4.w : float(0.0);
    u_xlat10.x = (u_xlatb1.w) ? u_xlat4.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.z) ? u_xlat4.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.y) ? u_xlat4.x : u_xlat10.x;
    u_xlat10.x = u_xlat10.x + _Noise_Offset;
    u_xlat10.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat10.xx + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat10.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat10.x;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb3.w ? u_xlat1.z : float(0.0);
    u_xlat10.x = (u_xlatb3.z) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb3.y) ? u_xlat1.x : u_xlat10.x;
    u_xlat10.x = (u_xlatb3.x) ? u_xlat1.w : u_xlat10.x;
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat10.x = u_xlat10.x * u_xlat1.x;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat3.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTex, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat15 = (u_xlatb4.z) ? u_xlat3.z : u_xlat15;
    u_xlat15 = (u_xlatb4.y) ? u_xlat3.y : u_xlat15;
    u_xlat15 = (u_xlatb4.x) ? u_xlat3.x : u_xlat15;
    u_xlat10.x = u_xlat15 * u_xlat10.x;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + u_xlat15;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat5 = u_xlat5 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat5) * u_xlat1.xyz;
    u_xlat1.w = u_xlat0.x * u_xlat10.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
float u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10 = _Time.y * u_xlat10 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10;
    u_xlat10 = _TimeScale * _BaseTex_Vspeed;
    u_xlat10 = _Time.y * u_xlat10 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10 = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10 = (u_xlatb2.w) ? u_xlat1.y : u_xlat10;
    u_xlat10 = (u_xlatb2.z) ? u_xlat1.x : u_xlat10;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat10);
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat10 = _DayColor.w * _AlphaBrightness;
    u_xlat3.w = u_xlat0 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat5.x * u_xlat5.x;
    u_xlat0 = u_xlat0 * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat1.y * u_xlat5.x, u_xlat1.z * u_xlat5.y, u_xlat1.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat0);
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10.x;
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10.x;
    u_xlat10.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat15 = _TimeScale * _NoiseTex_Vspeed;
    u_xlat4.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlat4.y = _Time.y * u_xlat15 + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = u_xlat4.xy + vs_TEXCOORD1.xy;
    u_xlat10.xy = (u_xlatb1.x) ? u_xlat10.xy : u_xlat4.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat10.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb10.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat10.x = u_xlatb10.x ? u_xlat4.w : float(0.0);
    u_xlat10.x = (u_xlatb1.w) ? u_xlat4.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.z) ? u_xlat4.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.y) ? u_xlat4.x : u_xlat10.x;
    u_xlat10.x = u_xlat10.x + _Noise_Offset;
    u_xlat10.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat10.xx + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat10.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat10.x;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat3.w = u_xlat0 * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat5.x * u_xlat5.x;
    u_xlat0 = u_xlat0 * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat1.y * u_xlat5.x, u_xlat1.z * u_xlat5.y, u_xlat1.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat0);
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
bvec4 u_xlatb4;
vec2 u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat15 = _TimeScale * _BaseTex_Vspeed;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb1 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb1) ? u_xlat6 : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb3.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb3.y ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb3.x) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.x : u_xlat15;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat0 * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat1.x + u_xlat15;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.w = u_xlat5.x * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10.x;
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10.x;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat10.x;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat10.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat10.xy;
    u_xlat3 = texture(_MaskTex, u_xlat10.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat10.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat10.x;
    u_xlat0 = u_xlat10.x * u_xlat0;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat3.w = u_xlat0 * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat5.x * u_xlat5.x;
    u_xlat0 = u_xlat0 * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat1.y * u_xlat5.x, u_xlat1.z * u_xlat5.y, u_xlat1.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat0);
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10.x;
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10.x;
    u_xlat10.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat15 = _TimeScale * _NoiseTex_Vspeed;
    u_xlat4.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlat4.y = _Time.y * u_xlat15 + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = u_xlat4.xy + vs_TEXCOORD1.xy;
    u_xlat10.xy = (u_xlatb1.x) ? u_xlat10.xy : u_xlat4.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat10.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb10.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat10.x = u_xlatb10.x ? u_xlat4.w : float(0.0);
    u_xlat10.x = (u_xlatb1.w) ? u_xlat4.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.z) ? u_xlat4.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.y) ? u_xlat4.x : u_xlat10.x;
    u_xlat10.x = u_xlat10.x + _Noise_Offset;
    u_xlat10.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat10.xx + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat10.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat10.x;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat10.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat10.xy;
    u_xlat3 = texture(_MaskTex, u_xlat10.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat10.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat10.x;
    u_xlat0 = u_xlat10.x * u_xlat0;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat3.w = u_xlat0 * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat5.x * u_xlat5.x;
    u_xlat0 = u_xlat0 * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat1.y * u_xlat5.x, u_xlat1.z * u_xlat5.y, u_xlat1.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat0);
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
bvec4 u_xlatb4;
vec2 u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat15 = _TimeScale * _BaseTex_Vspeed;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb1 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb1) ? u_xlat6 : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb3.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb3.y ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb3.x) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.x : u_xlat15;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat3.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTex, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat15 = (u_xlatb4.z) ? u_xlat3.z : u_xlat15;
    u_xlat15 = (u_xlatb4.y) ? u_xlat3.y : u_xlat15;
    u_xlat15 = (u_xlatb4.x) ? u_xlat3.x : u_xlat15;
    u_xlat0 = u_xlat15 * u_xlat0;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat0 * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat1.x + u_xlat15;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.w = u_xlat5.x * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat11;
vec2 u_xlat13;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat15 = _TimeScale * _BaseTex_Vspeed;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb1.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb1.x) ? u_xlat6 : u_xlat15;
    u_xlat15 = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat11 = _TimeScale * _NoiseTex_Vspeed;
    u_xlat4.x = _Time.y * u_xlat15 + u_xlat1.x;
    u_xlat4.y = _Time.y * u_xlat11 + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = u_xlat4.xy + vs_TEXCOORD1.xy;
    u_xlat13.xy = (u_xlatb1.x) ? u_xlat13.xy : u_xlat4.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat13.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb15 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat4.w : float(0.0);
    u_xlat15 = (u_xlatb1.w) ? u_xlat4.z : u_xlat15;
    u_xlat15 = (u_xlatb1.z) ? u_xlat4.y : u_xlat15;
    u_xlat15 = (u_xlatb1.y) ? u_xlat4.x : u_xlat15;
    u_xlat15 = u_xlat15 + _Noise_Offset;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat15) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb3.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb3.y ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb3.x) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.x : u_xlat15;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat3.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTex, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat15 = (u_xlatb4.z) ? u_xlat3.z : u_xlat15;
    u_xlat15 = (u_xlatb4.y) ? u_xlat3.y : u_xlat15;
    u_xlat15 = (u_xlatb4.x) ? u_xlat3.x : u_xlat15;
    u_xlat0 = u_xlat15 * u_xlat0;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat0 * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat1.x + u_xlat15;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.w = u_xlat5.x * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
bvec2 u_xlatb3;
float u_xlat4;
vec2 u_xlat6;
bool u_xlatb6;
float u_xlat7;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat3.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * u_xlat3.x + u_xlat6.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.x = u_xlat3.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat6.x : u_xlat3.x;
    u_xlat3.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat3.x = _Time.y * u_xlat3.x + u_xlat6.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb6 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat9 = u_xlat3.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb6) ? u_xlat9 : u_xlat3.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb3.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat6.x = u_xlatb3.y ? u_xlat2.w : float(0.0);
    u_xlat3.x = (u_xlatb3.x) ? u_xlat2.z : u_xlat6.x;
    u_xlat3.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat3.x;
    u_xlat3.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat3.xxx;
    u_xlatb1 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10 = u_xlatb1.w ? u_xlat2.z : float(0.0);
    u_xlat7 = (u_xlatb1.z) ? u_xlat2.y : u_xlat10;
    u_xlat4 = (u_xlatb1.y) ? u_xlat2.x : u_xlat7;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.w : u_xlat4;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat4 = _DayColor.w * _AlphaBrightness;
    u_xlat1.w = u_xlat1.x * u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat3.xyz = vec3(u_xlat2.y * u_xlat3.x, u_xlat2.z * u_xlat3.y, u_xlat2.w * u_xlat3.z);
    u_xlat3.xyz = u_xlat3.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xxx;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
float u_xlat6;
vec2 u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb10 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat3.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlat3.y = _Time.y * u_xlat1.x + u_xlat10.y;
    u_xlatb4 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat5.xy = (u_xlatb4.x) ? u_xlat5.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex, u_xlat5.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb5.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat5.x = u_xlatb5.x ? u_xlat3.w : float(0.0);
    u_xlat5.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat5.x;
    u_xlat5.x = u_xlat5.x + _Noise_Offset;
    u_xlat5.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat5.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat5.xy);
    u_xlatb5.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb5.y ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb5.x) ? u_xlat2.z : u_xlat10.x;
    u_xlat5.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat5.xxx;
    u_xlatb1 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat2.z : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat2.y : u_xlat16;
    u_xlat6 = (u_xlatb1.y) ? u_xlat2.x : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.w : u_xlat6;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat6 = _DayColor.w * _AlphaBrightness;
    u_xlat1.w = u_xlat1.x * u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat2.y * u_xlat5.x, u_xlat2.z * u_xlat5.y, u_xlat2.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec2 u_xlat3;
bvec4 u_xlatb3;
float u_xlat4;
float u_xlat8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat4 = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat8 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12 = u_xlat8 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat12 : u_xlat8;
    u_xlat8 = _TimeScale * _BaseTex_Vspeed;
    u_xlat8 = _Time.y * u_xlat8 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb12 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat8 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb12) ? u_xlat1.x : u_xlat8;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb8.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat12 = u_xlatb8.y ? u_xlat1.w : float(0.0);
    u_xlat8 = (u_xlatb8.x) ? u_xlat1.z : u_xlat12;
    u_xlat8 = (u_xlatb2.w) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb2.z) ? u_xlat1.x : u_xlat8;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat8);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8 = u_xlatb3.w ? u_xlat1.z : float(0.0);
    u_xlat8 = (u_xlatb3.z) ? u_xlat1.y : u_xlat8;
    u_xlat8 = (u_xlatb3.y) ? u_xlat1.x : u_xlat8;
    u_xlat8 = (u_xlatb3.x) ? u_xlat1.w : u_xlat8;
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat8 = u_xlat8 * u_xlat1.x;
    u_xlat12 = _DayColor.w * _AlphaBrightness;
    u_xlat8 = u_xlat8 * u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat12) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + u_xlat12;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat4 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat1.w = u_xlat0.x * u_xlat8;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec2 u_xlat6;
vec2 u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb10 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat15 : u_xlat5.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlatb5.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb5.y ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb5.x) ? u_xlat2.z : u_xlat10.x;
    u_xlat5.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat5.xxx;
    u_xlatb1 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat2.z : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat2.y : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.w : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat6.xy;
    u_xlat3 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat6.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = _DayColor.w * _AlphaBrightness;
    u_xlat1.w = u_xlat1.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat2.y * u_xlat5.x, u_xlat2.z * u_xlat5.y, u_xlat2.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec2 u_xlat6;
vec2 u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat0.x = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.x = u_xlat5.x + vs_TEXCOORD1.x;
    u_xlat2.x = (u_xlatb1.x) ? u_xlat10.x : u_xlat5.x;
    u_xlat5.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat5.x = _Time.y * u_xlat5.x + u_xlat10.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb10 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat15 = u_xlat5.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb10) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat10.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat3.x = _Time.y * u_xlat5.x + u_xlat10.x;
    u_xlat3.y = _Time.y * u_xlat1.x + u_xlat10.y;
    u_xlatb4 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat5.xy = u_xlat3.xy + vs_TEXCOORD1.xy;
    u_xlat5.xy = (u_xlatb4.x) ? u_xlat5.xy : u_xlat3.xy;
    u_xlat3 = texture(_NoiseTex, u_xlat5.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb5.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat5.x = u_xlatb5.x ? u_xlat3.w : float(0.0);
    u_xlat5.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat5.x;
    u_xlat5.x = u_xlat5.x + _Noise_Offset;
    u_xlat5.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat5.xx + u_xlat2.xy;
    u_xlat2 = texture(_BaseTex, u_xlat5.xy);
    u_xlatb5.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat10.x = u_xlatb5.y ? u_xlat2.w : float(0.0);
    u_xlat5.x = (u_xlatb5.x) ? u_xlat2.z : u_xlat10.x;
    u_xlat5.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat5.x;
    u_xlat5.xyz = (u_xlatb1.y) ? u_xlat2.xyz : u_xlat5.xxx;
    u_xlatb1 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat2.z : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat2.y : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.w : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat6.xy;
    u_xlat3 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat6.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = _DayColor.w * _AlphaBrightness;
    u_xlat1.w = u_xlat1.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat5.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat2.y * u_xlat5.x, u_xlat2.z * u_xlat5.y, u_xlat2.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
bvec4 u_xlatb4;
float u_xlat5;
float u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5 = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10 = _Time.y * u_xlat10 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10;
    u_xlat10 = _TimeScale * _BaseTex_Vspeed;
    u_xlat10 = _Time.y * u_xlat10 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10 = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10 = (u_xlatb2.w) ? u_xlat1.y : u_xlat10;
    u_xlat10 = (u_xlatb2.z) ? u_xlat1.x : u_xlat10;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat10);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10 = u_xlatb3.w ? u_xlat1.z : float(0.0);
    u_xlat10 = (u_xlatb3.z) ? u_xlat1.y : u_xlat10;
    u_xlat10 = (u_xlatb3.y) ? u_xlat1.x : u_xlat10;
    u_xlat10 = (u_xlatb3.x) ? u_xlat1.w : u_xlat10;
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat10 = u_xlat10 * u_xlat1.x;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat3.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTex, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat15 = (u_xlatb4.z) ? u_xlat3.z : u_xlat15;
    u_xlat15 = (u_xlatb4.y) ? u_xlat3.y : u_xlat15;
    u_xlat15 = (u_xlatb4.x) ? u_xlat3.x : u_xlat15;
    u_xlat10 = u_xlat15 * u_xlat10;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat10 = u_xlat10 * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + u_xlat15;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat5 = u_xlat5 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat5) * u_xlat1.xyz;
    u_xlat1.w = u_xlat0.x * u_xlat10;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
float u_xlat5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5 = (-u_xlat0.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10.x;
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10.x;
    u_xlat10.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat15 = _TimeScale * _NoiseTex_Vspeed;
    u_xlat4.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlat4.y = _Time.y * u_xlat15 + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = u_xlat4.xy + vs_TEXCOORD1.xy;
    u_xlat10.xy = (u_xlatb1.x) ? u_xlat10.xy : u_xlat4.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat10.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb10.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat10.x = u_xlatb10.x ? u_xlat4.w : float(0.0);
    u_xlat10.x = (u_xlatb1.w) ? u_xlat4.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.z) ? u_xlat4.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.y) ? u_xlat4.x : u_xlat10.x;
    u_xlat10.x = u_xlat10.x + _Noise_Offset;
    u_xlat10.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat10.xx + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat10.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat10.x;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb3.w ? u_xlat1.z : float(0.0);
    u_xlat10.x = (u_xlatb3.z) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb3.y) ? u_xlat1.x : u_xlat10.x;
    u_xlat10.x = (u_xlatb3.x) ? u_xlat1.w : u_xlat10.x;
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat10.x = u_xlat10.x * u_xlat1.x;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat3.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTex, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat15 = (u_xlatb4.z) ? u_xlat3.z : u_xlat15;
    u_xlat15 = (u_xlatb4.y) ? u_xlat3.y : u_xlat15;
    u_xlat15 = (u_xlatb4.x) ? u_xlat3.x : u_xlat15;
    u_xlat10.x = u_xlat15 * u_xlat10.x;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat10.x = u_xlat10.x * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + u_xlat15;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat5 = u_xlat5 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat5) * u_xlat1.xyz;
    u_xlat1.w = u_xlat0.x * u_xlat10.x;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
float u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10 = _Time.y * u_xlat10 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10;
    u_xlat10 = _TimeScale * _BaseTex_Vspeed;
    u_xlat10 = _Time.y * u_xlat10 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10 = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10 = (u_xlatb2.w) ? u_xlat1.y : u_xlat10;
    u_xlat10 = (u_xlatb2.z) ? u_xlat1.x : u_xlat10;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat10);
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat10 = _DayColor.w * _AlphaBrightness;
    u_xlat3.w = u_xlat0 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat5.x * u_xlat5.x;
    u_xlat0 = u_xlat0 * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat1.y * u_xlat5.x, u_xlat1.z * u_xlat5.y, u_xlat1.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat0);
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10.x;
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10.x;
    u_xlat10.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat15 = _TimeScale * _NoiseTex_Vspeed;
    u_xlat4.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlat4.y = _Time.y * u_xlat15 + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = u_xlat4.xy + vs_TEXCOORD1.xy;
    u_xlat10.xy = (u_xlatb1.x) ? u_xlat10.xy : u_xlat4.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat10.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb10.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat10.x = u_xlatb10.x ? u_xlat4.w : float(0.0);
    u_xlat10.x = (u_xlatb1.w) ? u_xlat4.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.z) ? u_xlat4.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.y) ? u_xlat4.x : u_xlat10.x;
    u_xlat10.x = u_xlat10.x + _Noise_Offset;
    u_xlat10.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat10.xx + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat10.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat10.x;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat3.w = u_xlat0 * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat5.x * u_xlat5.x;
    u_xlat0 = u_xlat0 * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat1.y * u_xlat5.x, u_xlat1.z * u_xlat5.y, u_xlat1.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat0);
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
bvec4 u_xlatb4;
vec2 u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat15 = _TimeScale * _BaseTex_Vspeed;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb1 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb1) ? u_xlat6 : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb3.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb3.y ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb3.x) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.x : u_xlat15;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat0 * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat1.x + u_xlat15;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.w = u_xlat5.x * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10.x;
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10.x;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat10.x;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat10.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat10.xy;
    u_xlat3 = texture(_MaskTex, u_xlat10.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat10.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat10.x;
    u_xlat0 = u_xlat10.x * u_xlat0;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat3.w = u_xlat0 * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat5.x * u_xlat5.x;
    u_xlat0 = u_xlat0 * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat1.y * u_xlat5.x, u_xlat1.z * u_xlat5.y, u_xlat1.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat0);
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec2 u_xlat10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat5.x = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15 = u_xlat10.x + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat15 : u_xlat10.x;
    u_xlat10.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat10.x = _Time.y * u_xlat10.x + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb15 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat1.x = u_xlat10.x + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb15) ? u_xlat1.x : u_xlat10.x;
    u_xlat10.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat15 = _TimeScale * _NoiseTex_Vspeed;
    u_xlat4.x = _Time.y * u_xlat10.x + u_xlat1.x;
    u_xlat4.y = _Time.y * u_xlat15 + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = u_xlat4.xy + vs_TEXCOORD1.xy;
    u_xlat10.xy = (u_xlatb1.x) ? u_xlat10.xy : u_xlat4.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat10.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb10.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat10.x = u_xlatb10.x ? u_xlat4.w : float(0.0);
    u_xlat10.x = (u_xlatb1.w) ? u_xlat4.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.z) ? u_xlat4.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb1.y) ? u_xlat4.x : u_xlat10.x;
    u_xlat10.x = u_xlat10.x + _Noise_Offset;
    u_xlat10.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat10.xx + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat10.xy);
    u_xlatb10.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 3.0, 4.0)).xy;
    u_xlat15 = u_xlatb10.y ? u_xlat1.w : float(0.0);
    u_xlat10.x = (u_xlatb10.x) ? u_xlat1.z : u_xlat15;
    u_xlat10.x = (u_xlatb2.w) ? u_xlat1.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb2.z) ? u_xlat1.x : u_xlat10.x;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat10.xxx;
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat10.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat10.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat10.xy;
    u_xlat3 = texture(_MaskTex, u_xlat10.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat10.x = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat10.x = (u_xlatb4.z) ? u_xlat3.z : u_xlat10.x;
    u_xlat10.x = (u_xlatb4.y) ? u_xlat3.y : u_xlat10.x;
    u_xlat10.x = (u_xlatb4.x) ? u_xlat3.x : u_xlat10.x;
    u_xlat0 = u_xlat10.x * u_xlat0;
    u_xlat10.x = _DayColor.w * _AlphaBrightness;
    u_xlat3.w = u_xlat0 * u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat5.x * u_xlat5.x;
    u_xlat0 = u_xlat0 * _InteractionBrightness + 1.0;
    u_xlat5.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat5.xyz = vec3(u_xlat1.y * u_xlat5.x, u_xlat1.z * u_xlat5.y, u_xlat1.w * u_xlat5.z);
    u_xlat5.xyz = u_xlat5.xyz * _DayColor.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat0);
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
bvec4 u_xlatb4;
vec2 u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat15 = _TimeScale * _BaseTex_Vspeed;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb1 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb1) ? u_xlat6 : u_xlat15;
    u_xlat1 = texture(_BaseTex, u_xlat3.xy);
    u_xlatb3.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb3.y ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb3.x) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.x : u_xlat15;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat3.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTex, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat15 = (u_xlatb4.z) ? u_xlat3.z : u_xlat15;
    u_xlat15 = (u_xlatb4.y) ? u_xlat3.y : u_xlat15;
    u_xlat15 = (u_xlatb4.x) ? u_xlat3.x : u_xlat15;
    u_xlat0 = u_xlat15 * u_xlat0;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat0 * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat1.x + u_xlat15;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.w = u_xlat5.x * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _InteractionSize;
uniform 	float _InteractionBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	float _ColorBrightness;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesUVmove_LightningArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesUVmove_Lightning {
	miHoYoParticlesUVmove_LightningArray_Type miHoYoParticlesUVmove_LightningArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat11;
vec2 u_xlat13;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = (-u_xlat5.x) + _InteractionSize;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = _TimeScale * _BaseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.x;
    u_xlatb2 = equal(vec4(_BaseTexURandomToggle, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.x = u_xlat15 + vs_TEXCOORD1.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat15;
    u_xlat15 = _TimeScale * _BaseTex_Vspeed;
    u_xlat15 = _Time.y * u_xlat15 + u_xlat1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb1.x = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat6 = u_xlat15 + vs_TEXCOORD1.y;
    u_xlat3.y = (u_xlatb1.x) ? u_xlat6 : u_xlat15;
    u_xlat15 = _TimeScale * _NoiseTex_Uspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat11 = _TimeScale * _NoiseTex_Vspeed;
    u_xlat4.x = _Time.y * u_xlat15 + u_xlat1.x;
    u_xlat4.y = _Time.y * u_xlat11 + u_xlat1.y;
    u_xlatb1 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = u_xlat4.xy + vs_TEXCOORD1.xy;
    u_xlat13.xy = (u_xlatb1.x) ? u_xlat13.xy : u_xlat4.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat13.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb15 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat15 = u_xlatb15 ? u_xlat4.w : float(0.0);
    u_xlat15 = (u_xlatb1.w) ? u_xlat4.z : u_xlat15;
    u_xlat15 = (u_xlatb1.z) ? u_xlat4.y : u_xlat15;
    u_xlat15 = (u_xlatb1.y) ? u_xlat4.x : u_xlat15;
    u_xlat15 = u_xlat15 + _Noise_Offset;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat15) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb3.xy = equal(vec4(_BaseTexColorChannelSwitch), vec4(3.0, 4.0, 0.0, 0.0)).xy;
    u_xlat15 = u_xlatb3.y ? u_xlat1.w : float(0.0);
    u_xlat15 = (u_xlatb3.x) ? u_xlat1.z : u_xlat15;
    u_xlat15 = (u_xlatb2.w) ? u_xlat1.y : u_xlat15;
    u_xlat15 = (u_xlatb2.z) ? u_xlat1.x : u_xlat15;
    u_xlat2.xyz = (u_xlatb2.y) ? u_xlat1.xyz : vec3(u_xlat15);
    u_xlat3 = vs_COLOR0.wxyz * miHoYoParticlesUVmove_LightningArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0 = u_xlatb4.w ? u_xlat1.z : float(0.0);
    u_xlat0 = (u_xlatb4.z) ? u_xlat1.y : u_xlat0;
    u_xlat0 = (u_xlatb4.y) ? u_xlat1.x : u_xlat0;
    u_xlat0 = (u_xlatb4.x) ? u_xlat1.w : u_xlat0;
    u_xlat1 = u_xlat3 * _MainColor.wxyz;
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat3.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat3 = texture(_MaskTex, u_xlat3.xy);
    u_xlatb4 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat15 = u_xlatb4.w ? u_xlat3.w : float(0.0);
    u_xlat15 = (u_xlatb4.z) ? u_xlat3.z : u_xlat15;
    u_xlat15 = (u_xlatb4.y) ? u_xlat3.y : u_xlat15;
    u_xlat15 = (u_xlatb4.x) ? u_xlat3.x : u_xlat15;
    u_xlat0 = u_xlat15 * u_xlat0;
    u_xlat15 = _DayColor.w * _AlphaBrightness;
    u_xlat0 = u_xlat0 * u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat15) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat1.x + u_xlat15;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * _InteractionBrightness + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColorBrightness, _ColorBrightness, _ColorBrightness));
    u_xlat1.xyz = vec3(u_xlat1.y * u_xlat2.x, u_xlat1.z * u_xlat2.y, u_xlat1.w * u_xlat2.z);
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.w = u_xlat5.x * u_xlat0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
}
}
 Pass {
  Name "DISTORTIONVECTORS"
  Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "DISTORTIONVECTORS" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  Cull Off
  GpuProgramID 81977
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.497999996, 0.497999996, 0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.497999996, 0.497999996, 0.0, 1.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
}
}
 Pass {
  Name "MOTIONVECTORS"
  Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "MOTIONVECTORS" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  Cull Off
  GpuProgramID 132221
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	vec4 _MainColor;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==3.0;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4 = _TimeScale * _BaseTex_Uspeed;
    u_xlat4 = _Time.y * u_xlat4 + u_xlat1.x;
    u_xlat8.x = u_xlat4 + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat2.z : float(0.0);
    u_xlat0.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat2.w : u_xlat0.x;
    u_xlat4 = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat4 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	vec4 _MainColor;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat4.x + u_xlat8.x;
    u_xlat4.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat4.x + u_xlat8.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb1.x = _BaseTexAlphaChannelSwitch==3.0;
#endif
    u_xlat8.x = u_xlatb1.x ? u_xlat0.z : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat4.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.w : u_xlat0.x;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _BaseTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==3.0;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat2.z : float(0.0);
    u_xlat0.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat2.w : u_xlat0.x;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==3.0;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat2.z : float(0.0);
    u_xlat0.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat2.w : u_xlat0.x;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat4.xy;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat4.x + u_xlat8.x;
    u_xlat4.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat4.x + u_xlat8.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb1.x = _BaseTexAlphaChannelSwitch==3.0;
#endif
    u_xlat8.x = u_xlatb1.x ? u_xlat0.z : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat4.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.w : u_xlat0.x;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat4.xy;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==3.0;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat2.z : float(0.0);
    u_xlat0.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat2.w : u_xlat0.x;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat4.xy;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat4.x + u_xlat8.x;
    u_xlat4.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat4.x + u_xlat8.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb1.x = _BaseTexAlphaChannelSwitch==3.0;
#endif
    u_xlat8.x = u_xlatb1.x ? u_xlat0.z : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat4.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.w : u_xlat0.x;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat4.xy;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	vec4 _MainColor;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==3.0;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4 = _TimeScale * _BaseTex_Uspeed;
    u_xlat4 = _Time.y * u_xlat4 + u_xlat1.x;
    u_xlat8.x = u_xlat4 + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat2.z : float(0.0);
    u_xlat0.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat2.w : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4 = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4 = u_xlat4 * _MainColor.w;
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat4 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	vec4 _MainColor;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat4.x + u_xlat8.x;
    u_xlat4.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat4.x + u_xlat8.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb1.x = _BaseTexAlphaChannelSwitch==3.0;
#endif
    u_xlat8.x = u_xlatb1.x ? u_xlat0.z : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat4.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.w : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==3.0;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat2.z : float(0.0);
    u_xlat0.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat2.w : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==3.0;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat2.z : float(0.0);
    u_xlat0.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat2.w : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat4.xy;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat4.x + u_xlat8.x;
    u_xlat4.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat4.x + u_xlat8.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb1.x = _BaseTexAlphaChannelSwitch==3.0;
#endif
    u_xlat8.x = u_xlatb1.x ? u_xlat0.z : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat4.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.w : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat4.xy;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==3.0;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat2.z : float(0.0);
    u_xlat0.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat2.w : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat4.xy;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat4.x + u_xlat8.x;
    u_xlat4.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat4.x + u_xlat8.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb1.x = _BaseTexAlphaChannelSwitch==3.0;
#endif
    u_xlat8.x = u_xlatb1.x ? u_xlat0.z : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat4.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.w : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat4.xy;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	vec4 _MainColor;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==3.0;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4 = _TimeScale * _BaseTex_Uspeed;
    u_xlat4 = _Time.y * u_xlat4 + u_xlat1.x;
    u_xlat8.x = u_xlat4 + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat2.z : float(0.0);
    u_xlat0.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat2.w : u_xlat0.x;
    u_xlat4 = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat4 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	vec4 _MainColor;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat4.x + u_xlat8.x;
    u_xlat4.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat4.x + u_xlat8.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb1.x = _BaseTexAlphaChannelSwitch==3.0;
#endif
    u_xlat8.x = u_xlatb1.x ? u_xlat0.z : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat4.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.w : u_xlat0.x;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _BaseTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==3.0;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat2.z : float(0.0);
    u_xlat0.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat2.w : u_xlat0.x;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==3.0;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat2.z : float(0.0);
    u_xlat0.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat2.w : u_xlat0.x;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat4.xy;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat4.x + u_xlat8.x;
    u_xlat4.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat4.x + u_xlat8.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb1.x = _BaseTexAlphaChannelSwitch==3.0;
#endif
    u_xlat8.x = u_xlatb1.x ? u_xlat0.z : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat4.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.w : u_xlat0.x;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat4.xy;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==3.0;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat2.z : float(0.0);
    u_xlat0.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat2.w : u_xlat0.x;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat4.xy;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat4.x + u_xlat8.x;
    u_xlat4.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat4.x + u_xlat8.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb1.x = _BaseTexAlphaChannelSwitch==3.0;
#endif
    u_xlat8.x = u_xlatb1.x ? u_xlat0.z : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat4.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.w : u_xlat0.x;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat4.xy;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	vec4 _MainColor;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==3.0;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4 = _TimeScale * _BaseTex_Uspeed;
    u_xlat4 = _Time.y * u_xlat4 + u_xlat1.x;
    u_xlat8.x = u_xlat4 + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat2.z : float(0.0);
    u_xlat0.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat2.w : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4 = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4 = u_xlat4 * _MainColor.w;
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat4 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	vec4 _MainColor;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat4.x + u_xlat8.x;
    u_xlat4.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat4.x + u_xlat8.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb1.x = _BaseTexAlphaChannelSwitch==3.0;
#endif
    u_xlat8.x = u_xlatb1.x ? u_xlat0.z : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat4.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.w : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==3.0;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat2.z : float(0.0);
    u_xlat0.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat2.w : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==3.0;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat2.z : float(0.0);
    u_xlat0.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat2.w : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat4.xy;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat4.x + u_xlat8.x;
    u_xlat4.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat4.x + u_xlat8.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb1.x = _BaseTexAlphaChannelSwitch==3.0;
#endif
    u_xlat8.x = u_xlatb1.x ? u_xlat0.z : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat4.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.w : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat4.xy;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==3.0;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat2 = texture(_BaseTex, u_xlat2.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat2.z : float(0.0);
    u_xlat0.x = (u_xlatb1.w) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat2.w : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat4.xy;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	float _AlphaBrightness;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	mediump float _BaseTexURandomToggle;
uniform 	float _BaseTex_Uspeed;
uniform 	float _TimeScale;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump float _BaseTexVRandomToggle;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	vec4 _MainColor;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	vec4 _MaskTex_ST;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
vec2 u_xlat2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.x = _TimeScale * _NoiseTex_Uspeed;
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * u_xlat4.x + u_xlat8.x;
    u_xlat4.x = _TimeScale * _NoiseTex_Vspeed;
    u_xlat1.y = _Time.y * u_xlat4.x + u_xlat8.y;
    u_xlat4.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + _Noise_Offset;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexVRandomToggle==1.0);
#else
    u_xlatb4 = _BaseTexVRandomToggle==1.0;
#endif
    u_xlat8.x = _TimeScale * _BaseTex_Vspeed;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat8.x = _Time.y * u_xlat8.x + u_xlat1.y;
    u_xlat12 = u_xlat8.x + vs_TEXCOORD1.y;
    u_xlat2.y = (u_xlatb4) ? u_xlat12 : u_xlat8.x;
    u_xlat4.x = _TimeScale * _BaseTex_Uspeed;
    u_xlat4.x = _Time.y * u_xlat4.x + u_xlat1.x;
    u_xlat8.x = u_xlat4.x + vs_TEXCOORD1.x;
    u_xlatb1 = equal(vec4(_BaseTexURandomToggle, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch, _BaseTexAlphaChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.x = (u_xlatb1.x) ? u_xlat8.x : u_xlat4.x;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_BaseTexAlphaChannelSwitch==3.0);
#else
    u_xlatb1.x = _BaseTexAlphaChannelSwitch==3.0;
#endif
    u_xlat8.x = u_xlatb1.x ? u_xlat0.z : float(0.0);
    u_xlat4.x = (u_xlatb1.w) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.z) ? u_xlat0.x : u_xlat4.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.w : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat4.xy;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * u_xlat4.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
}
}
}
CustomEditor "MiHoYoASEMaterialInspector"
}