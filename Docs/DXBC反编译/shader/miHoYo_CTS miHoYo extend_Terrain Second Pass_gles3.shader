//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/CTS miHoYo extend/Terrain Second Pass" {
Properties {
__dirty ("", Float) = 1
[Header(Global)] _UV_Mix_Power ("UV_Mix_Power", Range(0.01, 10)) = 4
_UV_Mix_Start_Distance ("UV_Mix_Start_Distance", Range(0, 100000)) = 400
_UV_Mix_Range ("UV_Mix_Range", Range(1, 1000)) = 100
_Terrain_Smoothness ("Terrain_Smoothness", Range(0, 2)) = 1
_Terrain_Specular ("Terrain_Specular", Range(0, 3)) = 1
_Texture_Array_Normal ("Texture_Array_Normal", 2DArray) = "" { }
_Texture_Array_Albedo ("Texture_Array_Albedo", 2DArray) = "" { }
_Texture_Splat_1 ("Texture_Splat_1", 2D) = "black" { }
_Texture_Splat_2 ("Texture_Splat_2", 2D) = "black" { }
_SSAO_Intensity ("SSAO_Intensity", Range(0, 1)) = 1
[Header(Albedo Textures)] _Texture_1_Albedo ("Texture_1_Albedo", 2D) = "black" { }
_Texture_2_Albedo ("Texture_2_Albedo", 2D) = "black" { }
_Texture_3_Albedo ("Texture_3_Albedo", 2D) = "black" { }
_Texture_4_Albedo ("Texture_4_Albedo", 2D) = "black" { }
_Texture_5_Albedo ("Texture_5_Albedo", 2D) = "black" { }
_Texture_6_Albedo ("Texture_6_Albedo", 2D) = "black" { }
_Texture_7_Albedo ("Texture_7_Albedo", 2D) = "black" { }
_Texture_8_Albedo ("Texture_8_Albedo", 2D) = "black" { }
[Header(Normal Textures)] _Texture_1_Normal ("Texture_1_Normal", 2D) = "black" { }
_Texture_2_Normal ("Texture_2_Normal", 2D) = "black" { }
_Texture_3_Normal ("Texture_3_Normal", 2D) = "black" { }
_Texture_4_Normal ("Texture_4_Normal", 2D) = "black" { }
_Texture_5_Normal ("Texture_5_Normal", 2D) = "black" { }
_Texture_6_Normal ("Texture_6_Normal", 2D) = "black" { }
_Texture_7_Normal ("Texture_7_Normal", 2D) = "black" { }
_Texture_8_Normal ("Texture_8_Normal", 2D) = "black" { }
[Header(Tiling)] _Texture_1_Tiling ("Texture_1_Tiling", Range(0.0001, 100)) = 15
_Texture_2_Tiling ("Texture_2_Tiling", Range(0.0001, 100)) = 15
_Texture_3_Tiling ("Texture_3_Tiling", Range(0.0001, 100)) = 15
_Texture_4_Tiling ("Texture_4_Tiling", Range(0.0001, 100)) = 15
_Texture_5_Tiling ("Texture_5_Tiling", Range(0.0001, 100)) = 15
_Texture_6_Tiling ("Texture_6_Tiling", Range(0.0001, 100)) = 15
_Texture_7_Tiling ("Texture_7_Tiling", Range(0.0001, 100)) = 15
_Texture_8_Tiling ("Texture_8_Tiling", Range(0.0001, 100)) = 15
[Header(Far Tiling)] _Texture_1_Far_Multiplier ("Texture_1_Far_Multiplier", Range(0, 10)) = 3
_Texture_2_Far_Multiplier ("Texture_2_Far_Multiplier", Range(0, 10)) = 3
_Texture_3_Far_Multiplier ("Texture_3_Far_Multiplier", Range(0, 10)) = 3
_Texture_4_Far_Multiplier ("Texture_4_Far_Multiplier", Range(0, 10)) = 3
_Texture_5_Far_Multiplier ("Texture_5_Far_Multiplier", Range(0, 10)) = 3
_Texture_6_Far_Multiplier ("Texture_6_Far_Multiplier", Range(0, 10)) = 3
_Texture_7_Far_Multiplier ("Texture_7_Far_Multiplier", Range(0, 10)) = 3
_Texture_8_Far_Multiplier ("Texture_8_Far_Multiplier", Range(0, 10)) = 3
[Header(Detail Normal)] _Perlin_Normal_Tex ("Perlin_Normal_Tex", 2D) = "black" { }
_Perlin_Normal_Tiling_Close ("Perlin_Normal_Tiling_Close", Range(0.01, 100)) = 1
_Perlin_Normal_Tiling_Far ("Perlin_Normal_Tiling_Far", Range(0.01, 100)) = 1
_Perlin_Normal_Power ("Perlin_Normal_Power", Range(0, 10)) = 1
_Perlin_Normal_Power_Close ("Perlin_Normal_Power_Close", Range(0, 10)) = 0.5
_Texture_1_Perlin_Power ("Texture_1_Perlin_Power", Range(0, 1)) = 0
_Texture_2_Perlin_Power ("Texture_2_Perlin_Power", Range(0, 1)) = 0
_Texture_3_Perlin_Power ("Texture_3_Perlin_Power", Range(0, 1)) = 0
_Texture_4_Perlin_Power ("Texture_4_Perlin_Power", Range(0, 1)) = 0
_Texture_5_Perlin_Power ("Texture_5_Perlin_Power", Range(0, 1)) = 0
_Texture_6_Perlin_Power ("Texture_6_Perlin_Power", Range(0, 1)) = 0
_Texture_7_Perlin_Power ("Texture_7_Perlin_Power", Range(0, 1)) = 0
_Texture_8_Perlin_Power ("Texture_8_Perlin_Power", Range(0, 1)) = 0
[Header(Normal)] _Texture_1_Normal_Power ("Texture_1_Normal_Power", Range(0, 5)) = 1
_Texture_2_Normal_Power ("Texture_2_Normal_Power", Range(0, 5)) = 1
_Texture_3_Normal_Power ("Texture_3_Normal_Power", Range(0, 5)) = 1
_Texture_4_Normal_Power ("Texture_4_Normal_Power", Range(0, 5)) = 1
_Texture_5_Normal_Power ("Texture_5_Normal_Power", Range(0, 5)) = 1
_Texture_6_Normal_Power ("Texture_6_Normal_Power", Range(0, 5)) = 1
_Texture_7_Normal_Power ("Texture_7_Normal_Power", Range(0, 5)) = 1
_Texture_8_Normal_Power ("Texture_8_Normal_Power", Range(0, 5)) = 1
[Header(Metallic)] _Texture_1_Metallic ("Texutre_1_Metallic", Range(0, 1)) = 0
_Texture_2_Metallic ("Texutre_2_Metallic", Range(0, 1)) = 0
_Texture_3_Metallic ("Texutre_3_Metallic", Range(0, 1)) = 0
_Texture_4_Metallic ("Texutre_4_Metallic", Range(0, 1)) = 0
_Texture_5_Metallic ("Texutre_5_Metallic", Range(0, 1)) = 0
_Texture_6_Metallic ("Texutre_6_Metallic", Range(0, 1)) = 0
_Texture_7_Metallic ("Texutre_7_Metallic", Range(0, 1)) = 0
_Texture_8_Metallic ("Texutre_8_Metallic", Range(0, 1)) = 0
[Header(Smoothness)] _Texture_1_Smoothness ("Texutre_1_Smoothness", Range(0, 1)) = 0
_Texture_2_Smoothness ("Texutre_2_Smoothness", Range(0, 1)) = 0
_Texture_3_Smoothness ("Texutre_3_Smoothness", Range(0, 1)) = 0
_Texture_4_Smoothness ("Texutre_4_Smoothness", Range(0, 1)) = 0
_Texture_5_Smoothness ("Texutre_5_Smoothness", Range(0, 1)) = 0
_Texture_6_Smoothness ("Texutre_6_Smoothness", Range(0, 1)) = 0
_Texture_7_Smoothness ("Texutre_7_Smoothness", Range(0, 1)) = 0
_Texture_8_Smoothness ("Texutre_8_Smoothness", Range(0, 1)) = 0
[Header(Tint Color)] _Texture_1_Color ("Texture_1_Color", Color) = (1,1,1,1)
_Texture_2_Color ("Texture_2_Color", Color) = (1,1,1,1)
_Texture_3_Color ("Texture_3_Color", Color) = (1,1,1,1)
_Texture_4_Color ("Texture_4_Color", Color) = (1,1,1,1)
_Texture_5_Color ("Texture_5_Color", Color) = (1,1,1,1)
_Texture_6_Color ("Texture_6_Color", Color) = (1,1,1,1)
_Texture_7_Color ("Texture_7_Color", Color) = (1,1,1,1)
_Texture_8_Color ("Texture_8_Color", Color) = (1,1,1,1)
[Header(Index)] _Texture_Perlin_Normal_Index ("Texture_Perlin_Normal_Index", Float) = -1
_Texture_1_Albedo_Index ("Texture_1_Albedo_Index", Range(-1, 100)) = -1
_Texture_1_Normal_Index ("Texture_1_Normal_Index", Range(-1, 100)) = -1
_Texture_2_Albedo_Index ("Texture_2_Albedo_Index", Range(-1, 100)) = -1
_Texture_2_Normal_Index ("Texture_2_Normal_Index", Range(-1, 100)) = -1
_Texture_3_Albedo_Index ("Texture_3_Albedo_Index", Range(-1, 100)) = -1
_Texture_3_Normal_Index ("Texture_3_Normal_Index", Range(-1, 100)) = -1
_Texture_4_Albedo_Index ("Texture_4_Albedo_Index", Range(-1, 100)) = -1
_Texture_4_Normal_Index ("Texture_4_Normal_Index", Range(-1, 100)) = -1
_Texture_5_Albedo_Index ("Texture_5_Albedo_Index", Range(-1, 100)) = -1
_Texture_5_Normal_Index ("Texture_5_Normal_Index", Range(-1, 100)) = -1
_Texture_6_Albedo_Index ("Texture_6_Albedo_Index", Range(-1, 100)) = -1
_Texture_6_Normal_Index ("Texture_6_Normal_Index", Range(-1, 100)) = -1
_Texture_7_Albedo_Index ("Texture_7_Albedo_Index", Range(-1, 100)) = -1
_Texture_7_Normal_Index ("Texture_7_Normal_Index", Range(-1, 100)) = -1
_Texture_8_Albedo_Index ("Texture_8_Albedo_Index", Range(-1, 100)) = -1
_Texture_8_Normal_Index ("Texture_8_Normal_Index", Range(-1, 100)) = -1
[Header(Rain Params)] _Texture_1_RainParams ("Texture_1_RainParams", Vector) = (1,0,1,1)
_Texture_2_RainParams ("Texture_2_RainParams", Vector) = (1,0,1,1)
_Texture_3_RainParams ("Texture_3_RainParams", Vector) = (1,0,1,1)
_Texture_4_RainParams ("Texture_4_RainParams", Vector) = (1,0,1,1)
_Texture_5_RainParams ("Texture_5_RainParams", Vector) = (1,0,1,1)
_Texture_6_RainParams ("Texture_6_RainParams", Vector) = (1,0,1,1)
_Texture_7_RainParams ("Texture_7_RainParams", Vector) = (1,0,1,1)
_Texture_8_RainParams ("Texture_8_RainParams", Vector) = (1,0,1,1)
_MainTex ("BaseMap (RGB)", 2D) = "white" { }
_Color ("Main Color", Color) = (1,1,1,1)
}
SubShader {
 LOD 100
 Tags { "QUEUE" = "AlphaTest+1" "RenderType" = "Opaque" "TerrainHeight" = "VertexFetch" }
 Pass {
  LOD 100
  Tags { "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "AlphaTest+1" "RenderType" = "Opaque" "TerrainHeight" = "VertexFetch" }
  GpuProgramID 4189
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
float u_xlat20;
mediump float u_xlat16_20;
float u_xlat30;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    u_xlat16_6 = u_xlat16_2 + u_xlat16_3;
    u_xlat16_36 = u_xlat16_6.w * _Terrain_Smoothness;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = min(u_xlat16_36, 0.5);
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_36 = (-u_xlat16_36) + 1.0;
    u_xlat1.x = vs_TEXCOORD1.z;
    u_xlat1.y = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD3.z;
    u_xlat1.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_37 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_37 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_37);
    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_37) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat0.xyz;
    u_xlat16_38 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_20 = u_xlat16_10 * u_xlat16_10;
    u_xlat5.x = u_xlat30 * u_xlat16_20 + (-u_xlat30);
    u_xlat30 = u_xlat5.x * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = max(u_xlat30, 9.99999997e-07);
    u_xlat20 = u_xlat16_20 / u_xlat30;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat20 = min(u_xlat20, 64.0);
    u_xlat16_10 = (-u_xlat16_10) * u_xlat16_10 + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = u_xlat0.x * u_xlat0.x;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_0 = u_xlat16_36 * 0.959999979;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_10 + 0.0399999991;
    u_xlat10 = u_xlat16_0 * u_xlat20;
    u_xlat0.x = u_xlat20 * u_xlat16_0 + 2.0;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_7.xyz = u_xlat0.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat16_6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
float u_xlat20;
mediump float u_xlat16_20;
float u_xlat30;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    u_xlat16_6 = u_xlat16_2 + u_xlat16_3;
    u_xlat16_36 = u_xlat16_6.w * _Terrain_Smoothness;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = min(u_xlat16_36, 0.5);
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_36 = (-u_xlat16_36) + 1.0;
    u_xlat1.x = vs_TEXCOORD1.z;
    u_xlat1.y = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD3.z;
    u_xlat1.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_37 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_37 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_37);
    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_37) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat0.xyz;
    u_xlat16_38 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_20 = u_xlat16_10 * u_xlat16_10;
    u_xlat5.x = u_xlat30 * u_xlat16_20 + (-u_xlat30);
    u_xlat30 = u_xlat5.x * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = max(u_xlat30, 9.99999997e-07);
    u_xlat20 = u_xlat16_20 / u_xlat30;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat20 = min(u_xlat20, 64.0);
    u_xlat16_10 = (-u_xlat16_10) * u_xlat16_10 + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = u_xlat0.x * u_xlat0.x;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_0 = u_xlat16_36 * 0.959999979;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_10 + 0.0399999991;
    u_xlat10 = u_xlat16_0 * u_xlat20;
    u_xlat0.x = u_xlat20 * u_xlat16_0 + 2.0;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_7.xyz = u_xlat0.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat16_6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
float u_xlat20;
mediump float u_xlat16_20;
float u_xlat30;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    u_xlat16_6 = u_xlat16_2 + u_xlat16_3;
    u_xlat16_36 = u_xlat16_6.w * _Terrain_Smoothness;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = min(u_xlat16_36, 0.5);
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_36 = (-u_xlat16_36) + 1.0;
    u_xlat1.x = vs_TEXCOORD1.z;
    u_xlat1.y = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD3.z;
    u_xlat1.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_37 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_37 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_37);
    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_37) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat0.xyz;
    u_xlat16_38 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_20 = u_xlat16_10 * u_xlat16_10;
    u_xlat5.x = u_xlat30 * u_xlat16_20 + (-u_xlat30);
    u_xlat30 = u_xlat5.x * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = max(u_xlat30, 9.99999997e-07);
    u_xlat20 = u_xlat16_20 / u_xlat30;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat20 = min(u_xlat20, 64.0);
    u_xlat16_10 = (-u_xlat16_10) * u_xlat16_10 + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = u_xlat0.x * u_xlat0.x;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_0 = u_xlat16_36 * 0.959999979;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_10 + 0.0399999991;
    u_xlat10 = u_xlat16_0 * u_xlat20;
    u_xlat0.x = u_xlat20 * u_xlat16_0 + 2.0;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_7.xyz = u_xlat0.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat16_6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
float u_xlat20;
mediump float u_xlat16_20;
float u_xlat30;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    u_xlat16_6 = u_xlat16_2 + u_xlat16_3;
    u_xlat16_36 = u_xlat16_6.w * _Terrain_Smoothness;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = min(u_xlat16_36, 0.5);
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_36 = (-u_xlat16_36) + 1.0;
    u_xlat1.x = vs_TEXCOORD1.z;
    u_xlat1.y = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD3.z;
    u_xlat1.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_37 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_37 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_37);
    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_37) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat0.xyz;
    u_xlat16_38 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_20 = u_xlat16_10 * u_xlat16_10;
    u_xlat5.x = u_xlat30 * u_xlat16_20 + (-u_xlat30);
    u_xlat30 = u_xlat5.x * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = max(u_xlat30, 9.99999997e-07);
    u_xlat20 = u_xlat16_20 / u_xlat30;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat20 = min(u_xlat20, 64.0);
    u_xlat16_10 = (-u_xlat16_10) * u_xlat16_10 + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = u_xlat0.x * u_xlat0.x;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_0 = u_xlat16_36 * 0.959999979;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_10 + 0.0399999991;
    u_xlat10 = u_xlat16_0 * u_xlat20;
    u_xlat0.x = u_xlat20 * u_xlat16_0 + 2.0;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_7.xyz = u_xlat0.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat16_6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
mediump float u_xlat16_13;
bvec2 u_xlatb13;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_11.x = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_11.x * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat13.xz);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat13.xy);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.w;
    if(u_xlatb13.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat13.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat13.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9.x = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_1.x = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_2 = u_xlat16_0.x * u_xlat16_2 + u_xlat16_9.x;
    u_xlat16_0.x = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.5);
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat8.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat35 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_1.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat41);
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat3.x = vs_TEXCOORD1.z;
    u_xlat3.y = vs_TEXCOORD2.z;
    u_xlat3.z = vs_TEXCOORD3.z;
    u_xlat3.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_10.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_10.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_10.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_34 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_34 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_34);
    u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_34) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz;
    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat8.xyz * vec3(u_xlat35) + u_xlat2.xyz;
    u_xlat16_42 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_42 = inversesqrt(u_xlat16_42);
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_24 = u_xlat16_13 * u_xlat16_13;
    u_xlat8.x = u_xlat35 * u_xlat16_24 + (-u_xlat35);
    u_xlat35 = u_xlat8.x * u_xlat35 + 1.0;
    u_xlat35 = u_xlat35 * u_xlat35;
    u_xlat35 = max(u_xlat35, 9.99999997e-07);
    u_xlat24 = u_xlat16_24 / u_xlat35;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat24 = min(u_xlat24, 64.0);
    u_xlat16_13 = (-u_xlat16_13) * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 + u_xlat16_13;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_0.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_2 = u_xlat16_0.x * 0.959999979;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_13 + 0.0399999991;
    u_xlat13.x = u_xlat16_2 * u_xlat24;
    u_xlat2.x = u_xlat24 * u_xlat16_2 + 2.0;
    u_xlat2.x = u_xlat13.x / u_xlat2.x;
    u_xlat16_1.xyz = u_xlat2.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_34) + u_xlat16_11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
mediump float u_xlat16_13;
bvec2 u_xlatb13;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_11.x = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_11.x * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat13.xz);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat13.xy);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.w;
    if(u_xlatb13.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat13.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat13.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9.x = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_1.x = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_2 = u_xlat16_0.x * u_xlat16_2 + u_xlat16_9.x;
    u_xlat16_0.x = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.5);
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat8.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat35 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_1.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat41);
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat3.x = vs_TEXCOORD1.z;
    u_xlat3.y = vs_TEXCOORD2.z;
    u_xlat3.z = vs_TEXCOORD3.z;
    u_xlat3.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_10.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_10.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_10.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_34 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_34 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_34);
    u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_34) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz;
    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat8.xyz * vec3(u_xlat35) + u_xlat2.xyz;
    u_xlat16_42 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_42 = inversesqrt(u_xlat16_42);
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_24 = u_xlat16_13 * u_xlat16_13;
    u_xlat8.x = u_xlat35 * u_xlat16_24 + (-u_xlat35);
    u_xlat35 = u_xlat8.x * u_xlat35 + 1.0;
    u_xlat35 = u_xlat35 * u_xlat35;
    u_xlat35 = max(u_xlat35, 9.99999997e-07);
    u_xlat24 = u_xlat16_24 / u_xlat35;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat24 = min(u_xlat24, 64.0);
    u_xlat16_13 = (-u_xlat16_13) * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 + u_xlat16_13;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_0.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_2 = u_xlat16_0.x * 0.959999979;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_13 + 0.0399999991;
    u_xlat13.x = u_xlat16_2 * u_xlat24;
    u_xlat2.x = u_xlat24 * u_xlat16_2 + 2.0;
    u_xlat2.x = u_xlat13.x / u_xlat2.x;
    u_xlat16_1.xyz = u_xlat2.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_34) + u_xlat16_11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
mediump float u_xlat16_13;
bvec2 u_xlatb13;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_11.x = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_11.x * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat13.xz);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat13.xy);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.w;
    if(u_xlatb13.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat13.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat13.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9.x = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_1.x = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_2 = u_xlat16_0.x * u_xlat16_2 + u_xlat16_9.x;
    u_xlat16_0.x = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.5);
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat8.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat35 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_1.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat41);
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat3.x = vs_TEXCOORD1.z;
    u_xlat3.y = vs_TEXCOORD2.z;
    u_xlat3.z = vs_TEXCOORD3.z;
    u_xlat3.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_10.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_10.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_10.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_34 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_34 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_34);
    u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_34) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz;
    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat8.xyz * vec3(u_xlat35) + u_xlat2.xyz;
    u_xlat16_42 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_42 = inversesqrt(u_xlat16_42);
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_24 = u_xlat16_13 * u_xlat16_13;
    u_xlat8.x = u_xlat35 * u_xlat16_24 + (-u_xlat35);
    u_xlat35 = u_xlat8.x * u_xlat35 + 1.0;
    u_xlat35 = u_xlat35 * u_xlat35;
    u_xlat35 = max(u_xlat35, 9.99999997e-07);
    u_xlat24 = u_xlat16_24 / u_xlat35;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat24 = min(u_xlat24, 64.0);
    u_xlat16_13 = (-u_xlat16_13) * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 + u_xlat16_13;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_0.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_2 = u_xlat16_0.x * 0.959999979;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_13 + 0.0399999991;
    u_xlat13.x = u_xlat16_2 * u_xlat24;
    u_xlat2.x = u_xlat24 * u_xlat16_2 + 2.0;
    u_xlat2.x = u_xlat13.x / u_xlat2.x;
    u_xlat16_1.xyz = u_xlat2.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_34) + u_xlat16_11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
mediump float u_xlat16_13;
bvec2 u_xlatb13;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_11.x = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_11.x * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat13.xz);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat13.xy);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.w;
    if(u_xlatb13.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat13.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat13.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9.x = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_1.x = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_2 = u_xlat16_0.x * u_xlat16_2 + u_xlat16_9.x;
    u_xlat16_0.x = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.5);
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat8.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat35 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_1.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat41);
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat3.x = vs_TEXCOORD1.z;
    u_xlat3.y = vs_TEXCOORD2.z;
    u_xlat3.z = vs_TEXCOORD3.z;
    u_xlat3.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_10.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_10.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_10.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_34 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_34 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_34);
    u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_34) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz;
    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat8.xyz * vec3(u_xlat35) + u_xlat2.xyz;
    u_xlat16_42 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_42 = inversesqrt(u_xlat16_42);
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_24 = u_xlat16_13 * u_xlat16_13;
    u_xlat8.x = u_xlat35 * u_xlat16_24 + (-u_xlat35);
    u_xlat35 = u_xlat8.x * u_xlat35 + 1.0;
    u_xlat35 = u_xlat35 * u_xlat35;
    u_xlat35 = max(u_xlat35, 9.99999997e-07);
    u_xlat24 = u_xlat16_24 / u_xlat35;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat24 = min(u_xlat24, 64.0);
    u_xlat16_13 = (-u_xlat16_13) * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 + u_xlat16_13;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_0.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_2 = u_xlat16_0.x * 0.959999979;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_13 + 0.0399999991;
    u_xlat13.x = u_xlat16_2 * u_xlat24;
    u_xlat2.x = u_xlat24 * u_xlat16_2 + 2.0;
    u_xlat2.x = u_xlat13.x / u_xlat2.x;
    u_xlat16_1.xyz = u_xlat2.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_34) + u_xlat16_11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
float u_xlat20;
mediump float u_xlat16_20;
float u_xlat30;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy, -1.0);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    u_xlat16_6 = u_xlat16_2 + u_xlat16_3;
    u_xlat16_36 = u_xlat16_6.w * _Terrain_Smoothness;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = min(u_xlat16_36, 0.5);
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_36 = (-u_xlat16_36) + 1.0;
    u_xlat1.x = vs_TEXCOORD1.z;
    u_xlat1.y = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD3.z;
    u_xlat1.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_37 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_37 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_37);
    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_37) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat0.xyz;
    u_xlat16_38 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_20 = u_xlat16_10 * u_xlat16_10;
    u_xlat5.x = u_xlat30 * u_xlat16_20 + (-u_xlat30);
    u_xlat30 = u_xlat5.x * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = max(u_xlat30, 9.99999997e-07);
    u_xlat20 = u_xlat16_20 / u_xlat30;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat20 = min(u_xlat20, 64.0);
    u_xlat16_10 = (-u_xlat16_10) * u_xlat16_10 + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = u_xlat0.x * u_xlat0.x;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_0 = u_xlat16_36 * 0.959999979;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_10 + 0.0399999991;
    u_xlat10 = u_xlat16_0 * u_xlat20;
    u_xlat0.x = u_xlat20 * u_xlat16_0 + 2.0;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_7.xyz = u_xlat0.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat16_6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
float u_xlat20;
mediump float u_xlat16_20;
float u_xlat30;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy, -1.0);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    u_xlat16_6 = u_xlat16_2 + u_xlat16_3;
    u_xlat16_36 = u_xlat16_6.w * _Terrain_Smoothness;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = min(u_xlat16_36, 0.5);
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_36 = (-u_xlat16_36) + 1.0;
    u_xlat1.x = vs_TEXCOORD1.z;
    u_xlat1.y = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD3.z;
    u_xlat1.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_37 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_37 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_37);
    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_37) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat0.xyz;
    u_xlat16_38 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_20 = u_xlat16_10 * u_xlat16_10;
    u_xlat5.x = u_xlat30 * u_xlat16_20 + (-u_xlat30);
    u_xlat30 = u_xlat5.x * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = max(u_xlat30, 9.99999997e-07);
    u_xlat20 = u_xlat16_20 / u_xlat30;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat20 = min(u_xlat20, 64.0);
    u_xlat16_10 = (-u_xlat16_10) * u_xlat16_10 + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = u_xlat0.x * u_xlat0.x;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_0 = u_xlat16_36 * 0.959999979;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_10 + 0.0399999991;
    u_xlat10 = u_xlat16_0 * u_xlat20;
    u_xlat0.x = u_xlat20 * u_xlat16_0 + 2.0;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_7.xyz = u_xlat0.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat16_6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
float u_xlat20;
mediump float u_xlat16_20;
float u_xlat30;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy, -1.0);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    u_xlat16_6 = u_xlat16_2 + u_xlat16_3;
    u_xlat16_36 = u_xlat16_6.w * _Terrain_Smoothness;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = min(u_xlat16_36, 0.5);
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_36 = (-u_xlat16_36) + 1.0;
    u_xlat1.x = vs_TEXCOORD1.z;
    u_xlat1.y = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD3.z;
    u_xlat1.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_37 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_37 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_37);
    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_37) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat0.xyz;
    u_xlat16_38 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_20 = u_xlat16_10 * u_xlat16_10;
    u_xlat5.x = u_xlat30 * u_xlat16_20 + (-u_xlat30);
    u_xlat30 = u_xlat5.x * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = max(u_xlat30, 9.99999997e-07);
    u_xlat20 = u_xlat16_20 / u_xlat30;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat20 = min(u_xlat20, 64.0);
    u_xlat16_10 = (-u_xlat16_10) * u_xlat16_10 + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = u_xlat0.x * u_xlat0.x;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_0 = u_xlat16_36 * 0.959999979;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_10 + 0.0399999991;
    u_xlat10 = u_xlat16_0 * u_xlat20;
    u_xlat0.x = u_xlat20 * u_xlat16_0 + 2.0;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_7.xyz = u_xlat0.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat16_6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
float u_xlat20;
mediump float u_xlat16_20;
float u_xlat30;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy, -1.0);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    u_xlat16_6 = u_xlat16_2 + u_xlat16_3;
    u_xlat16_36 = u_xlat16_6.w * _Terrain_Smoothness;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = min(u_xlat16_36, 0.5);
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_36 = (-u_xlat16_36) + 1.0;
    u_xlat1.x = vs_TEXCOORD1.z;
    u_xlat1.y = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD3.z;
    u_xlat1.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_37 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_37 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_37);
    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_37) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat0.xyz;
    u_xlat16_38 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_20 = u_xlat16_10 * u_xlat16_10;
    u_xlat5.x = u_xlat30 * u_xlat16_20 + (-u_xlat30);
    u_xlat30 = u_xlat5.x * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = max(u_xlat30, 9.99999997e-07);
    u_xlat20 = u_xlat16_20 / u_xlat30;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat20 = min(u_xlat20, 64.0);
    u_xlat16_10 = (-u_xlat16_10) * u_xlat16_10 + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = u_xlat0.x * u_xlat0.x;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_0 = u_xlat16_36 * 0.959999979;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_10 + 0.0399999991;
    u_xlat10 = u_xlat16_0 * u_xlat20;
    u_xlat0.x = u_xlat20 * u_xlat16_0 + 2.0;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_7.xyz = u_xlat0.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat16_6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
mediump float u_xlat16_13;
bvec2 u_xlatb13;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_11.x = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_11.x * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.w;
    if(u_xlatb13.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9.x = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_1.x = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_2 = u_xlat16_0.x * u_xlat16_2 + u_xlat16_9.x;
    u_xlat16_0.x = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.5);
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat8.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat35 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_1.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat41);
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat3.x = vs_TEXCOORD1.z;
    u_xlat3.y = vs_TEXCOORD2.z;
    u_xlat3.z = vs_TEXCOORD3.z;
    u_xlat3.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_10.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_10.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_10.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_34 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_34 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_34);
    u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_34) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz;
    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat8.xyz * vec3(u_xlat35) + u_xlat2.xyz;
    u_xlat16_42 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_42 = inversesqrt(u_xlat16_42);
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_24 = u_xlat16_13 * u_xlat16_13;
    u_xlat8.x = u_xlat35 * u_xlat16_24 + (-u_xlat35);
    u_xlat35 = u_xlat8.x * u_xlat35 + 1.0;
    u_xlat35 = u_xlat35 * u_xlat35;
    u_xlat35 = max(u_xlat35, 9.99999997e-07);
    u_xlat24 = u_xlat16_24 / u_xlat35;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat24 = min(u_xlat24, 64.0);
    u_xlat16_13 = (-u_xlat16_13) * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 + u_xlat16_13;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_0.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_2 = u_xlat16_0.x * 0.959999979;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_13 + 0.0399999991;
    u_xlat13.x = u_xlat16_2 * u_xlat24;
    u_xlat2.x = u_xlat24 * u_xlat16_2 + 2.0;
    u_xlat2.x = u_xlat13.x / u_xlat2.x;
    u_xlat16_1.xyz = u_xlat2.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_34) + u_xlat16_11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
mediump float u_xlat16_13;
bvec2 u_xlatb13;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_11.x = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_11.x * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.w;
    if(u_xlatb13.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9.x = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_1.x = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_2 = u_xlat16_0.x * u_xlat16_2 + u_xlat16_9.x;
    u_xlat16_0.x = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.5);
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat8.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat35 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_1.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat41);
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat3.x = vs_TEXCOORD1.z;
    u_xlat3.y = vs_TEXCOORD2.z;
    u_xlat3.z = vs_TEXCOORD3.z;
    u_xlat3.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_10.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_10.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_10.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_34 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_34 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_34);
    u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_34) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz;
    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat8.xyz * vec3(u_xlat35) + u_xlat2.xyz;
    u_xlat16_42 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_42 = inversesqrt(u_xlat16_42);
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_24 = u_xlat16_13 * u_xlat16_13;
    u_xlat8.x = u_xlat35 * u_xlat16_24 + (-u_xlat35);
    u_xlat35 = u_xlat8.x * u_xlat35 + 1.0;
    u_xlat35 = u_xlat35 * u_xlat35;
    u_xlat35 = max(u_xlat35, 9.99999997e-07);
    u_xlat24 = u_xlat16_24 / u_xlat35;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat24 = min(u_xlat24, 64.0);
    u_xlat16_13 = (-u_xlat16_13) * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 + u_xlat16_13;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_0.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_2 = u_xlat16_0.x * 0.959999979;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_13 + 0.0399999991;
    u_xlat13.x = u_xlat16_2 * u_xlat24;
    u_xlat2.x = u_xlat24 * u_xlat16_2 + 2.0;
    u_xlat2.x = u_xlat13.x / u_xlat2.x;
    u_xlat16_1.xyz = u_xlat2.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_34) + u_xlat16_11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
mediump float u_xlat16_13;
bvec2 u_xlatb13;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_11.x = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_11.x * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.w;
    if(u_xlatb13.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9.x = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_1.x = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_2 = u_xlat16_0.x * u_xlat16_2 + u_xlat16_9.x;
    u_xlat16_0.x = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.5);
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat8.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat35 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_1.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat41);
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat3.x = vs_TEXCOORD1.z;
    u_xlat3.y = vs_TEXCOORD2.z;
    u_xlat3.z = vs_TEXCOORD3.z;
    u_xlat3.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_10.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_10.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_10.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_34 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_34 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_34);
    u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_34) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz;
    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat8.xyz * vec3(u_xlat35) + u_xlat2.xyz;
    u_xlat16_42 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_42 = inversesqrt(u_xlat16_42);
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_24 = u_xlat16_13 * u_xlat16_13;
    u_xlat8.x = u_xlat35 * u_xlat16_24 + (-u_xlat35);
    u_xlat35 = u_xlat8.x * u_xlat35 + 1.0;
    u_xlat35 = u_xlat35 * u_xlat35;
    u_xlat35 = max(u_xlat35, 9.99999997e-07);
    u_xlat24 = u_xlat16_24 / u_xlat35;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat24 = min(u_xlat24, 64.0);
    u_xlat16_13 = (-u_xlat16_13) * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 + u_xlat16_13;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_0.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_2 = u_xlat16_0.x * 0.959999979;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_13 + 0.0399999991;
    u_xlat13.x = u_xlat16_2 * u_xlat24;
    u_xlat2.x = u_xlat24 * u_xlat16_2 + 2.0;
    u_xlat2.x = u_xlat13.x / u_xlat2.x;
    u_xlat16_1.xyz = u_xlat2.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_34) + u_xlat16_11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
mediump float u_xlat16_13;
bvec2 u_xlatb13;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_11.x = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_11.x * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.w;
    if(u_xlatb13.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9.x = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_1.x = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_2 = u_xlat16_0.x * u_xlat16_2 + u_xlat16_9.x;
    u_xlat16_0.x = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.5);
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat8.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat35 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_1.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat41);
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat3.x = vs_TEXCOORD1.z;
    u_xlat3.y = vs_TEXCOORD2.z;
    u_xlat3.z = vs_TEXCOORD3.z;
    u_xlat3.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_10.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_10.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_10.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_34 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_34 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_34);
    u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_34) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz;
    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat8.xyz * vec3(u_xlat35) + u_xlat2.xyz;
    u_xlat16_42 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_42 = inversesqrt(u_xlat16_42);
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_24 = u_xlat16_13 * u_xlat16_13;
    u_xlat8.x = u_xlat35 * u_xlat16_24 + (-u_xlat35);
    u_xlat35 = u_xlat8.x * u_xlat35 + 1.0;
    u_xlat35 = u_xlat35 * u_xlat35;
    u_xlat35 = max(u_xlat35, 9.99999997e-07);
    u_xlat24 = u_xlat16_24 / u_xlat35;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat24 = min(u_xlat24, 64.0);
    u_xlat16_13 = (-u_xlat16_13) * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 + u_xlat16_13;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_0.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_2 = u_xlat16_0.x * 0.959999979;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_13 + 0.0399999991;
    u_xlat13.x = u_xlat16_2 * u_xlat24;
    u_xlat2.x = u_xlat24 * u_xlat16_2 + 2.0;
    u_xlat2.x = u_xlat13.x / u_xlat2.x;
    u_xlat16_1.xyz = u_xlat2.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_34) + u_xlat16_11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
float u_xlat20;
mediump float u_xlat16_20;
float u_xlat30;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    u_xlat16_6 = u_xlat16_2 + u_xlat16_3;
    u_xlat16_36 = u_xlat16_6.w * _Terrain_Smoothness;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = min(u_xlat16_36, 0.5);
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_36 = (-u_xlat16_36) + 1.0;
    u_xlat1.x = vs_TEXCOORD1.z;
    u_xlat1.y = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD3.z;
    u_xlat1.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_37 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_37 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_37);
    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_37) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat0.xyz;
    u_xlat16_38 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_20 = u_xlat16_10 * u_xlat16_10;
    u_xlat5.x = u_xlat30 * u_xlat16_20 + (-u_xlat30);
    u_xlat30 = u_xlat5.x * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = max(u_xlat30, 9.99999997e-07);
    u_xlat20 = u_xlat16_20 / u_xlat30;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat20 = min(u_xlat20, 64.0);
    u_xlat16_10 = (-u_xlat16_10) * u_xlat16_10 + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = u_xlat0.x * u_xlat0.x;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_0 = u_xlat16_36 * 0.959999979;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_10 + 0.0399999991;
    u_xlat10 = u_xlat16_0 * u_xlat20;
    u_xlat0.x = u_xlat20 * u_xlat16_0 + 2.0;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_7.xyz = u_xlat0.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat16_6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
float u_xlat20;
mediump float u_xlat16_20;
float u_xlat30;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    u_xlat16_6 = u_xlat16_2 + u_xlat16_3;
    u_xlat16_36 = u_xlat16_6.w * _Terrain_Smoothness;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = min(u_xlat16_36, 0.5);
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_36 = (-u_xlat16_36) + 1.0;
    u_xlat1.x = vs_TEXCOORD1.z;
    u_xlat1.y = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD3.z;
    u_xlat1.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_37 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_37 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_37);
    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_37) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat0.xyz;
    u_xlat16_38 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_20 = u_xlat16_10 * u_xlat16_10;
    u_xlat5.x = u_xlat30 * u_xlat16_20 + (-u_xlat30);
    u_xlat30 = u_xlat5.x * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = max(u_xlat30, 9.99999997e-07);
    u_xlat20 = u_xlat16_20 / u_xlat30;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat20 = min(u_xlat20, 64.0);
    u_xlat16_10 = (-u_xlat16_10) * u_xlat16_10 + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = u_xlat0.x * u_xlat0.x;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_0 = u_xlat16_36 * 0.959999979;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_10 + 0.0399999991;
    u_xlat10 = u_xlat16_0 * u_xlat20;
    u_xlat0.x = u_xlat20 * u_xlat16_0 + 2.0;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_7.xyz = u_xlat0.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat16_6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
float u_xlat20;
mediump float u_xlat16_20;
float u_xlat30;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    u_xlat16_6 = u_xlat16_2 + u_xlat16_3;
    u_xlat16_36 = u_xlat16_6.w * _Terrain_Smoothness;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = min(u_xlat16_36, 0.5);
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_36 = (-u_xlat16_36) + 1.0;
    u_xlat1.x = vs_TEXCOORD1.z;
    u_xlat1.y = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD3.z;
    u_xlat1.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_37 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_37 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_37);
    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_37) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat0.xyz;
    u_xlat16_38 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_20 = u_xlat16_10 * u_xlat16_10;
    u_xlat5.x = u_xlat30 * u_xlat16_20 + (-u_xlat30);
    u_xlat30 = u_xlat5.x * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = max(u_xlat30, 9.99999997e-07);
    u_xlat20 = u_xlat16_20 / u_xlat30;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat20 = min(u_xlat20, 64.0);
    u_xlat16_10 = (-u_xlat16_10) * u_xlat16_10 + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = u_xlat0.x * u_xlat0.x;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_0 = u_xlat16_36 * 0.959999979;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_10 + 0.0399999991;
    u_xlat10 = u_xlat16_0 * u_xlat20;
    u_xlat0.x = u_xlat20 * u_xlat16_0 + 2.0;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_7.xyz = u_xlat0.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat16_6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
float u_xlat20;
mediump float u_xlat16_20;
float u_xlat30;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    u_xlat16_6 = u_xlat16_2 + u_xlat16_3;
    u_xlat16_36 = u_xlat16_6.w * _Terrain_Smoothness;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = min(u_xlat16_36, 0.5);
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_36 = (-u_xlat16_36) + 1.0;
    u_xlat1.x = vs_TEXCOORD1.z;
    u_xlat1.y = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD3.z;
    u_xlat1.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_37 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_37 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_37);
    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_37) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat0.xyz;
    u_xlat16_38 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_20 = u_xlat16_10 * u_xlat16_10;
    u_xlat5.x = u_xlat30 * u_xlat16_20 + (-u_xlat30);
    u_xlat30 = u_xlat5.x * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = max(u_xlat30, 9.99999997e-07);
    u_xlat20 = u_xlat16_20 / u_xlat30;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat20 = min(u_xlat20, 64.0);
    u_xlat16_10 = (-u_xlat16_10) * u_xlat16_10 + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = u_xlat0.x * u_xlat0.x;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_0 = u_xlat16_36 * 0.959999979;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_10 + 0.0399999991;
    u_xlat10 = u_xlat16_0 * u_xlat20;
    u_xlat0.x = u_xlat20 * u_xlat16_0 + 2.0;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_7.xyz = u_xlat0.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat16_6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
mediump float u_xlat16_13;
bvec2 u_xlatb13;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_11.x = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_11.x * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat13.xz);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat13.xy);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.w;
    if(u_xlatb13.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat13.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat13.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9.x = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_1.x = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_2 = u_xlat16_0.x * u_xlat16_2 + u_xlat16_9.x;
    u_xlat16_0.x = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.5);
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat8.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat35 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_1.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat41);
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat3.x = vs_TEXCOORD1.z;
    u_xlat3.y = vs_TEXCOORD2.z;
    u_xlat3.z = vs_TEXCOORD3.z;
    u_xlat3.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_10.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_10.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_10.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_34 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_34 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_34);
    u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_34) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz;
    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat8.xyz * vec3(u_xlat35) + u_xlat2.xyz;
    u_xlat16_42 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_42 = inversesqrt(u_xlat16_42);
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_24 = u_xlat16_13 * u_xlat16_13;
    u_xlat8.x = u_xlat35 * u_xlat16_24 + (-u_xlat35);
    u_xlat35 = u_xlat8.x * u_xlat35 + 1.0;
    u_xlat35 = u_xlat35 * u_xlat35;
    u_xlat35 = max(u_xlat35, 9.99999997e-07);
    u_xlat24 = u_xlat16_24 / u_xlat35;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat24 = min(u_xlat24, 64.0);
    u_xlat16_13 = (-u_xlat16_13) * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 + u_xlat16_13;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_0.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_2 = u_xlat16_0.x * 0.959999979;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_13 + 0.0399999991;
    u_xlat13.x = u_xlat16_2 * u_xlat24;
    u_xlat2.x = u_xlat24 * u_xlat16_2 + 2.0;
    u_xlat2.x = u_xlat13.x / u_xlat2.x;
    u_xlat16_1.xyz = u_xlat2.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_34) + u_xlat16_11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
mediump float u_xlat16_13;
bvec2 u_xlatb13;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_11.x = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_11.x * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat13.xz);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat13.xy);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.w;
    if(u_xlatb13.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat13.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat13.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9.x = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_1.x = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_2 = u_xlat16_0.x * u_xlat16_2 + u_xlat16_9.x;
    u_xlat16_0.x = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.5);
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat8.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat35 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_1.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat41);
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat3.x = vs_TEXCOORD1.z;
    u_xlat3.y = vs_TEXCOORD2.z;
    u_xlat3.z = vs_TEXCOORD3.z;
    u_xlat3.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_10.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_10.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_10.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_34 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_34 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_34);
    u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_34) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz;
    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat8.xyz * vec3(u_xlat35) + u_xlat2.xyz;
    u_xlat16_42 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_42 = inversesqrt(u_xlat16_42);
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_24 = u_xlat16_13 * u_xlat16_13;
    u_xlat8.x = u_xlat35 * u_xlat16_24 + (-u_xlat35);
    u_xlat35 = u_xlat8.x * u_xlat35 + 1.0;
    u_xlat35 = u_xlat35 * u_xlat35;
    u_xlat35 = max(u_xlat35, 9.99999997e-07);
    u_xlat24 = u_xlat16_24 / u_xlat35;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat24 = min(u_xlat24, 64.0);
    u_xlat16_13 = (-u_xlat16_13) * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 + u_xlat16_13;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_0.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_2 = u_xlat16_0.x * 0.959999979;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_13 + 0.0399999991;
    u_xlat13.x = u_xlat16_2 * u_xlat24;
    u_xlat2.x = u_xlat24 * u_xlat16_2 + 2.0;
    u_xlat2.x = u_xlat13.x / u_xlat2.x;
    u_xlat16_1.xyz = u_xlat2.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_34) + u_xlat16_11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
mediump float u_xlat16_13;
bvec2 u_xlatb13;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_11.x = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_11.x * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat13.xz);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat13.xy);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.w;
    if(u_xlatb13.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat13.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat13.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9.x = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_1.x = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_2 = u_xlat16_0.x * u_xlat16_2 + u_xlat16_9.x;
    u_xlat16_0.x = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.5);
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat8.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat35 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_1.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat41);
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat3.x = vs_TEXCOORD1.z;
    u_xlat3.y = vs_TEXCOORD2.z;
    u_xlat3.z = vs_TEXCOORD3.z;
    u_xlat3.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_10.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_10.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_10.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_34 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_34 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_34);
    u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_34) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz;
    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat8.xyz * vec3(u_xlat35) + u_xlat2.xyz;
    u_xlat16_42 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_42 = inversesqrt(u_xlat16_42);
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_24 = u_xlat16_13 * u_xlat16_13;
    u_xlat8.x = u_xlat35 * u_xlat16_24 + (-u_xlat35);
    u_xlat35 = u_xlat8.x * u_xlat35 + 1.0;
    u_xlat35 = u_xlat35 * u_xlat35;
    u_xlat35 = max(u_xlat35, 9.99999997e-07);
    u_xlat24 = u_xlat16_24 / u_xlat35;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat24 = min(u_xlat24, 64.0);
    u_xlat16_13 = (-u_xlat16_13) * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 + u_xlat16_13;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_0.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_2 = u_xlat16_0.x * 0.959999979;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_13 + 0.0399999991;
    u_xlat13.x = u_xlat16_2 * u_xlat24;
    u_xlat2.x = u_xlat24 * u_xlat16_2 + 2.0;
    u_xlat2.x = u_xlat13.x / u_xlat2.x;
    u_xlat16_1.xyz = u_xlat2.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_34) + u_xlat16_11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
mediump float u_xlat16_13;
bvec2 u_xlatb13;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_11.x = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_11.x * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat13.xz);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat13.xy);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.w;
    if(u_xlatb13.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat13.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat13.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9.x = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_1.x = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_2 = u_xlat16_0.x * u_xlat16_2 + u_xlat16_9.x;
    u_xlat16_0.x = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.5);
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat8.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat35 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_1.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat41);
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat3.x = vs_TEXCOORD1.z;
    u_xlat3.y = vs_TEXCOORD2.z;
    u_xlat3.z = vs_TEXCOORD3.z;
    u_xlat3.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_10.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_10.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_10.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_34 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_34 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_34);
    u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_34) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz;
    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat8.xyz * vec3(u_xlat35) + u_xlat2.xyz;
    u_xlat16_42 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_42 = inversesqrt(u_xlat16_42);
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_24 = u_xlat16_13 * u_xlat16_13;
    u_xlat8.x = u_xlat35 * u_xlat16_24 + (-u_xlat35);
    u_xlat35 = u_xlat8.x * u_xlat35 + 1.0;
    u_xlat35 = u_xlat35 * u_xlat35;
    u_xlat35 = max(u_xlat35, 9.99999997e-07);
    u_xlat24 = u_xlat16_24 / u_xlat35;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat24 = min(u_xlat24, 64.0);
    u_xlat16_13 = (-u_xlat16_13) * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 + u_xlat16_13;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_0.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_2 = u_xlat16_0.x * 0.959999979;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_13 + 0.0399999991;
    u_xlat13.x = u_xlat16_2 * u_xlat24;
    u_xlat2.x = u_xlat24 * u_xlat16_2 + 2.0;
    u_xlat2.x = u_xlat13.x / u_xlat2.x;
    u_xlat16_1.xyz = u_xlat2.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_34) + u_xlat16_11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
float u_xlat20;
mediump float u_xlat16_20;
float u_xlat30;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy, -1.0);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    u_xlat16_6 = u_xlat16_2 + u_xlat16_3;
    u_xlat16_36 = u_xlat16_6.w * _Terrain_Smoothness;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = min(u_xlat16_36, 0.5);
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_36 = (-u_xlat16_36) + 1.0;
    u_xlat1.x = vs_TEXCOORD1.z;
    u_xlat1.y = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD3.z;
    u_xlat1.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_37 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_37 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_37);
    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_37) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat0.xyz;
    u_xlat16_38 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_20 = u_xlat16_10 * u_xlat16_10;
    u_xlat5.x = u_xlat30 * u_xlat16_20 + (-u_xlat30);
    u_xlat30 = u_xlat5.x * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = max(u_xlat30, 9.99999997e-07);
    u_xlat20 = u_xlat16_20 / u_xlat30;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat20 = min(u_xlat20, 64.0);
    u_xlat16_10 = (-u_xlat16_10) * u_xlat16_10 + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = u_xlat0.x * u_xlat0.x;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_0 = u_xlat16_36 * 0.959999979;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_10 + 0.0399999991;
    u_xlat10 = u_xlat16_0 * u_xlat20;
    u_xlat0.x = u_xlat20 * u_xlat16_0 + 2.0;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_7.xyz = u_xlat0.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat16_6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
float u_xlat20;
mediump float u_xlat16_20;
float u_xlat30;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy, -1.0);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    u_xlat16_6 = u_xlat16_2 + u_xlat16_3;
    u_xlat16_36 = u_xlat16_6.w * _Terrain_Smoothness;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = min(u_xlat16_36, 0.5);
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_36 = (-u_xlat16_36) + 1.0;
    u_xlat1.x = vs_TEXCOORD1.z;
    u_xlat1.y = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD3.z;
    u_xlat1.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_37 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_37 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_37);
    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_37) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat0.xyz;
    u_xlat16_38 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_20 = u_xlat16_10 * u_xlat16_10;
    u_xlat5.x = u_xlat30 * u_xlat16_20 + (-u_xlat30);
    u_xlat30 = u_xlat5.x * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = max(u_xlat30, 9.99999997e-07);
    u_xlat20 = u_xlat16_20 / u_xlat30;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat20 = min(u_xlat20, 64.0);
    u_xlat16_10 = (-u_xlat16_10) * u_xlat16_10 + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = u_xlat0.x * u_xlat0.x;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_0 = u_xlat16_36 * 0.959999979;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_10 + 0.0399999991;
    u_xlat10 = u_xlat16_0 * u_xlat20;
    u_xlat0.x = u_xlat20 * u_xlat16_0 + 2.0;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_7.xyz = u_xlat0.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat16_6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
float u_xlat20;
mediump float u_xlat16_20;
float u_xlat30;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy, -1.0);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    u_xlat16_6 = u_xlat16_2 + u_xlat16_3;
    u_xlat16_36 = u_xlat16_6.w * _Terrain_Smoothness;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = min(u_xlat16_36, 0.5);
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_36 = (-u_xlat16_36) + 1.0;
    u_xlat1.x = vs_TEXCOORD1.z;
    u_xlat1.y = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD3.z;
    u_xlat1.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_37 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_37 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_37);
    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_37) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat0.xyz;
    u_xlat16_38 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_20 = u_xlat16_10 * u_xlat16_10;
    u_xlat5.x = u_xlat30 * u_xlat16_20 + (-u_xlat30);
    u_xlat30 = u_xlat5.x * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = max(u_xlat30, 9.99999997e-07);
    u_xlat20 = u_xlat16_20 / u_xlat30;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat20 = min(u_xlat20, 64.0);
    u_xlat16_10 = (-u_xlat16_10) * u_xlat16_10 + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = u_xlat0.x * u_xlat0.x;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_0 = u_xlat16_36 * 0.959999979;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_10 + 0.0399999991;
    u_xlat10 = u_xlat16_0 * u_xlat20;
    u_xlat0.x = u_xlat20 * u_xlat16_0 + 2.0;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_7.xyz = u_xlat0.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat16_6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
float u_xlat20;
mediump float u_xlat16_20;
float u_xlat30;
float u_xlat35;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy, -1.0);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    u_xlat16_6 = u_xlat16_2 + u_xlat16_3;
    u_xlat16_36 = u_xlat16_6.w * _Terrain_Smoothness;
    u_xlat16_36 = max(u_xlat16_36, 0.0);
    u_xlat16_36 = min(u_xlat16_36, 0.5);
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_36 = (-u_xlat16_36) + 1.0;
    u_xlat1.x = vs_TEXCOORD1.z;
    u_xlat1.y = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD3.z;
    u_xlat1.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_37 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_37 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_37);
    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_37) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(u_xlat30) + u_xlat0.xyz;
    u_xlat16_38 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_36 * u_xlat16_36;
    u_xlat16_20 = u_xlat16_10 * u_xlat16_10;
    u_xlat5.x = u_xlat30 * u_xlat16_20 + (-u_xlat30);
    u_xlat30 = u_xlat5.x * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = max(u_xlat30, 9.99999997e-07);
    u_xlat20 = u_xlat16_20 / u_xlat30;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat20 = min(u_xlat20, 64.0);
    u_xlat16_10 = (-u_xlat16_10) * u_xlat16_10 + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat16_10;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = u_xlat0.x * u_xlat0.x;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_36 = u_xlat0.x * u_xlat16_36;
    u_xlat16_0 = u_xlat16_36 * 0.959999979;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_10 + 0.0399999991;
    u_xlat10 = u_xlat16_0 * u_xlat20;
    u_xlat0.x = u_xlat20 * u_xlat16_0 + 2.0;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_7.xyz = u_xlat0.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat16_6.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
mediump float u_xlat16_13;
bvec2 u_xlatb13;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_11.x = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_11.x * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.w;
    if(u_xlatb13.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9.x = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_1.x = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_2 = u_xlat16_0.x * u_xlat16_2 + u_xlat16_9.x;
    u_xlat16_0.x = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.5);
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat8.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat35 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_1.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat41);
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat3.x = vs_TEXCOORD1.z;
    u_xlat3.y = vs_TEXCOORD2.z;
    u_xlat3.z = vs_TEXCOORD3.z;
    u_xlat3.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_10.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_10.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_10.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_34 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_34 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_34);
    u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_34) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz;
    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat8.xyz * vec3(u_xlat35) + u_xlat2.xyz;
    u_xlat16_42 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_42 = inversesqrt(u_xlat16_42);
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_24 = u_xlat16_13 * u_xlat16_13;
    u_xlat8.x = u_xlat35 * u_xlat16_24 + (-u_xlat35);
    u_xlat35 = u_xlat8.x * u_xlat35 + 1.0;
    u_xlat35 = u_xlat35 * u_xlat35;
    u_xlat35 = max(u_xlat35, 9.99999997e-07);
    u_xlat24 = u_xlat16_24 / u_xlat35;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat24 = min(u_xlat24, 64.0);
    u_xlat16_13 = (-u_xlat16_13) * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 + u_xlat16_13;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_0.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_2 = u_xlat16_0.x * 0.959999979;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_13 + 0.0399999991;
    u_xlat13.x = u_xlat16_2 * u_xlat24;
    u_xlat2.x = u_xlat24 * u_xlat16_2 + 2.0;
    u_xlat2.x = u_xlat13.x / u_xlat2.x;
    u_xlat16_1.xyz = u_xlat2.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_34) + u_xlat16_11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
mediump float u_xlat16_13;
bvec2 u_xlatb13;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_11.x = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_11.x * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.w;
    if(u_xlatb13.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9.x = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_1.x = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_2 = u_xlat16_0.x * u_xlat16_2 + u_xlat16_9.x;
    u_xlat16_0.x = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.5);
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat8.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat35 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_1.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat41);
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat3.x = vs_TEXCOORD1.z;
    u_xlat3.y = vs_TEXCOORD2.z;
    u_xlat3.z = vs_TEXCOORD3.z;
    u_xlat3.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_10.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_10.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_10.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_34 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_34 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_34);
    u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_34) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz;
    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat8.xyz * vec3(u_xlat35) + u_xlat2.xyz;
    u_xlat16_42 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_42 = inversesqrt(u_xlat16_42);
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_24 = u_xlat16_13 * u_xlat16_13;
    u_xlat8.x = u_xlat35 * u_xlat16_24 + (-u_xlat35);
    u_xlat35 = u_xlat8.x * u_xlat35 + 1.0;
    u_xlat35 = u_xlat35 * u_xlat35;
    u_xlat35 = max(u_xlat35, 9.99999997e-07);
    u_xlat24 = u_xlat16_24 / u_xlat35;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat24 = min(u_xlat24, 64.0);
    u_xlat16_13 = (-u_xlat16_13) * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 + u_xlat16_13;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_0.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_2 = u_xlat16_0.x * 0.959999979;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_13 + 0.0399999991;
    u_xlat13.x = u_xlat16_2 * u_xlat24;
    u_xlat2.x = u_xlat24 * u_xlat16_2 + 2.0;
    u_xlat2.x = u_xlat13.x / u_xlat2.x;
    u_xlat16_1.xyz = u_xlat2.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_34) + u_xlat16_11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
mediump float u_xlat16_13;
bvec2 u_xlatb13;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_11.x = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_11.x * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.w;
    if(u_xlatb13.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9.x = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_1.x = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_2 = u_xlat16_0.x * u_xlat16_2 + u_xlat16_9.x;
    u_xlat16_0.x = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.5);
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat8.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat35 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_1.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat41);
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat3.x = vs_TEXCOORD1.z;
    u_xlat3.y = vs_TEXCOORD2.z;
    u_xlat3.z = vs_TEXCOORD3.z;
    u_xlat3.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_10.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_10.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_10.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_34 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_34 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_34);
    u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_34) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz;
    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat8.xyz * vec3(u_xlat35) + u_xlat2.xyz;
    u_xlat16_42 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_42 = inversesqrt(u_xlat16_42);
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_24 = u_xlat16_13 * u_xlat16_13;
    u_xlat8.x = u_xlat35 * u_xlat16_24 + (-u_xlat35);
    u_xlat35 = u_xlat8.x * u_xlat35 + 1.0;
    u_xlat35 = u_xlat35 * u_xlat35;
    u_xlat35 = max(u_xlat35, 9.99999997e-07);
    u_xlat24 = u_xlat16_24 / u_xlat35;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat24 = min(u_xlat24, 64.0);
    u_xlat16_13 = (-u_xlat16_13) * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 + u_xlat16_13;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_0.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_2 = u_xlat16_0.x * 0.959999979;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_13 + 0.0399999991;
    u_xlat13.x = u_xlat16_2 * u_xlat24;
    u_xlat2.x = u_xlat24 * u_xlat16_2 + 2.0;
    u_xlat2.x = u_xlat13.x / u_xlat2.x;
    u_xlat16_1.xyz = u_xlat2.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_34) + u_xlat16_11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
mediump float u_xlat16_13;
bvec2 u_xlatb13;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_11.x = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_11.x * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb5.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb5.w;
    if(u_xlatb13.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9.x = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_1.x = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9.x) + 1.0;
    u_xlat16_2 = u_xlat16_0.x * u_xlat16_2 + u_xlat16_9.x;
    u_xlat16_0.x = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.5);
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat8.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat35 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_1.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat41);
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat3.x = vs_TEXCOORD1.z;
    u_xlat3.y = vs_TEXCOORD2.z;
    u_xlat3.z = vs_TEXCOORD3.z;
    u_xlat3.w = 1.0;
    u_xlat16_9.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_9.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_9.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_10.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_10.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_10.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_34 = vs_TEXCOORD2.z * vs_TEXCOORD2.z;
    u_xlat16_34 = vs_TEXCOORD1.z * vs_TEXCOORD1.z + (-u_xlat16_34);
    u_xlat16_10.xyz = unity_SHC.xyz * vec3(u_xlat16_34) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.959999979, 0.959999979, 0.959999979) + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz;
    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat8.xyz * vec3(u_xlat35) + u_xlat2.xyz;
    u_xlat16_42 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_42 = inversesqrt(u_xlat16_42);
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_24 = u_xlat16_13 * u_xlat16_13;
    u_xlat8.x = u_xlat35 * u_xlat16_24 + (-u_xlat35);
    u_xlat35 = u_xlat8.x * u_xlat35 + 1.0;
    u_xlat35 = u_xlat35 * u_xlat35;
    u_xlat35 = max(u_xlat35, 9.99999997e-07);
    u_xlat24 = u_xlat16_24 / u_xlat35;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat24 = min(u_xlat24, 64.0);
    u_xlat16_13 = (-u_xlat16_13) * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 + u_xlat16_13;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_0.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat2.x * u_xlat16_0.x;
    u_xlat16_2 = u_xlat16_0.x * 0.959999979;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_13 + 0.0399999991;
    u_xlat13.x = u_xlat16_2 * u_xlat24;
    u_xlat2.x = u_xlat24 * u_xlat16_2 + 2.0;
    u_xlat2.x = u_xlat13.x / u_xlat2.x;
    u_xlat16_1.xyz = u_xlat2.xxx * vec3(2.0, 2.0, 2.0) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_34) + u_xlat16_11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
}
}
 Pass {
  Name "HYBRIDDEFERRED"
  LOD 100
  Tags { "DebugView" = "On" "LIGHTMODE" = "HYBRIDDEFERRED" "QUEUE" = "AlphaTest+1" "RenderType" = "Opaque" "TerrainHeight" = "VertexFetch" }
  GpuProgramID 74732
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _SSAO_Intensity;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec2 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump float u_xlat16_6;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_6 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_6 = u_xlat16_6 * _Terrain_Smoothness;
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    SV_Target2.w = min(u_xlat16_6, 0.5);
    u_xlat0.x = vs_TEXCOORD1.z;
    u_xlat0.y = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _SSAO_Intensity;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec2 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump float u_xlat16_6;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_6 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_6 = u_xlat16_6 * _Terrain_Smoothness;
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    SV_Target2.w = min(u_xlat16_6, 0.5);
    u_xlat0.x = vs_TEXCOORD1.z;
    u_xlat0.y = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _TerrainLODLevel;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump float u_xlat16_10;
vec3 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat14;
bvec3 u_xlatb14;
vec2 u_xlat22;
bvec2 u_xlatb22;
vec2 u_xlat23;
vec2 u_xlat25;
bvec2 u_xlatb25;
vec2 u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb11.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb11.x = u_xlatb11.y || u_xlatb11.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb11.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat25.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat2.yyyy, u_xlat25.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat25.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat25.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat30.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat30.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat25.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlatb22.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat29.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat29.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb22.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat22.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat5.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb22.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat28.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat28.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat6.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat30.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat30.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb22.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat3.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat8.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb22.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat22.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat22.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel)));
        u_xlatb3.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel))).xy;
        u_xlat4 = (u_xlatb3.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat3 = (u_xlatb3.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat3 = (u_xlatb0.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat3;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat22.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat22.x = dot(u_xlat22.xy, u_xlat22.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat22.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat11.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat11.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat14.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat14.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat14.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat14.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat11.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat11.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat0.xz = u_xlat11.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat11.x = u_xlat3.y * u_xlat3.x;
            u_xlat22.x = u_xlat0.x * u_xlat11.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat33 = fract((-u_xlat3.x));
            u_xlat33 = u_xlat33 + 0.5;
            u_xlat33 = floor(u_xlat33);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat33 = u_xlat33 + (-u_xlat3.x);
            u_xlat33 = u_xlat33 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat11.x) * u_xlat0.x + 1.0;
            u_xlat14.xyz = (-vec3(u_xlat33)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat14.xyz + vec3(u_xlat33);
            u_xlatb3.xy = lessThan(u_xlat22.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat33) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat11.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + vec3(u_xlat33);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb33 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb33 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb33){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat33 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = max(u_xlat33, u_xlat4.x);
                u_xlat33 = log2(u_xlat33);
                u_xlat33 = u_xlat33 * 0.5;
                u_xlat33 = max(u_xlat33, 0.0);
                u_xlat33 = u_xlat33 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat33);
                u_xlat33 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat14.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat36 = sqrt(u_xlat33);
                u_xlat4.x = sqrt(u_xlat14.x);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat3.z);
                u_xlat14.x = inversesqrt(u_xlat14.x);
                u_xlat3.x = u_xlat14.x * abs(u_xlat3.x);
                u_xlat33 = u_xlat33 * u_xlat3.x;
                u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                u_xlat33 = sqrt(u_xlat33);
                u_xlat3.x = u_xlat36 * u_xlat4.x;
                u_xlat14.x = u_xlat33 * u_xlat3.x;
                u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat25.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat25.xy = fract(u_xlat25.xy);
                u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat4.x = (-u_xlat25.x) + u_xlat4.x;
                u_xlat25.x = u_xlat4.x * u_xlat25.y + u_xlat25.x;
                u_xlat36 = (-u_xlat3.x) * u_xlat33 + 1.0;
                u_xlat4.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat36) * u_xlat4.xyz + u_xlat25.xxx;
                u_xlatb14.xz = lessThan(u_xlat14.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat33 = u_xlat3.x * u_xlat33 + -4.0;
                u_xlat33 = exp2(u_xlat33);
                u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.zyy + u_xlat25.xxx;
                u_xlat3.xzw = (u_xlatb14.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb14.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb33 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb33 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb33){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat25.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat25.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat25.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat25.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat25.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat33);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat14.x = sqrt(u_xlat33);
                    u_xlat25.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat3.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat25.x * u_xlat14.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat23.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat3.x = (-u_xlat23.x) + u_xlat3.x;
                    u_xlat23.x = u_xlat3.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat3.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat34) * u_xlat3.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat2.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat34 = sqrt(u_xlat33);
                    u_xlat2.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat1.z);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat34 * u_xlat2.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat23.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat2.x = (-u_xlat23.x) + u_xlat2.x;
                    u_xlat23.x = u_xlat2.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat2.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_10 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_10 = u_xlat16_10 * _Terrain_Smoothness;
    u_xlat16_10 = max(u_xlat16_10, 0.0);
    SV_Target2.w = min(u_xlat16_10, 0.5);
    u_xlat0.x = vs_TEXCOORD1.z;
    u_xlat0.y = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
struct DebugView_PropsArray_Type {
	float _TerrainLODLevel;
};
layout(std140) uniform UnityInstancing_DebugView_Props {
	DebugView_PropsArray_Type DebugView_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump float u_xlat16_10;
vec3 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat14;
bvec3 u_xlatb14;
vec2 u_xlat22;
bvec2 u_xlatb22;
vec2 u_xlat23;
vec2 u_xlat25;
bvec2 u_xlatb25;
vec2 u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb11.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb11.x = u_xlatb11.y || u_xlatb11.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb11.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat25.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat2.yyyy, u_xlat25.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat25.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat25.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat30.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat30.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat25.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlatb22.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat29.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat29.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb22.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat22.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat5.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb22.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat28.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat28.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat6.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat30.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat30.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb22.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat3.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat8.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb22.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat22.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat22.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
        u_xlatb3 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel));
        u_xlatb0.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel)).xy;
        u_xlat4 = (u_xlatb0.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat0 = (u_xlatb0.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat0 = (u_xlatb3.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat0;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat22.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat22.x = dot(u_xlat22.xy, u_xlat22.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat22.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat11.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat11.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat14.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat14.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat14.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat14.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat11.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat11.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat0.xz = u_xlat11.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat11.x = u_xlat3.y * u_xlat3.x;
            u_xlat22.x = u_xlat0.x * u_xlat11.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat33 = fract((-u_xlat3.x));
            u_xlat33 = u_xlat33 + 0.5;
            u_xlat33 = floor(u_xlat33);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat33 = u_xlat33 + (-u_xlat3.x);
            u_xlat33 = u_xlat33 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat11.x) * u_xlat0.x + 1.0;
            u_xlat14.xyz = (-vec3(u_xlat33)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat14.xyz + vec3(u_xlat33);
            u_xlatb3.xy = lessThan(u_xlat22.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat33) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat11.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + vec3(u_xlat33);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb33 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb33 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb33){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat33 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = max(u_xlat33, u_xlat4.x);
                u_xlat33 = log2(u_xlat33);
                u_xlat33 = u_xlat33 * 0.5;
                u_xlat33 = max(u_xlat33, 0.0);
                u_xlat33 = u_xlat33 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat33);
                u_xlat33 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat14.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat36 = sqrt(u_xlat33);
                u_xlat4.x = sqrt(u_xlat14.x);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat3.z);
                u_xlat14.x = inversesqrt(u_xlat14.x);
                u_xlat3.x = u_xlat14.x * abs(u_xlat3.x);
                u_xlat33 = u_xlat33 * u_xlat3.x;
                u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                u_xlat33 = sqrt(u_xlat33);
                u_xlat3.x = u_xlat36 * u_xlat4.x;
                u_xlat14.x = u_xlat33 * u_xlat3.x;
                u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat25.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat25.xy = fract(u_xlat25.xy);
                u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat4.x = (-u_xlat25.x) + u_xlat4.x;
                u_xlat25.x = u_xlat4.x * u_xlat25.y + u_xlat25.x;
                u_xlat36 = (-u_xlat3.x) * u_xlat33 + 1.0;
                u_xlat4.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat36) * u_xlat4.xyz + u_xlat25.xxx;
                u_xlatb14.xz = lessThan(u_xlat14.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat33 = u_xlat3.x * u_xlat33 + -4.0;
                u_xlat33 = exp2(u_xlat33);
                u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.zyy + u_xlat25.xxx;
                u_xlat3.xzw = (u_xlatb14.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb14.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb33 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb33 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb33){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat25.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat25.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat25.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat25.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat25.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat33);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat14.x = sqrt(u_xlat33);
                    u_xlat25.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat3.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat25.x * u_xlat14.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat23.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat3.x = (-u_xlat23.x) + u_xlat3.x;
                    u_xlat23.x = u_xlat3.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat3.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat34) * u_xlat3.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat2.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat34 = sqrt(u_xlat33);
                    u_xlat2.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat1.z);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat34 * u_xlat2.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat23.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat2.x = (-u_xlat23.x) + u_xlat2.x;
                    u_xlat23.x = u_xlat2.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat2.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_10 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_10 = u_xlat16_10 * _Terrain_Smoothness;
    u_xlat16_10 = max(u_xlat16_10, 0.0);
    SV_Target2.w = min(u_xlat16_10, 0.5);
    u_xlat0.x = vs_TEXCOORD1.z;
    u_xlat0.y = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec2 u_xlat8;
mediump float u_xlat16_9;
vec3 u_xlat11;
bvec2 u_xlatb11;
mediump float u_xlat16_18;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_9 = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_9 * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb11.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb11.x = u_xlatb11.x && u_xlatb5.x;
    u_xlatb11.y = u_xlatb11.y && u_xlatb5.y;
    if(u_xlatb11.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat11.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat11.xz);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb11.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat11.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat11.xy);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb11.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb11.x = u_xlatb11.x && u_xlatb5.z;
    u_xlatb11.y = u_xlatb11.y && u_xlatb5.w;
    if(u_xlatb11.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat11.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat11.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb11.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat11.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat11.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9 = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_18 = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_18 + u_xlat16_0.x;
    u_xlat16_18 = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9) + 1.0;
    u_xlat16_2 = u_xlat16_18 * u_xlat16_2 + u_xlat16_9;
    u_xlat16_9 = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    SV_Target2.w = min(u_xlat16_9, 0.5);
    u_xlat2.x = vs_TEXCOORD1.z;
    u_xlat2.y = vs_TEXCOORD2.z;
    u_xlat2.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb2) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0352941193;
    SV_Target1.w = u_xlat16_0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec2 u_xlat8;
mediump float u_xlat16_9;
vec3 u_xlat11;
bvec2 u_xlatb11;
mediump float u_xlat16_18;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_9 = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_9 * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb11.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb11.x = u_xlatb11.x && u_xlatb5.x;
    u_xlatb11.y = u_xlatb11.y && u_xlatb5.y;
    if(u_xlatb11.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat11.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat11.xz);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb11.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat11.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat11.xy);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb11.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb11.x = u_xlatb11.x && u_xlatb5.z;
    u_xlatb11.y = u_xlatb11.y && u_xlatb5.w;
    if(u_xlatb11.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat11.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat11.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb11.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat11.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat11.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9 = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_18 = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_18 + u_xlat16_0.x;
    u_xlat16_18 = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9) + 1.0;
    u_xlat16_2 = u_xlat16_18 * u_xlat16_2 + u_xlat16_9;
    u_xlat16_9 = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    SV_Target2.w = min(u_xlat16_9, 0.5);
    u_xlat2.x = vs_TEXCOORD1.z;
    u_xlat2.y = vs_TEXCOORD2.z;
    u_xlat2.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb2) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0352941193;
    SV_Target1.w = u_xlat16_0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _TerrainLODLevel;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
vec4 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump float u_xlat16_10;
vec3 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat13;
bvec2 u_xlatb13;
vec3 u_xlat14;
bvec3 u_xlatb14;
mediump float u_xlat16_21;
vec2 u_xlat22;
bvec2 u_xlatb22;
vec2 u_xlat23;
vec2 u_xlat25;
bvec2 u_xlatb25;
vec2 u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb11.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb11.x = u_xlatb11.y || u_xlatb11.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb11.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat25.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat2.yyyy, u_xlat25.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat25.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat25.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat30.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat30.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat25.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlatb22.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat29.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat29.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb22.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat22.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat5.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb22.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat28.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat28.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat6.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat30.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat30.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb22.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat3.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat8.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb22.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat22.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat22.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel)));
        u_xlatb3.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel))).xy;
        u_xlat4 = (u_xlatb3.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat3 = (u_xlatb3.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat3 = (u_xlatb0.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat3;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat22.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat22.x = dot(u_xlat22.xy, u_xlat22.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat22.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat11.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat11.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat14.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat14.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat14.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat14.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat11.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat11.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat0.xz = u_xlat11.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat11.x = u_xlat3.y * u_xlat3.x;
            u_xlat22.x = u_xlat0.x * u_xlat11.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat33 = fract((-u_xlat3.x));
            u_xlat33 = u_xlat33 + 0.5;
            u_xlat33 = floor(u_xlat33);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat33 = u_xlat33 + (-u_xlat3.x);
            u_xlat33 = u_xlat33 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat11.x) * u_xlat0.x + 1.0;
            u_xlat14.xyz = (-vec3(u_xlat33)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat14.xyz + vec3(u_xlat33);
            u_xlatb3.xy = lessThan(u_xlat22.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat33) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat11.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + vec3(u_xlat33);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb33 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb33 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb33){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat33 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = max(u_xlat33, u_xlat4.x);
                u_xlat33 = log2(u_xlat33);
                u_xlat33 = u_xlat33 * 0.5;
                u_xlat33 = max(u_xlat33, 0.0);
                u_xlat33 = u_xlat33 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat33);
                u_xlat33 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat14.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat36 = sqrt(u_xlat33);
                u_xlat4.x = sqrt(u_xlat14.x);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat3.z);
                u_xlat14.x = inversesqrt(u_xlat14.x);
                u_xlat3.x = u_xlat14.x * abs(u_xlat3.x);
                u_xlat33 = u_xlat33 * u_xlat3.x;
                u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                u_xlat33 = sqrt(u_xlat33);
                u_xlat3.x = u_xlat36 * u_xlat4.x;
                u_xlat14.x = u_xlat33 * u_xlat3.x;
                u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat25.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat25.xy = fract(u_xlat25.xy);
                u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat4.x = (-u_xlat25.x) + u_xlat4.x;
                u_xlat25.x = u_xlat4.x * u_xlat25.y + u_xlat25.x;
                u_xlat36 = (-u_xlat3.x) * u_xlat33 + 1.0;
                u_xlat4.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat36) * u_xlat4.xyz + u_xlat25.xxx;
                u_xlatb14.xz = lessThan(u_xlat14.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat33 = u_xlat3.x * u_xlat33 + -4.0;
                u_xlat33 = exp2(u_xlat33);
                u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.zyy + u_xlat25.xxx;
                u_xlat3.xzw = (u_xlatb14.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb14.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb33 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb33 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb33){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat25.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat25.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat25.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat25.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat25.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat33);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat14.x = sqrt(u_xlat33);
                    u_xlat25.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat3.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat25.x * u_xlat14.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat23.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat3.x = (-u_xlat23.x) + u_xlat3.x;
                    u_xlat23.x = u_xlat3.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat3.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat34) * u_xlat3.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat2.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat34 = sqrt(u_xlat33);
                    u_xlat2.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat1.z);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat34 * u_xlat2.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat23.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat2.x = (-u_xlat23.x) + u_xlat2.x;
                    u_xlat23.x = u_xlat2.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat2.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_10 = dot(u_xlat2, u_xlat16_0);
    u_xlat16_21 = u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_21 * u_xlat16_2 + u_xlat16_4.w;
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb3.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb3.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_5 = texture(_Texture_5_Albedo, u_xlat13.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_5_Color;
        u_xlat16_5 = u_xlat0.xxxx * u_xlat16_5;
    } else {
        u_xlat16_5.x = float(0.0);
        u_xlat16_5.y = float(0.0);
        u_xlat16_5.z = float(0.0);
        u_xlat16_5.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat6.xy * vs_TEXCOORD6.yy;
        u_xlat10_6 = texture(_Texture_6_Albedo, u_xlat13.xy);
        u_xlat16_6 = u_xlat10_6 * _Texture_6_Color;
        u_xlat16_5 = u_xlat16_6 * u_xlat0.yyyy + u_xlat16_5;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb3.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb3.w;
    if(u_xlatb13.x){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat7.xy * vs_TEXCOORD6.zz;
        u_xlat10_3 = texture(_Texture_7_Albedo, u_xlat13.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_7_Color;
        u_xlat16_5 = u_xlat16_3 * u_xlat0.zzzz + u_xlat16_5;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.ww;
        u_xlat10_3 = texture(_Texture_8_Albedo, u_xlat13.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_8_Color;
        u_xlat16_5 = u_xlat16_3 * u_xlat0.wwww + u_xlat16_5;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = u_xlat16_2 + u_xlat16_5.w;
    u_xlat16_32 = dot(u_xlat0, u_xlat16_1);
    u_xlat16_10 = u_xlat16_32 + u_xlat16_10;
    u_xlat16_32 = u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_21) + 1.0;
    u_xlat16_2 = u_xlat16_32 * u_xlat16_2 + u_xlat16_21;
    u_xlat16_21 = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    SV_Target2.w = min(u_xlat16_21, 0.5);
    u_xlat2.x = vs_TEXCOORD1.z;
    u_xlat2.y = vs_TEXCOORD2.z;
    u_xlat2.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb2) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0352941193;
    SV_Target1.w = u_xlat16_10;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
struct DebugView_PropsArray_Type {
	float _TerrainLODLevel;
};
layout(std140) uniform UnityInstancing_DebugView_Props {
	DebugView_PropsArray_Type DebugView_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
vec4 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump float u_xlat16_10;
vec3 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat13;
bvec2 u_xlatb13;
vec3 u_xlat14;
bvec3 u_xlatb14;
mediump float u_xlat16_21;
vec2 u_xlat22;
bvec2 u_xlatb22;
vec2 u_xlat23;
vec2 u_xlat25;
bvec2 u_xlatb25;
vec2 u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb11.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb11.x = u_xlatb11.y || u_xlatb11.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb11.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat25.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat2.yyyy, u_xlat25.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat25.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat25.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat30.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat30.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat25.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlatb22.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat29.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat29.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb22.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat22.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat5.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb22.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat28.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat28.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat6.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat30.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat30.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb22.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat3.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat8.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb22.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat22.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat22.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
        u_xlatb3 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel));
        u_xlatb0.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel)).xy;
        u_xlat4 = (u_xlatb0.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat0 = (u_xlatb0.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat0 = (u_xlatb3.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat0;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat22.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat22.x = dot(u_xlat22.xy, u_xlat22.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat22.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat11.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat11.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat14.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat14.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat14.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat14.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat11.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat11.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat0.xz = u_xlat11.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat11.x = u_xlat3.y * u_xlat3.x;
            u_xlat22.x = u_xlat0.x * u_xlat11.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat33 = fract((-u_xlat3.x));
            u_xlat33 = u_xlat33 + 0.5;
            u_xlat33 = floor(u_xlat33);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat33 = u_xlat33 + (-u_xlat3.x);
            u_xlat33 = u_xlat33 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat11.x) * u_xlat0.x + 1.0;
            u_xlat14.xyz = (-vec3(u_xlat33)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat14.xyz + vec3(u_xlat33);
            u_xlatb3.xy = lessThan(u_xlat22.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat33) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat11.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + vec3(u_xlat33);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb33 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb33 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb33){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat33 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = max(u_xlat33, u_xlat4.x);
                u_xlat33 = log2(u_xlat33);
                u_xlat33 = u_xlat33 * 0.5;
                u_xlat33 = max(u_xlat33, 0.0);
                u_xlat33 = u_xlat33 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat33);
                u_xlat33 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat14.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat36 = sqrt(u_xlat33);
                u_xlat4.x = sqrt(u_xlat14.x);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat3.z);
                u_xlat14.x = inversesqrt(u_xlat14.x);
                u_xlat3.x = u_xlat14.x * abs(u_xlat3.x);
                u_xlat33 = u_xlat33 * u_xlat3.x;
                u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                u_xlat33 = sqrt(u_xlat33);
                u_xlat3.x = u_xlat36 * u_xlat4.x;
                u_xlat14.x = u_xlat33 * u_xlat3.x;
                u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat25.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat25.xy = fract(u_xlat25.xy);
                u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat4.x = (-u_xlat25.x) + u_xlat4.x;
                u_xlat25.x = u_xlat4.x * u_xlat25.y + u_xlat25.x;
                u_xlat36 = (-u_xlat3.x) * u_xlat33 + 1.0;
                u_xlat4.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat36) * u_xlat4.xyz + u_xlat25.xxx;
                u_xlatb14.xz = lessThan(u_xlat14.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat33 = u_xlat3.x * u_xlat33 + -4.0;
                u_xlat33 = exp2(u_xlat33);
                u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.zyy + u_xlat25.xxx;
                u_xlat3.xzw = (u_xlatb14.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb14.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb33 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb33 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb33){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat25.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat25.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat25.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat25.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat25.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat33);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat14.x = sqrt(u_xlat33);
                    u_xlat25.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat3.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat25.x * u_xlat14.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat23.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat3.x = (-u_xlat23.x) + u_xlat3.x;
                    u_xlat23.x = u_xlat3.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat3.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat34) * u_xlat3.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat2.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat34 = sqrt(u_xlat33);
                    u_xlat2.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat1.z);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat34 * u_xlat2.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat23.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat2.x = (-u_xlat23.x) + u_xlat2.x;
                    u_xlat23.x = u_xlat2.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat2.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_10 = dot(u_xlat2, u_xlat16_0);
    u_xlat16_21 = u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_21 * u_xlat16_2 + u_xlat16_4.w;
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb3.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb3.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_5 = texture(_Texture_5_Albedo, u_xlat13.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_5_Color;
        u_xlat16_5 = u_xlat0.xxxx * u_xlat16_5;
    } else {
        u_xlat16_5.x = float(0.0);
        u_xlat16_5.y = float(0.0);
        u_xlat16_5.z = float(0.0);
        u_xlat16_5.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat6.xy * vs_TEXCOORD6.yy;
        u_xlat10_6 = texture(_Texture_6_Albedo, u_xlat13.xy);
        u_xlat16_6 = u_xlat10_6 * _Texture_6_Color;
        u_xlat16_5 = u_xlat16_6 * u_xlat0.yyyy + u_xlat16_5;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb3.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb3.w;
    if(u_xlatb13.x){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat7.xy * vs_TEXCOORD6.zz;
        u_xlat10_3 = texture(_Texture_7_Albedo, u_xlat13.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_7_Color;
        u_xlat16_5 = u_xlat16_3 * u_xlat0.zzzz + u_xlat16_5;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.ww;
        u_xlat10_3 = texture(_Texture_8_Albedo, u_xlat13.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_8_Color;
        u_xlat16_5 = u_xlat16_3 * u_xlat0.wwww + u_xlat16_5;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = u_xlat16_2 + u_xlat16_5.w;
    u_xlat16_32 = dot(u_xlat0, u_xlat16_1);
    u_xlat16_10 = u_xlat16_32 + u_xlat16_10;
    u_xlat16_32 = u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_21) + 1.0;
    u_xlat16_2 = u_xlat16_32 * u_xlat16_2 + u_xlat16_21;
    u_xlat16_21 = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    SV_Target2.w = min(u_xlat16_21, 0.5);
    u_xlat2.x = vs_TEXCOORD1.z;
    u_xlat2.y = vs_TEXCOORD2.z;
    u_xlat2.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb2) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0352941193;
    SV_Target1.w = u_xlat16_10;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _SSAO_Intensity;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec2 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump float u_xlat16_6;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy, -1.0);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_6 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_6 = u_xlat16_6 * _Terrain_Smoothness;
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    SV_Target2.w = min(u_xlat16_6, 0.5);
    u_xlat0.x = vs_TEXCOORD1.z;
    u_xlat0.y = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _SSAO_Intensity;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec2 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump float u_xlat16_6;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy, -1.0);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_6 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_6 = u_xlat16_6 * _Terrain_Smoothness;
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    SV_Target2.w = min(u_xlat16_6, 0.5);
    u_xlat0.x = vs_TEXCOORD1.z;
    u_xlat0.y = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _TerrainLODLevel;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump float u_xlat16_10;
vec3 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat14;
bvec3 u_xlatb14;
vec2 u_xlat22;
bvec2 u_xlatb22;
vec2 u_xlat23;
vec2 u_xlat25;
bvec2 u_xlatb25;
vec2 u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb11.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb11.x = u_xlatb11.y || u_xlatb11.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb11.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat25.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat2.yyyy, u_xlat25.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat25.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat25.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat30.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat30.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat25.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlatb22.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat29.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat29.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb22.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat22.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat5.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb22.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat28.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat28.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat6.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat30.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat30.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb22.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat3.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat8.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb22.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat22.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat22.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel)));
        u_xlatb3.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel))).xy;
        u_xlat4 = (u_xlatb3.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat3 = (u_xlatb3.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat3 = (u_xlatb0.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat3;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat22.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat22.x = dot(u_xlat22.xy, u_xlat22.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat22.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat11.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat11.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat14.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat14.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat14.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat14.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat11.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat11.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat0.xz = u_xlat11.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat11.x = u_xlat3.y * u_xlat3.x;
            u_xlat22.x = u_xlat0.x * u_xlat11.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat33 = fract((-u_xlat3.x));
            u_xlat33 = u_xlat33 + 0.5;
            u_xlat33 = floor(u_xlat33);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat33 = u_xlat33 + (-u_xlat3.x);
            u_xlat33 = u_xlat33 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat11.x) * u_xlat0.x + 1.0;
            u_xlat14.xyz = (-vec3(u_xlat33)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat14.xyz + vec3(u_xlat33);
            u_xlatb3.xy = lessThan(u_xlat22.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat33) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat11.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + vec3(u_xlat33);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb33 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb33 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb33){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat33 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = max(u_xlat33, u_xlat4.x);
                u_xlat33 = log2(u_xlat33);
                u_xlat33 = u_xlat33 * 0.5;
                u_xlat33 = max(u_xlat33, 0.0);
                u_xlat33 = u_xlat33 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat33);
                u_xlat33 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat14.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat36 = sqrt(u_xlat33);
                u_xlat4.x = sqrt(u_xlat14.x);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat3.z);
                u_xlat14.x = inversesqrt(u_xlat14.x);
                u_xlat3.x = u_xlat14.x * abs(u_xlat3.x);
                u_xlat33 = u_xlat33 * u_xlat3.x;
                u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                u_xlat33 = sqrt(u_xlat33);
                u_xlat3.x = u_xlat36 * u_xlat4.x;
                u_xlat14.x = u_xlat33 * u_xlat3.x;
                u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat25.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat25.xy = fract(u_xlat25.xy);
                u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat4.x = (-u_xlat25.x) + u_xlat4.x;
                u_xlat25.x = u_xlat4.x * u_xlat25.y + u_xlat25.x;
                u_xlat36 = (-u_xlat3.x) * u_xlat33 + 1.0;
                u_xlat4.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat36) * u_xlat4.xyz + u_xlat25.xxx;
                u_xlatb14.xz = lessThan(u_xlat14.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat33 = u_xlat3.x * u_xlat33 + -4.0;
                u_xlat33 = exp2(u_xlat33);
                u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.zyy + u_xlat25.xxx;
                u_xlat3.xzw = (u_xlatb14.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb14.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb33 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb33 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb33){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat25.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat25.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat25.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat25.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat25.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat33);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat14.x = sqrt(u_xlat33);
                    u_xlat25.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat3.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat25.x * u_xlat14.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat23.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat3.x = (-u_xlat23.x) + u_xlat3.x;
                    u_xlat23.x = u_xlat3.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat3.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat34) * u_xlat3.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat2.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat34 = sqrt(u_xlat33);
                    u_xlat2.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat1.z);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat34 * u_xlat2.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat23.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat2.x = (-u_xlat23.x) + u_xlat2.x;
                    u_xlat23.x = u_xlat2.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat2.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy, -1.0);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_10 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_10 = u_xlat16_10 * _Terrain_Smoothness;
    u_xlat16_10 = max(u_xlat16_10, 0.0);
    SV_Target2.w = min(u_xlat16_10, 0.5);
    u_xlat0.x = vs_TEXCOORD1.z;
    u_xlat0.y = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
struct DebugView_PropsArray_Type {
	float _TerrainLODLevel;
};
layout(std140) uniform UnityInstancing_DebugView_Props {
	DebugView_PropsArray_Type DebugView_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump float u_xlat16_10;
vec3 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat14;
bvec3 u_xlatb14;
vec2 u_xlat22;
bvec2 u_xlatb22;
vec2 u_xlat23;
vec2 u_xlat25;
bvec2 u_xlatb25;
vec2 u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb11.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb11.x = u_xlatb11.y || u_xlatb11.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb11.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat25.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat2.yyyy, u_xlat25.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat25.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat25.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat30.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat30.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat25.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlatb22.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat29.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat29.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb22.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat22.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat5.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb22.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat28.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat28.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat6.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat30.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat30.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb22.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat3.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat8.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb22.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat22.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat22.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
        u_xlatb3 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel));
        u_xlatb0.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel)).xy;
        u_xlat4 = (u_xlatb0.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat0 = (u_xlatb0.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat0 = (u_xlatb3.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat0;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat22.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat22.x = dot(u_xlat22.xy, u_xlat22.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat22.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat11.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat11.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat14.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat14.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat14.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat14.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat11.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat11.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat0.xz = u_xlat11.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat11.x = u_xlat3.y * u_xlat3.x;
            u_xlat22.x = u_xlat0.x * u_xlat11.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat33 = fract((-u_xlat3.x));
            u_xlat33 = u_xlat33 + 0.5;
            u_xlat33 = floor(u_xlat33);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat33 = u_xlat33 + (-u_xlat3.x);
            u_xlat33 = u_xlat33 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat11.x) * u_xlat0.x + 1.0;
            u_xlat14.xyz = (-vec3(u_xlat33)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat14.xyz + vec3(u_xlat33);
            u_xlatb3.xy = lessThan(u_xlat22.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat33) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat11.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + vec3(u_xlat33);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb33 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb33 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb33){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat33 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = max(u_xlat33, u_xlat4.x);
                u_xlat33 = log2(u_xlat33);
                u_xlat33 = u_xlat33 * 0.5;
                u_xlat33 = max(u_xlat33, 0.0);
                u_xlat33 = u_xlat33 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat33);
                u_xlat33 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat14.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat36 = sqrt(u_xlat33);
                u_xlat4.x = sqrt(u_xlat14.x);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat3.z);
                u_xlat14.x = inversesqrt(u_xlat14.x);
                u_xlat3.x = u_xlat14.x * abs(u_xlat3.x);
                u_xlat33 = u_xlat33 * u_xlat3.x;
                u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                u_xlat33 = sqrt(u_xlat33);
                u_xlat3.x = u_xlat36 * u_xlat4.x;
                u_xlat14.x = u_xlat33 * u_xlat3.x;
                u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat25.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat25.xy = fract(u_xlat25.xy);
                u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat4.x = (-u_xlat25.x) + u_xlat4.x;
                u_xlat25.x = u_xlat4.x * u_xlat25.y + u_xlat25.x;
                u_xlat36 = (-u_xlat3.x) * u_xlat33 + 1.0;
                u_xlat4.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat36) * u_xlat4.xyz + u_xlat25.xxx;
                u_xlatb14.xz = lessThan(u_xlat14.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat33 = u_xlat3.x * u_xlat33 + -4.0;
                u_xlat33 = exp2(u_xlat33);
                u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.zyy + u_xlat25.xxx;
                u_xlat3.xzw = (u_xlatb14.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb14.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb33 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb33 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb33){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat25.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat25.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat25.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat25.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat25.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat33);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat14.x = sqrt(u_xlat33);
                    u_xlat25.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat3.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat25.x * u_xlat14.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat23.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat3.x = (-u_xlat23.x) + u_xlat3.x;
                    u_xlat23.x = u_xlat3.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat3.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat34) * u_xlat3.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat2.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat34 = sqrt(u_xlat33);
                    u_xlat2.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat1.z);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat34 * u_xlat2.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat23.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat2.x = (-u_xlat23.x) + u_xlat2.x;
                    u_xlat23.x = u_xlat2.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat2.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy, -1.0);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_10 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_10 = u_xlat16_10 * _Terrain_Smoothness;
    u_xlat16_10 = max(u_xlat16_10, 0.0);
    SV_Target2.w = min(u_xlat16_10, 0.5);
    u_xlat0.x = vs_TEXCOORD1.z;
    u_xlat0.y = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec2 u_xlat8;
mediump float u_xlat16_9;
vec3 u_xlat11;
bvec2 u_xlatb11;
mediump float u_xlat16_18;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_9 = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_9 * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb11.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb11.x = u_xlatb11.x && u_xlatb5.x;
    u_xlatb11.y = u_xlatb11.y && u_xlatb5.y;
    if(u_xlatb11.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat11.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat11.xz, -1.0);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb11.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat11.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat11.xy, -1.0);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb11.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb11.x = u_xlatb11.x && u_xlatb5.z;
    u_xlatb11.y = u_xlatb11.y && u_xlatb5.w;
    if(u_xlatb11.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat11.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat11.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb11.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat11.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat11.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9 = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_18 = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_18 + u_xlat16_0.x;
    u_xlat16_18 = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9) + 1.0;
    u_xlat16_2 = u_xlat16_18 * u_xlat16_2 + u_xlat16_9;
    u_xlat16_9 = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    SV_Target2.w = min(u_xlat16_9, 0.5);
    u_xlat2.x = vs_TEXCOORD1.z;
    u_xlat2.y = vs_TEXCOORD2.z;
    u_xlat2.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb2) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0352941193;
    SV_Target1.w = u_xlat16_0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec2 u_xlat8;
mediump float u_xlat16_9;
vec3 u_xlat11;
bvec2 u_xlatb11;
mediump float u_xlat16_18;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_9 = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_9 * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb11.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb11.x = u_xlatb11.x && u_xlatb5.x;
    u_xlatb11.y = u_xlatb11.y && u_xlatb5.y;
    if(u_xlatb11.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat11.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat11.xz, -1.0);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb11.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat11.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat11.xy, -1.0);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb11.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb11.x = u_xlatb11.x && u_xlatb5.z;
    u_xlatb11.y = u_xlatb11.y && u_xlatb5.w;
    if(u_xlatb11.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat11.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat11.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb11.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat11.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat11.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9 = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_18 = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_18 + u_xlat16_0.x;
    u_xlat16_18 = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9) + 1.0;
    u_xlat16_2 = u_xlat16_18 * u_xlat16_2 + u_xlat16_9;
    u_xlat16_9 = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    SV_Target2.w = min(u_xlat16_9, 0.5);
    u_xlat2.x = vs_TEXCOORD1.z;
    u_xlat2.y = vs_TEXCOORD2.z;
    u_xlat2.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb2) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0352941193;
    SV_Target1.w = u_xlat16_0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _TerrainLODLevel;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
vec4 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump float u_xlat16_10;
vec3 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat13;
bvec2 u_xlatb13;
vec3 u_xlat14;
bvec3 u_xlatb14;
mediump float u_xlat16_21;
vec2 u_xlat22;
bvec2 u_xlatb22;
vec2 u_xlat23;
vec2 u_xlat25;
bvec2 u_xlatb25;
vec2 u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb11.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb11.x = u_xlatb11.y || u_xlatb11.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb11.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat25.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat2.yyyy, u_xlat25.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat25.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat25.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat30.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat30.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat25.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlatb22.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat29.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat29.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb22.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat22.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat5.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb22.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat28.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat28.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat6.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat30.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat30.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb22.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat3.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat8.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb22.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat22.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat22.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel)));
        u_xlatb3.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel))).xy;
        u_xlat4 = (u_xlatb3.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat3 = (u_xlatb3.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat3 = (u_xlatb0.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat3;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat22.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat22.x = dot(u_xlat22.xy, u_xlat22.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat22.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat11.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat11.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat14.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat14.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat14.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat14.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat11.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat11.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat0.xz = u_xlat11.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat11.x = u_xlat3.y * u_xlat3.x;
            u_xlat22.x = u_xlat0.x * u_xlat11.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat33 = fract((-u_xlat3.x));
            u_xlat33 = u_xlat33 + 0.5;
            u_xlat33 = floor(u_xlat33);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat33 = u_xlat33 + (-u_xlat3.x);
            u_xlat33 = u_xlat33 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat11.x) * u_xlat0.x + 1.0;
            u_xlat14.xyz = (-vec3(u_xlat33)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat14.xyz + vec3(u_xlat33);
            u_xlatb3.xy = lessThan(u_xlat22.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat33) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat11.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + vec3(u_xlat33);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb33 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb33 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb33){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat33 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = max(u_xlat33, u_xlat4.x);
                u_xlat33 = log2(u_xlat33);
                u_xlat33 = u_xlat33 * 0.5;
                u_xlat33 = max(u_xlat33, 0.0);
                u_xlat33 = u_xlat33 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat33);
                u_xlat33 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat14.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat36 = sqrt(u_xlat33);
                u_xlat4.x = sqrt(u_xlat14.x);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat3.z);
                u_xlat14.x = inversesqrt(u_xlat14.x);
                u_xlat3.x = u_xlat14.x * abs(u_xlat3.x);
                u_xlat33 = u_xlat33 * u_xlat3.x;
                u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                u_xlat33 = sqrt(u_xlat33);
                u_xlat3.x = u_xlat36 * u_xlat4.x;
                u_xlat14.x = u_xlat33 * u_xlat3.x;
                u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat25.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat25.xy = fract(u_xlat25.xy);
                u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat4.x = (-u_xlat25.x) + u_xlat4.x;
                u_xlat25.x = u_xlat4.x * u_xlat25.y + u_xlat25.x;
                u_xlat36 = (-u_xlat3.x) * u_xlat33 + 1.0;
                u_xlat4.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat36) * u_xlat4.xyz + u_xlat25.xxx;
                u_xlatb14.xz = lessThan(u_xlat14.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat33 = u_xlat3.x * u_xlat33 + -4.0;
                u_xlat33 = exp2(u_xlat33);
                u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.zyy + u_xlat25.xxx;
                u_xlat3.xzw = (u_xlatb14.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb14.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb33 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb33 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb33){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat25.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat25.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat25.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat25.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat25.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat33);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat14.x = sqrt(u_xlat33);
                    u_xlat25.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat3.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat25.x * u_xlat14.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat23.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat3.x = (-u_xlat23.x) + u_xlat3.x;
                    u_xlat23.x = u_xlat3.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat3.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat34) * u_xlat3.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat2.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat34 = sqrt(u_xlat33);
                    u_xlat2.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat1.z);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat34 * u_xlat2.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat23.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat2.x = (-u_xlat23.x) + u_xlat2.x;
                    u_xlat23.x = u_xlat2.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat2.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_10 = dot(u_xlat2, u_xlat16_0);
    u_xlat16_21 = u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_21 * u_xlat16_2 + u_xlat16_4.w;
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb3.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb3.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_5 = texture(_Texture_5_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_5_Color;
        u_xlat16_5 = u_xlat0.xxxx * u_xlat16_5;
    } else {
        u_xlat16_5.x = float(0.0);
        u_xlat16_5.y = float(0.0);
        u_xlat16_5.z = float(0.0);
        u_xlat16_5.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat6.xy * vs_TEXCOORD6.yy;
        u_xlat10_6 = texture(_Texture_6_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_6 = u_xlat10_6 * _Texture_6_Color;
        u_xlat16_5 = u_xlat16_6 * u_xlat0.yyyy + u_xlat16_5;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb3.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb3.w;
    if(u_xlatb13.x){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat7.xy * vs_TEXCOORD6.zz;
        u_xlat10_3 = texture(_Texture_7_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_7_Color;
        u_xlat16_5 = u_xlat16_3 * u_xlat0.zzzz + u_xlat16_5;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.ww;
        u_xlat10_3 = texture(_Texture_8_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_8_Color;
        u_xlat16_5 = u_xlat16_3 * u_xlat0.wwww + u_xlat16_5;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = u_xlat16_2 + u_xlat16_5.w;
    u_xlat16_32 = dot(u_xlat0, u_xlat16_1);
    u_xlat16_10 = u_xlat16_32 + u_xlat16_10;
    u_xlat16_32 = u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_21) + 1.0;
    u_xlat16_2 = u_xlat16_32 * u_xlat16_2 + u_xlat16_21;
    u_xlat16_21 = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    SV_Target2.w = min(u_xlat16_21, 0.5);
    u_xlat2.x = vs_TEXCOORD1.z;
    u_xlat2.y = vs_TEXCOORD2.z;
    u_xlat2.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb2) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0352941193;
    SV_Target1.w = u_xlat16_10;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
struct DebugView_PropsArray_Type {
	float _TerrainLODLevel;
};
layout(std140) uniform UnityInstancing_DebugView_Props {
	DebugView_PropsArray_Type DebugView_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
vec4 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump float u_xlat16_10;
vec3 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat13;
bvec2 u_xlatb13;
vec3 u_xlat14;
bvec3 u_xlatb14;
mediump float u_xlat16_21;
vec2 u_xlat22;
bvec2 u_xlatb22;
vec2 u_xlat23;
vec2 u_xlat25;
bvec2 u_xlatb25;
vec2 u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb11.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb11.x = u_xlatb11.y || u_xlatb11.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb11.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat25.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat2.yyyy, u_xlat25.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat25.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat25.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat30.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat30.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat25.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlatb22.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat29.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat29.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb22.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat22.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat5.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb22.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat28.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat28.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat6.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat30.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat30.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb22.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat3.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat8.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb22.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat22.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat22.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
        u_xlatb3 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel));
        u_xlatb0.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel)).xy;
        u_xlat4 = (u_xlatb0.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat0 = (u_xlatb0.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat0 = (u_xlatb3.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat0;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat22.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat22.x = dot(u_xlat22.xy, u_xlat22.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat22.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat11.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat11.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat14.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat14.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat14.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat14.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat11.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat11.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat0.xz = u_xlat11.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat11.x = u_xlat3.y * u_xlat3.x;
            u_xlat22.x = u_xlat0.x * u_xlat11.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat33 = fract((-u_xlat3.x));
            u_xlat33 = u_xlat33 + 0.5;
            u_xlat33 = floor(u_xlat33);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat33 = u_xlat33 + (-u_xlat3.x);
            u_xlat33 = u_xlat33 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat11.x) * u_xlat0.x + 1.0;
            u_xlat14.xyz = (-vec3(u_xlat33)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat14.xyz + vec3(u_xlat33);
            u_xlatb3.xy = lessThan(u_xlat22.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat33) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat11.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + vec3(u_xlat33);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb33 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb33 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb33){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat33 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = max(u_xlat33, u_xlat4.x);
                u_xlat33 = log2(u_xlat33);
                u_xlat33 = u_xlat33 * 0.5;
                u_xlat33 = max(u_xlat33, 0.0);
                u_xlat33 = u_xlat33 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat33);
                u_xlat33 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat14.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat36 = sqrt(u_xlat33);
                u_xlat4.x = sqrt(u_xlat14.x);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat3.z);
                u_xlat14.x = inversesqrt(u_xlat14.x);
                u_xlat3.x = u_xlat14.x * abs(u_xlat3.x);
                u_xlat33 = u_xlat33 * u_xlat3.x;
                u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                u_xlat33 = sqrt(u_xlat33);
                u_xlat3.x = u_xlat36 * u_xlat4.x;
                u_xlat14.x = u_xlat33 * u_xlat3.x;
                u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat25.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat25.xy = fract(u_xlat25.xy);
                u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat4.x = (-u_xlat25.x) + u_xlat4.x;
                u_xlat25.x = u_xlat4.x * u_xlat25.y + u_xlat25.x;
                u_xlat36 = (-u_xlat3.x) * u_xlat33 + 1.0;
                u_xlat4.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat36) * u_xlat4.xyz + u_xlat25.xxx;
                u_xlatb14.xz = lessThan(u_xlat14.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat33 = u_xlat3.x * u_xlat33 + -4.0;
                u_xlat33 = exp2(u_xlat33);
                u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.zyy + u_xlat25.xxx;
                u_xlat3.xzw = (u_xlatb14.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb14.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb33 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb33 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb33){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat25.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat25.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat25.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat25.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat25.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat33);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat14.x = sqrt(u_xlat33);
                    u_xlat25.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat3.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat25.x * u_xlat14.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat23.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat3.x = (-u_xlat23.x) + u_xlat3.x;
                    u_xlat23.x = u_xlat3.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat3.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat34) * u_xlat3.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat2.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat34 = sqrt(u_xlat33);
                    u_xlat2.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat1.z);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat34 * u_xlat2.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat23.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat2.x = (-u_xlat23.x) + u_xlat2.x;
                    u_xlat23.x = u_xlat2.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat2.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_10 = dot(u_xlat2, u_xlat16_0);
    u_xlat16_21 = u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_21 * u_xlat16_2 + u_xlat16_4.w;
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb3.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb3.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_5 = texture(_Texture_5_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_5_Color;
        u_xlat16_5 = u_xlat0.xxxx * u_xlat16_5;
    } else {
        u_xlat16_5.x = float(0.0);
        u_xlat16_5.y = float(0.0);
        u_xlat16_5.z = float(0.0);
        u_xlat16_5.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat6.xy * vs_TEXCOORD6.yy;
        u_xlat10_6 = texture(_Texture_6_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_6 = u_xlat10_6 * _Texture_6_Color;
        u_xlat16_5 = u_xlat16_6 * u_xlat0.yyyy + u_xlat16_5;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb3.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb3.w;
    if(u_xlatb13.x){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat7.xy * vs_TEXCOORD6.zz;
        u_xlat10_3 = texture(_Texture_7_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_7_Color;
        u_xlat16_5 = u_xlat16_3 * u_xlat0.zzzz + u_xlat16_5;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.ww;
        u_xlat10_3 = texture(_Texture_8_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_8_Color;
        u_xlat16_5 = u_xlat16_3 * u_xlat0.wwww + u_xlat16_5;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = u_xlat16_2 + u_xlat16_5.w;
    u_xlat16_32 = dot(u_xlat0, u_xlat16_1);
    u_xlat16_10 = u_xlat16_32 + u_xlat16_10;
    u_xlat16_32 = u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_21) + 1.0;
    u_xlat16_2 = u_xlat16_32 * u_xlat16_2 + u_xlat16_21;
    u_xlat16_21 = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    SV_Target2.w = min(u_xlat16_21, 0.5);
    u_xlat2.x = vs_TEXCOORD1.z;
    u_xlat2.y = vs_TEXCOORD2.z;
    u_xlat2.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb2) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0352941193;
    SV_Target1.w = u_xlat16_10;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _SSAO_Intensity;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec2 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump float u_xlat16_6;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_6 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_6 = u_xlat16_6 * _Terrain_Smoothness;
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    SV_Target2.w = min(u_xlat16_6, 0.5);
    u_xlat0.x = vs_TEXCOORD1.z;
    u_xlat0.y = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _SSAO_Intensity;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec2 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump float u_xlat16_6;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_6 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_6 = u_xlat16_6 * _Terrain_Smoothness;
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    SV_Target2.w = min(u_xlat16_6, 0.5);
    u_xlat0.x = vs_TEXCOORD1.z;
    u_xlat0.y = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _TerrainLODLevel;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump float u_xlat16_10;
vec3 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat14;
bvec3 u_xlatb14;
vec2 u_xlat22;
bvec2 u_xlatb22;
vec2 u_xlat23;
vec2 u_xlat25;
bvec2 u_xlatb25;
vec2 u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb11.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb11.x = u_xlatb11.y || u_xlatb11.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb11.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat25.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat2.yyyy, u_xlat25.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat25.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat25.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat30.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat30.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat25.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlatb22.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat29.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat29.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb22.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat22.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat5.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb22.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat28.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat28.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat6.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat30.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat30.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb22.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat3.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat8.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb22.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat22.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat22.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel)));
        u_xlatb3.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel))).xy;
        u_xlat4 = (u_xlatb3.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat3 = (u_xlatb3.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat3 = (u_xlatb0.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat3;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat22.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat22.x = dot(u_xlat22.xy, u_xlat22.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat22.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat11.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat11.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat14.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat14.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat14.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat14.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat11.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat11.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat0.xz = u_xlat11.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat11.x = u_xlat3.y * u_xlat3.x;
            u_xlat22.x = u_xlat0.x * u_xlat11.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat33 = fract((-u_xlat3.x));
            u_xlat33 = u_xlat33 + 0.5;
            u_xlat33 = floor(u_xlat33);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat33 = u_xlat33 + (-u_xlat3.x);
            u_xlat33 = u_xlat33 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat11.x) * u_xlat0.x + 1.0;
            u_xlat14.xyz = (-vec3(u_xlat33)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat14.xyz + vec3(u_xlat33);
            u_xlatb3.xy = lessThan(u_xlat22.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat33) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat11.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + vec3(u_xlat33);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb33 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb33 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb33){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat33 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = max(u_xlat33, u_xlat4.x);
                u_xlat33 = log2(u_xlat33);
                u_xlat33 = u_xlat33 * 0.5;
                u_xlat33 = max(u_xlat33, 0.0);
                u_xlat33 = u_xlat33 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat33);
                u_xlat33 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat14.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat36 = sqrt(u_xlat33);
                u_xlat4.x = sqrt(u_xlat14.x);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat3.z);
                u_xlat14.x = inversesqrt(u_xlat14.x);
                u_xlat3.x = u_xlat14.x * abs(u_xlat3.x);
                u_xlat33 = u_xlat33 * u_xlat3.x;
                u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                u_xlat33 = sqrt(u_xlat33);
                u_xlat3.x = u_xlat36 * u_xlat4.x;
                u_xlat14.x = u_xlat33 * u_xlat3.x;
                u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat25.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat25.xy = fract(u_xlat25.xy);
                u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat4.x = (-u_xlat25.x) + u_xlat4.x;
                u_xlat25.x = u_xlat4.x * u_xlat25.y + u_xlat25.x;
                u_xlat36 = (-u_xlat3.x) * u_xlat33 + 1.0;
                u_xlat4.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat36) * u_xlat4.xyz + u_xlat25.xxx;
                u_xlatb14.xz = lessThan(u_xlat14.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat33 = u_xlat3.x * u_xlat33 + -4.0;
                u_xlat33 = exp2(u_xlat33);
                u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.zyy + u_xlat25.xxx;
                u_xlat3.xzw = (u_xlatb14.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb14.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb33 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb33 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb33){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat25.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat25.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat25.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat25.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat25.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat33);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat14.x = sqrt(u_xlat33);
                    u_xlat25.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat3.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat25.x * u_xlat14.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat23.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat3.x = (-u_xlat23.x) + u_xlat3.x;
                    u_xlat23.x = u_xlat3.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat3.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat34) * u_xlat3.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat2.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat34 = sqrt(u_xlat33);
                    u_xlat2.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat1.z);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat34 * u_xlat2.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat23.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat2.x = (-u_xlat23.x) + u_xlat2.x;
                    u_xlat23.x = u_xlat2.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat2.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_10 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_10 = u_xlat16_10 * _Terrain_Smoothness;
    u_xlat16_10 = max(u_xlat16_10, 0.0);
    SV_Target2.w = min(u_xlat16_10, 0.5);
    u_xlat0.x = vs_TEXCOORD1.z;
    u_xlat0.y = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
struct DebugView_PropsArray_Type {
	float _TerrainLODLevel;
};
layout(std140) uniform UnityInstancing_DebugView_Props {
	DebugView_PropsArray_Type DebugView_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump float u_xlat16_10;
vec3 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat14;
bvec3 u_xlatb14;
vec2 u_xlat22;
bvec2 u_xlatb22;
vec2 u_xlat23;
vec2 u_xlat25;
bvec2 u_xlatb25;
vec2 u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb11.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb11.x = u_xlatb11.y || u_xlatb11.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb11.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat25.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat2.yyyy, u_xlat25.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat25.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat25.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat30.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat30.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat25.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlatb22.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat29.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat29.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb22.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat22.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat5.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb22.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat28.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat28.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat6.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat30.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat30.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb22.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat3.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat8.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb22.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat22.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat22.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
        u_xlatb3 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel));
        u_xlatb0.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel)).xy;
        u_xlat4 = (u_xlatb0.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat0 = (u_xlatb0.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat0 = (u_xlatb3.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat0;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat22.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat22.x = dot(u_xlat22.xy, u_xlat22.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat22.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat11.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat11.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat14.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat14.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat14.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat14.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat11.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat11.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat0.xz = u_xlat11.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat11.x = u_xlat3.y * u_xlat3.x;
            u_xlat22.x = u_xlat0.x * u_xlat11.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat33 = fract((-u_xlat3.x));
            u_xlat33 = u_xlat33 + 0.5;
            u_xlat33 = floor(u_xlat33);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat33 = u_xlat33 + (-u_xlat3.x);
            u_xlat33 = u_xlat33 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat11.x) * u_xlat0.x + 1.0;
            u_xlat14.xyz = (-vec3(u_xlat33)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat14.xyz + vec3(u_xlat33);
            u_xlatb3.xy = lessThan(u_xlat22.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat33) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat11.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + vec3(u_xlat33);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb33 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb33 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb33){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat33 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = max(u_xlat33, u_xlat4.x);
                u_xlat33 = log2(u_xlat33);
                u_xlat33 = u_xlat33 * 0.5;
                u_xlat33 = max(u_xlat33, 0.0);
                u_xlat33 = u_xlat33 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat33);
                u_xlat33 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat14.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat36 = sqrt(u_xlat33);
                u_xlat4.x = sqrt(u_xlat14.x);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat3.z);
                u_xlat14.x = inversesqrt(u_xlat14.x);
                u_xlat3.x = u_xlat14.x * abs(u_xlat3.x);
                u_xlat33 = u_xlat33 * u_xlat3.x;
                u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                u_xlat33 = sqrt(u_xlat33);
                u_xlat3.x = u_xlat36 * u_xlat4.x;
                u_xlat14.x = u_xlat33 * u_xlat3.x;
                u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat25.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat25.xy = fract(u_xlat25.xy);
                u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat4.x = (-u_xlat25.x) + u_xlat4.x;
                u_xlat25.x = u_xlat4.x * u_xlat25.y + u_xlat25.x;
                u_xlat36 = (-u_xlat3.x) * u_xlat33 + 1.0;
                u_xlat4.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat36) * u_xlat4.xyz + u_xlat25.xxx;
                u_xlatb14.xz = lessThan(u_xlat14.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat33 = u_xlat3.x * u_xlat33 + -4.0;
                u_xlat33 = exp2(u_xlat33);
                u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.zyy + u_xlat25.xxx;
                u_xlat3.xzw = (u_xlatb14.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb14.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb33 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb33 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb33){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat25.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat25.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat25.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat25.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat25.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat33);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat14.x = sqrt(u_xlat33);
                    u_xlat25.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat3.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat25.x * u_xlat14.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat23.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat3.x = (-u_xlat23.x) + u_xlat3.x;
                    u_xlat23.x = u_xlat3.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat3.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat34) * u_xlat3.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat2.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat34 = sqrt(u_xlat33);
                    u_xlat2.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat1.z);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat34 * u_xlat2.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat23.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat2.x = (-u_xlat23.x) + u_xlat2.x;
                    u_xlat23.x = u_xlat2.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat2.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_10 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_10 = u_xlat16_10 * _Terrain_Smoothness;
    u_xlat16_10 = max(u_xlat16_10, 0.0);
    SV_Target2.w = min(u_xlat16_10, 0.5);
    u_xlat0.x = vs_TEXCOORD1.z;
    u_xlat0.y = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec2 u_xlat8;
mediump float u_xlat16_9;
vec3 u_xlat11;
bvec2 u_xlatb11;
mediump float u_xlat16_18;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_9 = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_9 * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb11.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb11.x = u_xlatb11.x && u_xlatb5.x;
    u_xlatb11.y = u_xlatb11.y && u_xlatb5.y;
    if(u_xlatb11.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat11.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat11.xz);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb11.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat11.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat11.xy);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb11.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb11.x = u_xlatb11.x && u_xlatb5.z;
    u_xlatb11.y = u_xlatb11.y && u_xlatb5.w;
    if(u_xlatb11.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat11.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat11.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb11.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat11.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat11.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9 = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_18 = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_18 + u_xlat16_0.x;
    u_xlat16_18 = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9) + 1.0;
    u_xlat16_2 = u_xlat16_18 * u_xlat16_2 + u_xlat16_9;
    u_xlat16_9 = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    SV_Target2.w = min(u_xlat16_9, 0.5);
    u_xlat2.x = vs_TEXCOORD1.z;
    u_xlat2.y = vs_TEXCOORD2.z;
    u_xlat2.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb2) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0352941193;
    SV_Target1.w = u_xlat16_0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec2 u_xlat8;
mediump float u_xlat16_9;
vec3 u_xlat11;
bvec2 u_xlatb11;
mediump float u_xlat16_18;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_9 = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_9 * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb11.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb11.x = u_xlatb11.x && u_xlatb5.x;
    u_xlatb11.y = u_xlatb11.y && u_xlatb5.y;
    if(u_xlatb11.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat11.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat11.xz);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb11.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat11.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat11.xy);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb11.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb11.x = u_xlatb11.x && u_xlatb5.z;
    u_xlatb11.y = u_xlatb11.y && u_xlatb5.w;
    if(u_xlatb11.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat11.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat11.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb11.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat11.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat11.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9 = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_18 = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_18 + u_xlat16_0.x;
    u_xlat16_18 = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9) + 1.0;
    u_xlat16_2 = u_xlat16_18 * u_xlat16_2 + u_xlat16_9;
    u_xlat16_9 = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    SV_Target2.w = min(u_xlat16_9, 0.5);
    u_xlat2.x = vs_TEXCOORD1.z;
    u_xlat2.y = vs_TEXCOORD2.z;
    u_xlat2.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb2) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0352941193;
    SV_Target1.w = u_xlat16_0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _TerrainLODLevel;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
vec4 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump float u_xlat16_10;
vec3 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat13;
bvec2 u_xlatb13;
vec3 u_xlat14;
bvec3 u_xlatb14;
mediump float u_xlat16_21;
vec2 u_xlat22;
bvec2 u_xlatb22;
vec2 u_xlat23;
vec2 u_xlat25;
bvec2 u_xlatb25;
vec2 u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb11.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb11.x = u_xlatb11.y || u_xlatb11.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb11.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat25.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat2.yyyy, u_xlat25.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat25.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat25.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat30.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat30.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat25.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlatb22.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat29.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat29.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb22.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat22.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat5.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb22.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat28.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat28.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat6.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat30.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat30.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb22.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat3.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat8.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb22.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat22.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat22.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel)));
        u_xlatb3.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel))).xy;
        u_xlat4 = (u_xlatb3.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat3 = (u_xlatb3.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat3 = (u_xlatb0.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat3;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat22.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat22.x = dot(u_xlat22.xy, u_xlat22.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat22.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat11.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat11.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat14.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat14.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat14.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat14.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat11.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat11.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat0.xz = u_xlat11.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat11.x = u_xlat3.y * u_xlat3.x;
            u_xlat22.x = u_xlat0.x * u_xlat11.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat33 = fract((-u_xlat3.x));
            u_xlat33 = u_xlat33 + 0.5;
            u_xlat33 = floor(u_xlat33);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat33 = u_xlat33 + (-u_xlat3.x);
            u_xlat33 = u_xlat33 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat11.x) * u_xlat0.x + 1.0;
            u_xlat14.xyz = (-vec3(u_xlat33)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat14.xyz + vec3(u_xlat33);
            u_xlatb3.xy = lessThan(u_xlat22.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat33) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat11.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + vec3(u_xlat33);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb33 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb33 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb33){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat33 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = max(u_xlat33, u_xlat4.x);
                u_xlat33 = log2(u_xlat33);
                u_xlat33 = u_xlat33 * 0.5;
                u_xlat33 = max(u_xlat33, 0.0);
                u_xlat33 = u_xlat33 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat33);
                u_xlat33 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat14.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat36 = sqrt(u_xlat33);
                u_xlat4.x = sqrt(u_xlat14.x);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat3.z);
                u_xlat14.x = inversesqrt(u_xlat14.x);
                u_xlat3.x = u_xlat14.x * abs(u_xlat3.x);
                u_xlat33 = u_xlat33 * u_xlat3.x;
                u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                u_xlat33 = sqrt(u_xlat33);
                u_xlat3.x = u_xlat36 * u_xlat4.x;
                u_xlat14.x = u_xlat33 * u_xlat3.x;
                u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat25.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat25.xy = fract(u_xlat25.xy);
                u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat4.x = (-u_xlat25.x) + u_xlat4.x;
                u_xlat25.x = u_xlat4.x * u_xlat25.y + u_xlat25.x;
                u_xlat36 = (-u_xlat3.x) * u_xlat33 + 1.0;
                u_xlat4.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat36) * u_xlat4.xyz + u_xlat25.xxx;
                u_xlatb14.xz = lessThan(u_xlat14.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat33 = u_xlat3.x * u_xlat33 + -4.0;
                u_xlat33 = exp2(u_xlat33);
                u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.zyy + u_xlat25.xxx;
                u_xlat3.xzw = (u_xlatb14.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb14.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb33 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb33 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb33){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat25.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat25.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat25.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat25.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat25.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat33);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat14.x = sqrt(u_xlat33);
                    u_xlat25.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat3.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat25.x * u_xlat14.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat23.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat3.x = (-u_xlat23.x) + u_xlat3.x;
                    u_xlat23.x = u_xlat3.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat3.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat34) * u_xlat3.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat2.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat34 = sqrt(u_xlat33);
                    u_xlat2.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat1.z);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat34 * u_xlat2.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat23.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat2.x = (-u_xlat23.x) + u_xlat2.x;
                    u_xlat23.x = u_xlat2.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat2.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_10 = dot(u_xlat2, u_xlat16_0);
    u_xlat16_21 = u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_21 * u_xlat16_2 + u_xlat16_4.w;
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb3.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb3.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_5 = texture(_Texture_5_Albedo, u_xlat13.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_5_Color;
        u_xlat16_5 = u_xlat0.xxxx * u_xlat16_5;
    } else {
        u_xlat16_5.x = float(0.0);
        u_xlat16_5.y = float(0.0);
        u_xlat16_5.z = float(0.0);
        u_xlat16_5.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat6.xy * vs_TEXCOORD6.yy;
        u_xlat10_6 = texture(_Texture_6_Albedo, u_xlat13.xy);
        u_xlat16_6 = u_xlat10_6 * _Texture_6_Color;
        u_xlat16_5 = u_xlat16_6 * u_xlat0.yyyy + u_xlat16_5;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb3.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb3.w;
    if(u_xlatb13.x){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat7.xy * vs_TEXCOORD6.zz;
        u_xlat10_3 = texture(_Texture_7_Albedo, u_xlat13.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_7_Color;
        u_xlat16_5 = u_xlat16_3 * u_xlat0.zzzz + u_xlat16_5;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.ww;
        u_xlat10_3 = texture(_Texture_8_Albedo, u_xlat13.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_8_Color;
        u_xlat16_5 = u_xlat16_3 * u_xlat0.wwww + u_xlat16_5;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = u_xlat16_2 + u_xlat16_5.w;
    u_xlat16_32 = dot(u_xlat0, u_xlat16_1);
    u_xlat16_10 = u_xlat16_32 + u_xlat16_10;
    u_xlat16_32 = u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_21) + 1.0;
    u_xlat16_2 = u_xlat16_32 * u_xlat16_2 + u_xlat16_21;
    u_xlat16_21 = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    SV_Target2.w = min(u_xlat16_21, 0.5);
    u_xlat2.x = vs_TEXCOORD1.z;
    u_xlat2.y = vs_TEXCOORD2.z;
    u_xlat2.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb2) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0352941193;
    SV_Target1.w = u_xlat16_10;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
struct DebugView_PropsArray_Type {
	float _TerrainLODLevel;
};
layout(std140) uniform UnityInstancing_DebugView_Props {
	DebugView_PropsArray_Type DebugView_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
vec4 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump float u_xlat16_10;
vec3 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat13;
bvec2 u_xlatb13;
vec3 u_xlat14;
bvec3 u_xlatb14;
mediump float u_xlat16_21;
vec2 u_xlat22;
bvec2 u_xlatb22;
vec2 u_xlat23;
vec2 u_xlat25;
bvec2 u_xlatb25;
vec2 u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb11.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb11.x = u_xlatb11.y || u_xlatb11.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb11.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat25.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat2.yyyy, u_xlat25.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat25.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat25.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat30.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat30.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat25.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlatb22.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat29.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat29.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb22.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat22.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat5.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb22.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat28.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat28.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat6.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat30.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat30.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb22.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat3.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat8.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb22.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat22.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat22.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
        u_xlatb3 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel));
        u_xlatb0.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel)).xy;
        u_xlat4 = (u_xlatb0.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat0 = (u_xlatb0.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat0 = (u_xlatb3.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat0;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat22.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat22.x = dot(u_xlat22.xy, u_xlat22.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat22.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat11.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat11.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat14.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat14.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat14.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat14.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat11.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat11.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat0.xz = u_xlat11.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat11.x = u_xlat3.y * u_xlat3.x;
            u_xlat22.x = u_xlat0.x * u_xlat11.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat33 = fract((-u_xlat3.x));
            u_xlat33 = u_xlat33 + 0.5;
            u_xlat33 = floor(u_xlat33);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat33 = u_xlat33 + (-u_xlat3.x);
            u_xlat33 = u_xlat33 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat11.x) * u_xlat0.x + 1.0;
            u_xlat14.xyz = (-vec3(u_xlat33)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat14.xyz + vec3(u_xlat33);
            u_xlatb3.xy = lessThan(u_xlat22.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat33) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat11.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + vec3(u_xlat33);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb33 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb33 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb33){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat33 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = max(u_xlat33, u_xlat4.x);
                u_xlat33 = log2(u_xlat33);
                u_xlat33 = u_xlat33 * 0.5;
                u_xlat33 = max(u_xlat33, 0.0);
                u_xlat33 = u_xlat33 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat33);
                u_xlat33 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat14.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat36 = sqrt(u_xlat33);
                u_xlat4.x = sqrt(u_xlat14.x);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat3.z);
                u_xlat14.x = inversesqrt(u_xlat14.x);
                u_xlat3.x = u_xlat14.x * abs(u_xlat3.x);
                u_xlat33 = u_xlat33 * u_xlat3.x;
                u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                u_xlat33 = sqrt(u_xlat33);
                u_xlat3.x = u_xlat36 * u_xlat4.x;
                u_xlat14.x = u_xlat33 * u_xlat3.x;
                u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat25.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat25.xy = fract(u_xlat25.xy);
                u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat4.x = (-u_xlat25.x) + u_xlat4.x;
                u_xlat25.x = u_xlat4.x * u_xlat25.y + u_xlat25.x;
                u_xlat36 = (-u_xlat3.x) * u_xlat33 + 1.0;
                u_xlat4.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat36) * u_xlat4.xyz + u_xlat25.xxx;
                u_xlatb14.xz = lessThan(u_xlat14.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat33 = u_xlat3.x * u_xlat33 + -4.0;
                u_xlat33 = exp2(u_xlat33);
                u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.zyy + u_xlat25.xxx;
                u_xlat3.xzw = (u_xlatb14.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb14.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb33 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb33 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb33){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat25.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat25.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat25.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat25.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat25.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat33);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat14.x = sqrt(u_xlat33);
                    u_xlat25.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat3.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat25.x * u_xlat14.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat23.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat3.x = (-u_xlat23.x) + u_xlat3.x;
                    u_xlat23.x = u_xlat3.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat3.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat34) * u_xlat3.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat2.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat34 = sqrt(u_xlat33);
                    u_xlat2.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat1.z);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat34 * u_xlat2.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat23.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat2.x = (-u_xlat23.x) + u_xlat2.x;
                    u_xlat23.x = u_xlat2.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat2.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_10 = dot(u_xlat2, u_xlat16_0);
    u_xlat16_21 = u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_21 * u_xlat16_2 + u_xlat16_4.w;
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb3.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb3.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_5 = texture(_Texture_5_Albedo, u_xlat13.xz);
        u_xlat16_5 = u_xlat10_5 * _Texture_5_Color;
        u_xlat16_5 = u_xlat0.xxxx * u_xlat16_5;
    } else {
        u_xlat16_5.x = float(0.0);
        u_xlat16_5.y = float(0.0);
        u_xlat16_5.z = float(0.0);
        u_xlat16_5.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat6.xy * vs_TEXCOORD6.yy;
        u_xlat10_6 = texture(_Texture_6_Albedo, u_xlat13.xy);
        u_xlat16_6 = u_xlat10_6 * _Texture_6_Color;
        u_xlat16_5 = u_xlat16_6 * u_xlat0.yyyy + u_xlat16_5;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb3.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb3.w;
    if(u_xlatb13.x){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat7.xy * vs_TEXCOORD6.zz;
        u_xlat10_3 = texture(_Texture_7_Albedo, u_xlat13.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_7_Color;
        u_xlat16_5 = u_xlat16_3 * u_xlat0.zzzz + u_xlat16_5;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.ww;
        u_xlat10_3 = texture(_Texture_8_Albedo, u_xlat13.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_8_Color;
        u_xlat16_5 = u_xlat16_3 * u_xlat0.wwww + u_xlat16_5;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = u_xlat16_2 + u_xlat16_5.w;
    u_xlat16_32 = dot(u_xlat0, u_xlat16_1);
    u_xlat16_10 = u_xlat16_32 + u_xlat16_10;
    u_xlat16_32 = u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_21) + 1.0;
    u_xlat16_2 = u_xlat16_32 * u_xlat16_2 + u_xlat16_21;
    u_xlat16_21 = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    SV_Target2.w = min(u_xlat16_21, 0.5);
    u_xlat2.x = vs_TEXCOORD1.z;
    u_xlat2.y = vs_TEXCOORD2.z;
    u_xlat2.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb2) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0352941193;
    SV_Target1.w = u_xlat16_10;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _SSAO_Intensity;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec2 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump float u_xlat16_6;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy, -1.0);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_6 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_6 = u_xlat16_6 * _Terrain_Smoothness;
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    SV_Target2.w = min(u_xlat16_6, 0.5);
    u_xlat0.x = vs_TEXCOORD1.z;
    u_xlat0.y = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _SSAO_Intensity;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec2 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump float u_xlat16_6;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy, -1.0);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_6 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_6 = u_xlat16_6 * _Terrain_Smoothness;
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    SV_Target2.w = min(u_xlat16_6, 0.5);
    u_xlat0.x = vs_TEXCOORD1.z;
    u_xlat0.y = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _TerrainLODLevel;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump float u_xlat16_10;
vec3 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat14;
bvec3 u_xlatb14;
vec2 u_xlat22;
bvec2 u_xlatb22;
vec2 u_xlat23;
vec2 u_xlat25;
bvec2 u_xlatb25;
vec2 u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb11.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb11.x = u_xlatb11.y || u_xlatb11.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb11.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat25.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat2.yyyy, u_xlat25.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat25.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat25.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat30.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat30.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat25.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlatb22.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat29.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat29.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb22.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat22.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat5.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb22.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat28.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat28.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat6.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat30.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat30.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb22.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat3.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat8.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb22.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat22.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat22.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel)));
        u_xlatb3.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel))).xy;
        u_xlat4 = (u_xlatb3.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat3 = (u_xlatb3.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat3 = (u_xlatb0.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat3;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat22.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat22.x = dot(u_xlat22.xy, u_xlat22.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat22.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat11.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat11.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat14.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat14.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat14.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat14.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat11.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat11.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat0.xz = u_xlat11.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat11.x = u_xlat3.y * u_xlat3.x;
            u_xlat22.x = u_xlat0.x * u_xlat11.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat33 = fract((-u_xlat3.x));
            u_xlat33 = u_xlat33 + 0.5;
            u_xlat33 = floor(u_xlat33);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat33 = u_xlat33 + (-u_xlat3.x);
            u_xlat33 = u_xlat33 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat11.x) * u_xlat0.x + 1.0;
            u_xlat14.xyz = (-vec3(u_xlat33)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat14.xyz + vec3(u_xlat33);
            u_xlatb3.xy = lessThan(u_xlat22.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat33) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat11.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + vec3(u_xlat33);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb33 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb33 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb33){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat33 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = max(u_xlat33, u_xlat4.x);
                u_xlat33 = log2(u_xlat33);
                u_xlat33 = u_xlat33 * 0.5;
                u_xlat33 = max(u_xlat33, 0.0);
                u_xlat33 = u_xlat33 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat33);
                u_xlat33 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat14.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat36 = sqrt(u_xlat33);
                u_xlat4.x = sqrt(u_xlat14.x);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat3.z);
                u_xlat14.x = inversesqrt(u_xlat14.x);
                u_xlat3.x = u_xlat14.x * abs(u_xlat3.x);
                u_xlat33 = u_xlat33 * u_xlat3.x;
                u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                u_xlat33 = sqrt(u_xlat33);
                u_xlat3.x = u_xlat36 * u_xlat4.x;
                u_xlat14.x = u_xlat33 * u_xlat3.x;
                u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat25.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat25.xy = fract(u_xlat25.xy);
                u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat4.x = (-u_xlat25.x) + u_xlat4.x;
                u_xlat25.x = u_xlat4.x * u_xlat25.y + u_xlat25.x;
                u_xlat36 = (-u_xlat3.x) * u_xlat33 + 1.0;
                u_xlat4.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat36) * u_xlat4.xyz + u_xlat25.xxx;
                u_xlatb14.xz = lessThan(u_xlat14.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat33 = u_xlat3.x * u_xlat33 + -4.0;
                u_xlat33 = exp2(u_xlat33);
                u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.zyy + u_xlat25.xxx;
                u_xlat3.xzw = (u_xlatb14.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb14.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb33 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb33 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb33){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat25.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat25.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat25.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat25.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat25.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat33);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat14.x = sqrt(u_xlat33);
                    u_xlat25.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat3.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat25.x * u_xlat14.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat23.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat3.x = (-u_xlat23.x) + u_xlat3.x;
                    u_xlat23.x = u_xlat3.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat3.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat34) * u_xlat3.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat2.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat34 = sqrt(u_xlat33);
                    u_xlat2.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat1.z);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat34 * u_xlat2.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat23.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat2.x = (-u_xlat23.x) + u_xlat2.x;
                    u_xlat23.x = u_xlat2.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat2.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy, -1.0);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_10 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_10 = u_xlat16_10 * _Terrain_Smoothness;
    u_xlat16_10 = max(u_xlat16_10, 0.0);
    SV_Target2.w = min(u_xlat16_10, 0.5);
    u_xlat0.x = vs_TEXCOORD1.z;
    u_xlat0.y = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
struct DebugView_PropsArray_Type {
	float _TerrainLODLevel;
};
layout(std140) uniform UnityInstancing_DebugView_Props {
	DebugView_PropsArray_Type DebugView_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump float u_xlat16_10;
vec3 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat14;
bvec3 u_xlatb14;
vec2 u_xlat22;
bvec2 u_xlatb22;
vec2 u_xlat23;
vec2 u_xlat25;
bvec2 u_xlatb25;
vec2 u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb11.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb11.x = u_xlatb11.y || u_xlatb11.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb11.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat25.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat2.yyyy, u_xlat25.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat25.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat25.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat30.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat30.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat25.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlatb22.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat29.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat29.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb22.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat22.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat5.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb22.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat28.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat28.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat6.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat30.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat30.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb22.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat3.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat8.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb22.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat22.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat22.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
        u_xlatb3 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel));
        u_xlatb0.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel)).xy;
        u_xlat4 = (u_xlatb0.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat0 = (u_xlatb0.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat0 = (u_xlatb3.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat0;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat22.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat22.x = dot(u_xlat22.xy, u_xlat22.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat22.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat11.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat11.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat14.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat14.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat14.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat14.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat11.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat11.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat0.xz = u_xlat11.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat11.x = u_xlat3.y * u_xlat3.x;
            u_xlat22.x = u_xlat0.x * u_xlat11.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat33 = fract((-u_xlat3.x));
            u_xlat33 = u_xlat33 + 0.5;
            u_xlat33 = floor(u_xlat33);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat33 = u_xlat33 + (-u_xlat3.x);
            u_xlat33 = u_xlat33 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat11.x) * u_xlat0.x + 1.0;
            u_xlat14.xyz = (-vec3(u_xlat33)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat14.xyz + vec3(u_xlat33);
            u_xlatb3.xy = lessThan(u_xlat22.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat33) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat11.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + vec3(u_xlat33);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb33 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb33 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb33){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat33 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = max(u_xlat33, u_xlat4.x);
                u_xlat33 = log2(u_xlat33);
                u_xlat33 = u_xlat33 * 0.5;
                u_xlat33 = max(u_xlat33, 0.0);
                u_xlat33 = u_xlat33 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat33);
                u_xlat33 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat14.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat36 = sqrt(u_xlat33);
                u_xlat4.x = sqrt(u_xlat14.x);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat3.z);
                u_xlat14.x = inversesqrt(u_xlat14.x);
                u_xlat3.x = u_xlat14.x * abs(u_xlat3.x);
                u_xlat33 = u_xlat33 * u_xlat3.x;
                u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                u_xlat33 = sqrt(u_xlat33);
                u_xlat3.x = u_xlat36 * u_xlat4.x;
                u_xlat14.x = u_xlat33 * u_xlat3.x;
                u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat25.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat25.xy = fract(u_xlat25.xy);
                u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat4.x = (-u_xlat25.x) + u_xlat4.x;
                u_xlat25.x = u_xlat4.x * u_xlat25.y + u_xlat25.x;
                u_xlat36 = (-u_xlat3.x) * u_xlat33 + 1.0;
                u_xlat4.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat36) * u_xlat4.xyz + u_xlat25.xxx;
                u_xlatb14.xz = lessThan(u_xlat14.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat33 = u_xlat3.x * u_xlat33 + -4.0;
                u_xlat33 = exp2(u_xlat33);
                u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.zyy + u_xlat25.xxx;
                u_xlat3.xzw = (u_xlatb14.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb14.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb33 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb33 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb33){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat25.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat25.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat25.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat25.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat25.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat33);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat14.x = sqrt(u_xlat33);
                    u_xlat25.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat3.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat25.x * u_xlat14.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat23.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat3.x = (-u_xlat23.x) + u_xlat3.x;
                    u_xlat23.x = u_xlat3.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat3.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat34) * u_xlat3.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat2.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat34 = sqrt(u_xlat33);
                    u_xlat2.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat1.z);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat34 * u_xlat2.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat23.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat2.x = (-u_xlat23.x) + u_xlat2.x;
                    u_xlat23.x = u_xlat2.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat2.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.x = vs_TEXCOORD1.w;
        u_xlat2.y = vs_TEXCOORD3.w;
        u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy, -1.0);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.x = vs_TEXCOORD1.w;
        u_xlat1.y = vs_TEXCOORD3.w;
        u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat4.xz = u_xlat5.xy * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD3.w;
        u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.x = vs_TEXCOORD1.w;
        u_xlat0.y = vs_TEXCOORD3.w;
        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy, -1.0);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_10 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_10 = u_xlat16_10 * _Terrain_Smoothness;
    u_xlat16_10 = max(u_xlat16_10, 0.0);
    SV_Target2.w = min(u_xlat16_10, 0.5);
    u_xlat0.x = vs_TEXCOORD1.z;
    u_xlat0.y = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec2 u_xlat8;
mediump float u_xlat16_9;
vec3 u_xlat11;
bvec2 u_xlatb11;
mediump float u_xlat16_18;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_9 = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_9 * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb11.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb11.x = u_xlatb11.x && u_xlatb5.x;
    u_xlatb11.y = u_xlatb11.y && u_xlatb5.y;
    if(u_xlatb11.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat11.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat11.xz, -1.0);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb11.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat11.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat11.xy, -1.0);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb11.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb11.x = u_xlatb11.x && u_xlatb5.z;
    u_xlatb11.y = u_xlatb11.y && u_xlatb5.w;
    if(u_xlatb11.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat11.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat11.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb11.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat11.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat11.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9 = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_18 = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_18 + u_xlat16_0.x;
    u_xlat16_18 = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9) + 1.0;
    u_xlat16_2 = u_xlat16_18 * u_xlat16_2 + u_xlat16_9;
    u_xlat16_9 = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    SV_Target2.w = min(u_xlat16_9, 0.5);
    u_xlat2.x = vs_TEXCOORD1.z;
    u_xlat2.y = vs_TEXCOORD2.z;
    u_xlat2.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb2) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0352941193;
    SV_Target1.w = u_xlat16_0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec2 u_xlat7;
mediump vec4 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec2 u_xlat8;
mediump float u_xlat16_9;
vec3 u_xlat11;
bvec2 u_xlatb11;
mediump float u_xlat16_18;
void main()
{
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_0.x = dot(u_xlat2, u_xlat16_0);
    u_xlat16_9 = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_9 * u_xlat16_2 + u_xlat16_4.w;
    u_xlat3 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb5 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat3);
    u_xlatb11.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb11.x = u_xlatb11.x && u_xlatb5.x;
    u_xlatb11.y = u_xlatb11.y && u_xlatb5.y;
    if(u_xlatb11.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat11.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_6 = texture(_Texture_5_Albedo, u_xlat11.xz, -1.0);
        u_xlat16_6 = u_xlat10_6 * _Texture_5_Color;
        u_xlat16_6 = u_xlat3.xxxx * u_xlat16_6;
    } else {
        u_xlat16_6.x = float(0.0);
        u_xlat16_6.y = float(0.0);
        u_xlat16_6.z = float(0.0);
        u_xlat16_6.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb11.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat11.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
        u_xlat10_7 = texture(_Texture_6_Albedo, u_xlat11.xy, -1.0);
        u_xlat16_7 = u_xlat10_7 * _Texture_6_Color;
        u_xlat16_6 = u_xlat16_7 * u_xlat3.yyyy + u_xlat16_6;
    //ENDIF
    }
    u_xlatb11.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb11.x = u_xlatb11.x && u_xlatb5.z;
    u_xlatb11.y = u_xlatb11.y && u_xlatb5.w;
    if(u_xlatb11.x){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat11.xz = u_xlat8.xy * vs_TEXCOORD6.zz;
        u_xlat10_5 = texture(_Texture_7_Albedo, u_xlat11.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_7_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.zzzz + u_xlat16_6;
    //ENDIF
    }
    if(u_xlatb11.y){
        u_xlat8.x = vs_TEXCOORD1.w;
        u_xlat8.y = vs_TEXCOORD3.w;
        u_xlat11.xy = u_xlat8.xy * vs_TEXCOORD6.ww;
        u_xlat10_5 = texture(_Texture_8_Albedo, u_xlat11.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_8_Color;
        u_xlat16_6 = u_xlat16_5 * u_xlat3.wwww + u_xlat16_6;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_9 = u_xlat16_2 + u_xlat16_6.w;
    u_xlat16_18 = dot(u_xlat3, u_xlat16_1);
    u_xlat16_0.x = u_xlat16_18 + u_xlat16_0.x;
    u_xlat16_18 = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_9) + 1.0;
    u_xlat16_2 = u_xlat16_18 * u_xlat16_2 + u_xlat16_9;
    u_xlat16_9 = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    SV_Target2.w = min(u_xlat16_9, 0.5);
    u_xlat2.x = vs_TEXCOORD1.z;
    u_xlat2.y = vs_TEXCOORD2.z;
    u_xlat2.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb2) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0352941193;
    SV_Target1.w = u_xlat16_0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _TerrainLODLevel;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
vec4 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump float u_xlat16_10;
vec3 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat13;
bvec2 u_xlatb13;
vec3 u_xlat14;
bvec3 u_xlatb14;
mediump float u_xlat16_21;
vec2 u_xlat22;
bvec2 u_xlatb22;
vec2 u_xlat23;
vec2 u_xlat25;
bvec2 u_xlatb25;
vec2 u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb11.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb11.x = u_xlatb11.y || u_xlatb11.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb11.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat25.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat2.yyyy, u_xlat25.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat25.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat25.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat30.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat30.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat25.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlatb22.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat29.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat29.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb22.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat22.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat5.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb22.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat28.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat28.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat6.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat30.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat30.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb22.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat3.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat8.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb22.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat22.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat22.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel)));
        u_xlatb3.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel))).xy;
        u_xlat4 = (u_xlatb3.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat3 = (u_xlatb3.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat3 = (u_xlatb0.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat3;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat22.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat22.x = dot(u_xlat22.xy, u_xlat22.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat22.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat11.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat11.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat14.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat14.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat14.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat14.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat11.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat11.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat0.xz = u_xlat11.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat11.x = u_xlat3.y * u_xlat3.x;
            u_xlat22.x = u_xlat0.x * u_xlat11.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat33 = fract((-u_xlat3.x));
            u_xlat33 = u_xlat33 + 0.5;
            u_xlat33 = floor(u_xlat33);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat33 = u_xlat33 + (-u_xlat3.x);
            u_xlat33 = u_xlat33 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat11.x) * u_xlat0.x + 1.0;
            u_xlat14.xyz = (-vec3(u_xlat33)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat14.xyz + vec3(u_xlat33);
            u_xlatb3.xy = lessThan(u_xlat22.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat33) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat11.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + vec3(u_xlat33);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb33 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb33 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb33){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat33 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = max(u_xlat33, u_xlat4.x);
                u_xlat33 = log2(u_xlat33);
                u_xlat33 = u_xlat33 * 0.5;
                u_xlat33 = max(u_xlat33, 0.0);
                u_xlat33 = u_xlat33 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat33);
                u_xlat33 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat14.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat36 = sqrt(u_xlat33);
                u_xlat4.x = sqrt(u_xlat14.x);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat3.z);
                u_xlat14.x = inversesqrt(u_xlat14.x);
                u_xlat3.x = u_xlat14.x * abs(u_xlat3.x);
                u_xlat33 = u_xlat33 * u_xlat3.x;
                u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                u_xlat33 = sqrt(u_xlat33);
                u_xlat3.x = u_xlat36 * u_xlat4.x;
                u_xlat14.x = u_xlat33 * u_xlat3.x;
                u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat25.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat25.xy = fract(u_xlat25.xy);
                u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat4.x = (-u_xlat25.x) + u_xlat4.x;
                u_xlat25.x = u_xlat4.x * u_xlat25.y + u_xlat25.x;
                u_xlat36 = (-u_xlat3.x) * u_xlat33 + 1.0;
                u_xlat4.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat36) * u_xlat4.xyz + u_xlat25.xxx;
                u_xlatb14.xz = lessThan(u_xlat14.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat33 = u_xlat3.x * u_xlat33 + -4.0;
                u_xlat33 = exp2(u_xlat33);
                u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.zyy + u_xlat25.xxx;
                u_xlat3.xzw = (u_xlatb14.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb14.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb33 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb33 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb33){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat25.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat25.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat25.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat25.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat25.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat33);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat14.x = sqrt(u_xlat33);
                    u_xlat25.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat3.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat25.x * u_xlat14.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat23.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat3.x = (-u_xlat23.x) + u_xlat3.x;
                    u_xlat23.x = u_xlat3.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat3.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat34) * u_xlat3.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat2.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat34 = sqrt(u_xlat33);
                    u_xlat2.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat1.z);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat34 * u_xlat2.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat23.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat2.x = (-u_xlat23.x) + u_xlat2.x;
                    u_xlat23.x = u_xlat2.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat2.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_10 = dot(u_xlat2, u_xlat16_0);
    u_xlat16_21 = u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_21 * u_xlat16_2 + u_xlat16_4.w;
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb3.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb3.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_5 = texture(_Texture_5_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_5_Color;
        u_xlat16_5 = u_xlat0.xxxx * u_xlat16_5;
    } else {
        u_xlat16_5.x = float(0.0);
        u_xlat16_5.y = float(0.0);
        u_xlat16_5.z = float(0.0);
        u_xlat16_5.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat6.xy * vs_TEXCOORD6.yy;
        u_xlat10_6 = texture(_Texture_6_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_6 = u_xlat10_6 * _Texture_6_Color;
        u_xlat16_5 = u_xlat16_6 * u_xlat0.yyyy + u_xlat16_5;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb3.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb3.w;
    if(u_xlatb13.x){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat7.xy * vs_TEXCOORD6.zz;
        u_xlat10_3 = texture(_Texture_7_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_7_Color;
        u_xlat16_5 = u_xlat16_3 * u_xlat0.zzzz + u_xlat16_5;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.ww;
        u_xlat10_3 = texture(_Texture_8_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_8_Color;
        u_xlat16_5 = u_xlat16_3 * u_xlat0.wwww + u_xlat16_5;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = u_xlat16_2 + u_xlat16_5.w;
    u_xlat16_32 = dot(u_xlat0, u_xlat16_1);
    u_xlat16_10 = u_xlat16_32 + u_xlat16_10;
    u_xlat16_32 = u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_21) + 1.0;
    u_xlat16_2 = u_xlat16_32 * u_xlat16_2 + u_xlat16_21;
    u_xlat16_21 = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    SV_Target2.w = min(u_xlat16_21, 0.5);
    u_xlat2.x = vs_TEXCOORD1.z;
    u_xlat2.y = vs_TEXCOORD2.z;
    u_xlat2.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb2) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0352941193;
    SV_Target1.w = u_xlat16_10;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
struct DebugView_PropsArray_Type {
	float _TerrainLODLevel;
};
layout(std140) uniform UnityInstancing_DebugView_Props {
	DebugView_PropsArray_Type DebugView_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
vec4 u_xlat6;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump float u_xlat16_10;
vec3 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat13;
bvec2 u_xlatb13;
vec3 u_xlat14;
bvec3 u_xlatb14;
mediump float u_xlat16_21;
vec2 u_xlat22;
bvec2 u_xlatb22;
vec2 u_xlat23;
vec2 u_xlat25;
bvec2 u_xlatb25;
vec2 u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb11.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb11.x = u_xlatb11.y || u_xlatb11.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb11.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat25.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat2.yyyy, u_xlat25.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat25.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat25.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat30.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat30.xyxy).xy;
        u_xlatb0.x = u_xlatb25.y || u_xlatb25.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat25.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb25.xy = lessThan(u_xlat25.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb25.y) * 0xffffffffu | uint(u_xlatb25.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat25.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat25.xyxx).xy;
        u_xlatb22.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat29.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat29.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb22.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat22.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat5.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb22.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat28.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat28.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb22.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat6.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat30.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat30.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb22.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb22.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat22.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat3.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb22.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat22.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb22.xy = lessThan(u_xlat22.xyxy, u_xlat8.xyxy).xy;
            u_xlatb22.x = u_xlatb22.y || u_xlatb22.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb22.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb22.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat22.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat22.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
        u_xlatb3 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel));
        u_xlatb0.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel)).xy;
        u_xlat4 = (u_xlatb0.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat0 = (u_xlatb0.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat0 = (u_xlatb3.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat0;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat22.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat22.x = dot(u_xlat22.xy, u_xlat22.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat22.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat11.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat11.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb11.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb11.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat14.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat14.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat14.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat14.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat11.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat11.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat0.xz = u_xlat11.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat11.x = u_xlat3.y * u_xlat3.x;
            u_xlat22.x = u_xlat0.x * u_xlat11.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat33 = fract((-u_xlat3.x));
            u_xlat33 = u_xlat33 + 0.5;
            u_xlat33 = floor(u_xlat33);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat33 = u_xlat33 + (-u_xlat3.x);
            u_xlat33 = u_xlat33 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat11.x) * u_xlat0.x + 1.0;
            u_xlat14.xyz = (-vec3(u_xlat33)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat14.xyz + vec3(u_xlat33);
            u_xlatb3.xy = lessThan(u_xlat22.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat33) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat11.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + vec3(u_xlat33);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb33 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb33 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb33){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat33 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = max(u_xlat33, u_xlat4.x);
                u_xlat33 = log2(u_xlat33);
                u_xlat33 = u_xlat33 * 0.5;
                u_xlat33 = max(u_xlat33, 0.0);
                u_xlat33 = u_xlat33 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat33);
                u_xlat33 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat14.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat36 = sqrt(u_xlat33);
                u_xlat4.x = sqrt(u_xlat14.x);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat3.z);
                u_xlat14.x = inversesqrt(u_xlat14.x);
                u_xlat3.x = u_xlat14.x * abs(u_xlat3.x);
                u_xlat33 = u_xlat33 * u_xlat3.x;
                u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                u_xlat33 = sqrt(u_xlat33);
                u_xlat3.x = u_xlat36 * u_xlat4.x;
                u_xlat14.x = u_xlat33 * u_xlat3.x;
                u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat25.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat25.xy = fract(u_xlat25.xy);
                u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat4.x = (-u_xlat25.x) + u_xlat4.x;
                u_xlat25.x = u_xlat4.x * u_xlat25.y + u_xlat25.x;
                u_xlat36 = (-u_xlat3.x) * u_xlat33 + 1.0;
                u_xlat4.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat36) * u_xlat4.xyz + u_xlat25.xxx;
                u_xlatb14.xz = lessThan(u_xlat14.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat33 = u_xlat3.x * u_xlat33 + -4.0;
                u_xlat33 = exp2(u_xlat33);
                u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.zyy + u_xlat25.xxx;
                u_xlat3.xzw = (u_xlatb14.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb14.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb33 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb33 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb33){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat25.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat25.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat25.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat25.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat25.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat33);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat14.x = sqrt(u_xlat33);
                    u_xlat25.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat3.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat25.x * u_xlat14.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat23.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat3.x = (-u_xlat23.x) + u_xlat3.x;
                    u_xlat23.x = u_xlat3.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat3.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat34) * u_xlat3.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat33 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat33 = max(u_xlat33, u_xlat2.x);
                    u_xlat33 = log2(u_xlat33);
                    u_xlat33 = u_xlat33 * 0.5;
                    u_xlat33 = max(u_xlat33, 0.0);
                    u_xlat33 = u_xlat33 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat33);
                    u_xlat33 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat12 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat34 = sqrt(u_xlat33);
                    u_xlat2.x = sqrt(u_xlat12);
                    u_xlat33 = inversesqrt(u_xlat33);
                    u_xlat33 = u_xlat33 * abs(u_xlat1.z);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat1.x = u_xlat12 * abs(u_xlat1.x);
                    u_xlat33 = u_xlat33 * u_xlat1.x;
                    u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
                    u_xlat33 = sqrt(u_xlat33);
                    u_xlat1.x = u_xlat34 * u_xlat2.x;
                    u_xlat12 = u_xlat33 * u_xlat1.x;
                    u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat23.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat23.xy = fract(u_xlat23.xy);
                    u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
                    u_xlat23.xy = floor(u_xlat23.xy);
                    u_xlat2.x = (-u_xlat23.x) + u_xlat2.x;
                    u_xlat23.x = u_xlat2.x * u_xlat23.y + u_xlat23.x;
                    u_xlat34 = (-u_xlat1.x) * u_xlat33 + 1.0;
                    u_xlat2.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat23.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat33 = u_xlat1.x * u_xlat33 + -4.0;
                    u_xlat33 = exp2(u_xlat33);
                    u_xlat33 = u_xlat33 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
                    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.zyy + u_xlat23.xxx;
                    u_xlat1.xzw = (u_xlatb12.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb12.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0.x = _mhyRainNoiseParam1.z * _Texture_1_RainParams.y;
    u_xlat16_0.y = _mhyRainNoiseParam1.z * _Texture_2_RainParams.y;
    u_xlat16_0.z = _mhyRainNoiseParam1.z * _Texture_3_RainParams.y;
    u_xlat16_0.w = _mhyRainNoiseParam1.z * _Texture_4_RainParams.y;
    u_xlat16_1.x = _mhyRainNoiseParam1.z * _Texture_5_RainParams.y;
    u_xlat16_1.y = _mhyRainNoiseParam1.z * _Texture_6_RainParams.y;
    u_xlat16_1.z = _mhyRainNoiseParam1.z * _Texture_7_RainParams.y;
    u_xlat16_1.w = _mhyRainNoiseParam1.z * _Texture_8_RainParams.y;
    u_xlat2 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat2);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
    u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
    if(u_xlatb3.x){
        u_xlat4.x = vs_TEXCOORD1.w;
        u_xlat4.y = vs_TEXCOORD3.w;
        u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD5.xx;
        u_xlat10_4 = texture(_Texture_1_Albedo, u_xlat4.xy, -1.0);
        u_xlat16_4 = u_xlat10_4 * _Texture_1_Color;
        u_xlat16_4 = u_xlat2.xxxx * u_xlat16_4;
    } else {
        u_xlat16_4.x = float(0.0);
        u_xlat16_4.y = float(0.0);
        u_xlat16_4.z = float(0.0);
        u_xlat16_4.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.yy;
        u_xlat10_5 = texture(_Texture_2_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_2_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.yyyy + u_xlat16_4;
    //ENDIF
    }
    u_xlatb3.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.z;
    u_xlatb3.y = u_xlatb3.y && u_xlatb3.w;
    if(u_xlatb3.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat3.xz = u_xlat6.xy * vs_TEXCOORD5.zz;
        u_xlat10_5 = texture(_Texture_3_Albedo, u_xlat3.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_3_Color;
        u_xlat16_4 = u_xlat16_5 * u_xlat2.zzzz + u_xlat16_4;
    //ENDIF
    }
    if(u_xlatb3.y){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD3.w;
        u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.ww;
        u_xlat10_3 = texture(_Texture_4_Albedo, u_xlat3.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_4_Color;
        u_xlat16_4 = u_xlat16_3 * u_xlat2.wwww + u_xlat16_4;
    //ENDIF
    }
    u_xlat16_10 = dot(u_xlat2, u_xlat16_0);
    u_xlat16_21 = u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_4.w) + 1.0;
    u_xlat16_2 = u_xlat16_21 * u_xlat16_2 + u_xlat16_4.w;
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb3.x;
    u_xlatb13.y = u_xlatb13.y && u_xlatb3.y;
    if(u_xlatb13.x){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat6.xy * vs_TEXCOORD6.xx;
        u_xlat10_5 = texture(_Texture_5_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_5 = u_xlat10_5 * _Texture_5_Color;
        u_xlat16_5 = u_xlat0.xxxx * u_xlat16_5;
    } else {
        u_xlat16_5.x = float(0.0);
        u_xlat16_5.y = float(0.0);
        u_xlat16_5.z = float(0.0);
        u_xlat16_5.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat6.x = vs_TEXCOORD1.w;
        u_xlat6.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat6.xy * vs_TEXCOORD6.yy;
        u_xlat10_6 = texture(_Texture_6_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_6 = u_xlat10_6 * _Texture_6_Color;
        u_xlat16_5 = u_xlat16_6 * u_xlat0.yyyy + u_xlat16_5;
    //ENDIF
    }
    u_xlatb13.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb13.x = u_xlatb13.x && u_xlatb3.z;
    u_xlatb13.y = u_xlatb13.y && u_xlatb3.w;
    if(u_xlatb13.x){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xz = u_xlat7.xy * vs_TEXCOORD6.zz;
        u_xlat10_3 = texture(_Texture_7_Albedo, u_xlat13.xz, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_7_Color;
        u_xlat16_5 = u_xlat16_3 * u_xlat0.zzzz + u_xlat16_5;
    //ENDIF
    }
    if(u_xlatb13.y){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD3.w;
        u_xlat13.xy = u_xlat7.xy * vs_TEXCOORD6.ww;
        u_xlat10_3 = texture(_Texture_8_Albedo, u_xlat13.xy, -1.0);
        u_xlat16_3 = u_xlat10_3 * _Texture_8_Color;
        u_xlat16_5 = u_xlat16_3 * u_xlat0.wwww + u_xlat16_5;
    //ENDIF
    }
    SV_Target1.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = u_xlat16_2 + u_xlat16_5.w;
    u_xlat16_32 = dot(u_xlat0, u_xlat16_1);
    u_xlat16_10 = u_xlat16_32 + u_xlat16_10;
    u_xlat16_32 = u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_2 = (-u_xlat16_21) + 1.0;
    u_xlat16_2 = u_xlat16_32 * u_xlat16_2 + u_xlat16_21;
    u_xlat16_21 = u_xlat16_2 * _Terrain_Smoothness;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    SV_Target2.w = min(u_xlat16_21, 0.5);
    u_xlat2.x = vs_TEXCOORD1.z;
    u_xlat2.y = vs_TEXCOORD2.z;
    u_xlat2.z = vs_TEXCOORD3.z;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb2) ? 0.0 : 0.0399999991;
    SV_Target0.w = 0.0352941193;
    SV_Target1.w = u_xlat16_10;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
}
}
 Pass {
  Name "HYBRIDDEFERRED"
  LOD 100
  Tags { "DebugView" = "On" "LIGHTMODE" = "HYBRIDDEFERRED" "QUEUE" = "AlphaTest+1" "RenderType" = "Opaque" "TerrainHeight" = "VertexFetch" }
  GpuProgramID 148774
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
mediump float u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec2 u_xlat16_7;
lowp vec2 u_xlat10_7;
vec3 u_xlat8;
mediump float u_xlat16_14;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_3.xy = texture(_Texture_1_Normal, u_xlat2.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_1_Normal_Power, _Texture_1_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_4 = sqrt(u_xlat16_4);
            u_xlat16_5.xy = u_xlat0.xx * u_xlat16_3.xy;
            u_xlat16_5.z = u_xlat0.x * u_xlat16_4;
            u_xlat3.xyz = u_xlat16_5.xyz;
        } else {
            u_xlat16_3.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat3.xyz = u_xlat16_3.xyz;
        //ENDIF
        }
    } else {
        u_xlat3.x = float(0.0);
        u_xlat3.y = float(0.0);
        u_xlat3.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_2_Normal_Power, _Texture_2_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_4 = sqrt(u_xlat16_4);
            u_xlat16_5.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_5.z = u_xlat0.y * u_xlat16_4;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_5.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_3_Normal_Power, _Texture_3_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_4);
            u_xlat16_6.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_6.z = u_xlat0.z * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(_Texture_4_Normal_Power);
            u_xlat16_5.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_6.z = u_xlat0.w * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb2 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb2.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.xx;
            u_xlat10_7.xy = texture(_Texture_5_Normal, u_xlat7.xy).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_5_Normal_Power, _Texture_5_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.xx * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.x * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
            u_xlat10_7.xy = texture(_Texture_6_Normal, u_xlat7.xy).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_6_Normal_Power, _Texture_6_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.yy * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.y * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.zz;
            u_xlat10_7.xy = texture(_Texture_7_Normal, u_xlat7.xy).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_7_Normal_Power, _Texture_7_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.zz * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.z * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.ww;
            u_xlat10_7.xy = texture(_Texture_8_Normal, u_xlat7.xy).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(_Texture_8_Normal_Power);
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.ww * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.w * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb30 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb30){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD2.w;
        u_xlat7.z = vs_TEXCOORD3.w;
        u_xlat8.xyz = u_xlat7.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat30 = max(abs(u_xlat8.z), abs(u_xlat8.y));
        u_xlat30 = max(u_xlat30, abs(u_xlat8.x));
        u_xlat30 = u_xlat30 + (-_UV_Mix_Start_Distance);
        u_xlat30 = max(u_xlat30, 0.0);
        u_xlat30 = u_xlat30 / _UV_Mix_Range;
        u_xlat30 = log2(u_xlat30);
        u_xlat30 = u_xlat30 * _UV_Mix_Power;
        u_xlat30 = exp2(u_xlat30);
        u_xlat30 = min(u_xlat30, 1.0);
        u_xlat16_2.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_2.w = _Texture_4_Perlin_Power;
        u_xlat16_5.x = dot(u_xlat16_2, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_14 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_5.x = u_xlat16_14 + u_xlat16_5.x;
        u_xlat1.xy = u_xlat7.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy).xy;
        u_xlat16_14 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_14 = u_xlat30 * u_xlat16_14 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_14) * u_xlat16_1.xy;
        u_xlat16_14 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_14 = min(u_xlat16_14, 1.0);
        u_xlat16_14 = (-u_xlat16_14) + 1.0;
        u_xlat16_14 = sqrt(u_xlat16_14);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_14 + -1.0;
        u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_6.xy = u_xlat3.xy + u_xlat16_5.xy;
        u_xlat16_6.z = u_xlat3.z * u_xlat16_5.z;
        u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
        u_xlat16_3.xyz = u_xlat16_5.xxx * u_xlat16_6.xyz;
        u_xlat3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat7.xyz;
    SV_Target0.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
mediump float u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec2 u_xlat16_7;
lowp vec2 u_xlat10_7;
vec3 u_xlat8;
mediump float u_xlat16_14;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_3.xy = texture(_Texture_1_Normal, u_xlat2.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_1_Normal_Power, _Texture_1_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_4 = sqrt(u_xlat16_4);
            u_xlat16_5.xy = u_xlat0.xx * u_xlat16_3.xy;
            u_xlat16_5.z = u_xlat0.x * u_xlat16_4;
            u_xlat3.xyz = u_xlat16_5.xyz;
        } else {
            u_xlat16_3.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat3.xyz = u_xlat16_3.xyz;
        //ENDIF
        }
    } else {
        u_xlat3.x = float(0.0);
        u_xlat3.y = float(0.0);
        u_xlat3.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_2_Normal_Power, _Texture_2_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_4 = sqrt(u_xlat16_4);
            u_xlat16_5.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_5.z = u_xlat0.y * u_xlat16_4;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_5.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_3_Normal_Power, _Texture_3_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_4);
            u_xlat16_6.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_6.z = u_xlat0.z * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(_Texture_4_Normal_Power);
            u_xlat16_5.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_6.z = u_xlat0.w * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb2 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb2.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.xx;
            u_xlat10_7.xy = texture(_Texture_5_Normal, u_xlat7.xy).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_5_Normal_Power, _Texture_5_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.xx * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.x * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
            u_xlat10_7.xy = texture(_Texture_6_Normal, u_xlat7.xy).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_6_Normal_Power, _Texture_6_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.yy * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.y * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.zz;
            u_xlat10_7.xy = texture(_Texture_7_Normal, u_xlat7.xy).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_7_Normal_Power, _Texture_7_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.zz * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.z * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.ww;
            u_xlat10_7.xy = texture(_Texture_8_Normal, u_xlat7.xy).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(_Texture_8_Normal_Power);
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.ww * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.w * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb30 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb30){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD2.w;
        u_xlat7.z = vs_TEXCOORD3.w;
        u_xlat8.xyz = u_xlat7.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat30 = max(abs(u_xlat8.z), abs(u_xlat8.y));
        u_xlat30 = max(u_xlat30, abs(u_xlat8.x));
        u_xlat30 = u_xlat30 + (-_UV_Mix_Start_Distance);
        u_xlat30 = max(u_xlat30, 0.0);
        u_xlat30 = u_xlat30 / _UV_Mix_Range;
        u_xlat30 = log2(u_xlat30);
        u_xlat30 = u_xlat30 * _UV_Mix_Power;
        u_xlat30 = exp2(u_xlat30);
        u_xlat30 = min(u_xlat30, 1.0);
        u_xlat16_2.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_2.w = _Texture_4_Perlin_Power;
        u_xlat16_5.x = dot(u_xlat16_2, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_14 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_5.x = u_xlat16_14 + u_xlat16_5.x;
        u_xlat1.xy = u_xlat7.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy).xy;
        u_xlat16_14 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_14 = u_xlat30 * u_xlat16_14 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_14) * u_xlat16_1.xy;
        u_xlat16_14 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_14 = min(u_xlat16_14, 1.0);
        u_xlat16_14 = (-u_xlat16_14) + 1.0;
        u_xlat16_14 = sqrt(u_xlat16_14);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_14 + -1.0;
        u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_6.xy = u_xlat3.xy + u_xlat16_5.xy;
        u_xlat16_6.z = u_xlat3.z * u_xlat16_5.z;
        u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
        u_xlat16_3.xyz = u_xlat16_5.xxx * u_xlat16_6.xyz;
        u_xlat3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat7.xyz;
    SV_Target0.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _TerrainLODLevel;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec2 u_xlat10_2;
vec4 u_xlat3;
mediump vec2 u_xlat16_3;
lowp vec2 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec2 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
bvec2 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat15;
bvec3 u_xlatb15;
mediump float u_xlat16_22;
vec2 u_xlat24;
bvec2 u_xlatb24;
vec2 u_xlat25;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
vec2 u_xlat31;
vec2 u_xlat32;
float u_xlat36;
bool u_xlatb36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb12.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb12.x = u_xlatb12.y || u_xlatb12.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb12.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat27.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat2.yyyy, u_xlat27.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat27.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat27.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat32.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat32.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat27.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlatb24.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat31.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat31.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb24.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat24.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat5.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb24.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat30.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat30.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat6.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat32.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat32.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb24.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat3.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat8.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb24.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat24.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat24.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel)));
        u_xlatb3.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel))).xy;
        u_xlat4 = (u_xlatb3.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat3 = (u_xlatb3.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat3 = (u_xlatb0.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat3;
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat24.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat24.x = dot(u_xlat24.xy, u_xlat24.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat24.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat12.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat12.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat15.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat15.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat15.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat15.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat12.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat12.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat12.zx);
            u_xlat12.z = inversesqrt(u_xlat12.z);
            u_xlat12.x = inversesqrt(u_xlat12.x);
            u_xlat0.xz = u_xlat12.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat12.x = u_xlat3.y * u_xlat3.x;
            u_xlat24.x = u_xlat0.x * u_xlat12.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat36 = fract((-u_xlat3.x));
            u_xlat36 = u_xlat36 + 0.5;
            u_xlat36 = floor(u_xlat36);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat36 = u_xlat36 + (-u_xlat3.x);
            u_xlat36 = u_xlat36 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat12.x) * u_xlat0.x + 1.0;
            u_xlat15.xyz = (-vec3(u_xlat36)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat15.xyz + vec3(u_xlat36);
            u_xlatb3.xy = lessThan(u_xlat24.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat36) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat12.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat15.zyy + vec3(u_xlat36);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb36 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb36){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat36 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat36 = max(u_xlat36, u_xlat4.x);
                u_xlat36 = log2(u_xlat36);
                u_xlat36 = u_xlat36 * 0.5;
                u_xlat36 = max(u_xlat36, 0.0);
                u_xlat36 = u_xlat36 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat36);
                u_xlat36 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat15.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat39 = sqrt(u_xlat36);
                u_xlat4.x = sqrt(u_xlat15.x);
                u_xlat36 = inversesqrt(u_xlat36);
                u_xlat36 = u_xlat36 * abs(u_xlat3.z);
                u_xlat15.x = inversesqrt(u_xlat15.x);
                u_xlat3.x = u_xlat15.x * abs(u_xlat3.x);
                u_xlat36 = u_xlat36 * u_xlat3.x;
                u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                u_xlat36 = sqrt(u_xlat36);
                u_xlat3.x = u_xlat39 * u_xlat4.x;
                u_xlat15.x = u_xlat36 * u_xlat3.x;
                u_xlat27.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat27.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat27.xy = fract(u_xlat27.xy);
                u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                u_xlat27.xy = floor(u_xlat27.xy);
                u_xlat4.x = (-u_xlat27.x) + u_xlat4.x;
                u_xlat27.x = u_xlat4.x * u_xlat27.y + u_xlat27.x;
                u_xlat39 = (-u_xlat3.x) * u_xlat36 + 1.0;
                u_xlat4.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat39) * u_xlat4.xyz + u_xlat27.xxx;
                u_xlatb15.xz = lessThan(u_xlat15.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat36 = u_xlat3.x * u_xlat36 + -4.0;
                u_xlat36 = exp2(u_xlat36);
                u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.zyy + u_xlat27.xxx;
                u_xlat3.xzw = (u_xlatb15.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb15.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb36 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb36 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb36){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat27.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat27.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat27.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat27.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat36);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat15.x = sqrt(u_xlat36);
                    u_xlat27.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat3.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat27.x * u_xlat15.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat25.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat3.x = (-u_xlat25.x) + u_xlat3.x;
                    u_xlat25.x = u_xlat3.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat3.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat37) * u_xlat3.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat36) * u_xlat3.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat2.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat37 = sqrt(u_xlat36);
                    u_xlat2.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat1.z);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat37 * u_xlat2.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat25.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat2.x = (-u_xlat25.x) + u_xlat2.x;
                    u_xlat25.x = u_xlat2.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat2.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat37) * u_xlat2.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_2.xy = texture(_Texture_1_Normal, u_xlat2.xy).xy;
            u_xlat16_2.xy = u_xlat10_2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_Texture_1_Normal_Power, _Texture_1_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.xx * u_xlat16_2.xy;
            u_xlat16_11.z = u_xlat0.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat16_11.xyz;
        } else {
            u_xlat16_2.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat2.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    } else {
        u_xlat2.x = float(0.0);
        u_xlat2.y = float(0.0);
        u_xlat2.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_2_Normal_Power, _Texture_2_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_3_Normal_Power, _Texture_3_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(_Texture_4_Normal_Power);
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb3.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat4.x = vs_TEXCOORD1.w;
            u_xlat4.y = vs_TEXCOORD3.w;
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.xx;
            u_xlat10_4.xy = texture(_Texture_5_Normal, u_xlat4.xy).xy;
            u_xlat16_4.xy = u_xlat10_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_Texture_5_Normal_Power, _Texture_5_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.xx * u_xlat16_4.xy;
            u_xlat16_11.z = u_xlat1.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.yy;
            u_xlat10_3.xy = texture(_Texture_6_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_6_Normal_Power, _Texture_6_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.yy * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.zz;
            u_xlat10_3.xy = texture(_Texture_7_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_7_Normal_Power, _Texture_7_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.zz * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.ww;
            u_xlat10_3.xy = texture(_Texture_8_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(_Texture_8_Normal_Power);
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.ww * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb38 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb38){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD2.w;
        u_xlat3.z = vs_TEXCOORD3.w;
        u_xlat4.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat38 = max(abs(u_xlat4.z), abs(u_xlat4.y));
        u_xlat38 = max(u_xlat38, abs(u_xlat4.x));
        u_xlat38 = u_xlat38 + (-_UV_Mix_Start_Distance);
        u_xlat38 = max(u_xlat38, 0.0);
        u_xlat38 = u_xlat38 / _UV_Mix_Range;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * _UV_Mix_Power;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = min(u_xlat38, 1.0);
        u_xlat16_4.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_4.w = _Texture_4_Perlin_Power;
        u_xlat16_10.x = dot(u_xlat16_4, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_22 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_10.x = u_xlat16_22 + u_xlat16_10.x;
        u_xlat1.xy = u_xlat3.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy).xy;
        u_xlat16_22 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_22 = u_xlat38 * u_xlat16_22 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_22) * u_xlat16_1.xy;
        u_xlat16_22 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_22 = min(u_xlat16_22, 1.0);
        u_xlat16_22 = (-u_xlat16_22) + 1.0;
        u_xlat16_22 = sqrt(u_xlat16_22);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_22 + -1.0;
        u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_11.xy = u_xlat2.xy + u_xlat16_10.xy;
        u_xlat16_11.z = u_xlat2.z * u_xlat16_10.z;
        u_xlat16_10.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
        u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
        u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_11.xyz;
        u_xlat2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
struct DebugView_PropsArray_Type {
	float _TerrainLODLevel;
};
layout(std140) uniform UnityInstancing_DebugView_Props {
	DebugView_PropsArray_Type DebugView_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec2 u_xlat10_2;
vec4 u_xlat3;
mediump vec2 u_xlat16_3;
lowp vec2 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec2 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
bvec2 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat15;
bvec3 u_xlatb15;
mediump float u_xlat16_22;
vec2 u_xlat24;
bvec2 u_xlatb24;
vec2 u_xlat25;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
vec2 u_xlat31;
vec2 u_xlat32;
float u_xlat36;
bool u_xlatb36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb12.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb12.x = u_xlatb12.y || u_xlatb12.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb12.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat27.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat2.yyyy, u_xlat27.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat27.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat27.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat32.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat32.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat27.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlatb24.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat31.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat31.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb24.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat24.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat5.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb24.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat30.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat30.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat6.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat32.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat32.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb24.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat3.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat8.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb24.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat24.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat24.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
        u_xlatb3 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel));
        u_xlatb0.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel)).xy;
        u_xlat4 = (u_xlatb0.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat0 = (u_xlatb0.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat0 = (u_xlatb3.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat0;
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat24.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat24.x = dot(u_xlat24.xy, u_xlat24.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat24.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat12.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat12.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat15.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat15.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat15.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat15.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat12.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat12.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat12.zx);
            u_xlat12.z = inversesqrt(u_xlat12.z);
            u_xlat12.x = inversesqrt(u_xlat12.x);
            u_xlat0.xz = u_xlat12.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat12.x = u_xlat3.y * u_xlat3.x;
            u_xlat24.x = u_xlat0.x * u_xlat12.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat36 = fract((-u_xlat3.x));
            u_xlat36 = u_xlat36 + 0.5;
            u_xlat36 = floor(u_xlat36);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat36 = u_xlat36 + (-u_xlat3.x);
            u_xlat36 = u_xlat36 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat12.x) * u_xlat0.x + 1.0;
            u_xlat15.xyz = (-vec3(u_xlat36)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat15.xyz + vec3(u_xlat36);
            u_xlatb3.xy = lessThan(u_xlat24.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat36) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat12.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat15.zyy + vec3(u_xlat36);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb36 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb36){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat36 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat36 = max(u_xlat36, u_xlat4.x);
                u_xlat36 = log2(u_xlat36);
                u_xlat36 = u_xlat36 * 0.5;
                u_xlat36 = max(u_xlat36, 0.0);
                u_xlat36 = u_xlat36 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat36);
                u_xlat36 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat15.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat39 = sqrt(u_xlat36);
                u_xlat4.x = sqrt(u_xlat15.x);
                u_xlat36 = inversesqrt(u_xlat36);
                u_xlat36 = u_xlat36 * abs(u_xlat3.z);
                u_xlat15.x = inversesqrt(u_xlat15.x);
                u_xlat3.x = u_xlat15.x * abs(u_xlat3.x);
                u_xlat36 = u_xlat36 * u_xlat3.x;
                u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                u_xlat36 = sqrt(u_xlat36);
                u_xlat3.x = u_xlat39 * u_xlat4.x;
                u_xlat15.x = u_xlat36 * u_xlat3.x;
                u_xlat27.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat27.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat27.xy = fract(u_xlat27.xy);
                u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                u_xlat27.xy = floor(u_xlat27.xy);
                u_xlat4.x = (-u_xlat27.x) + u_xlat4.x;
                u_xlat27.x = u_xlat4.x * u_xlat27.y + u_xlat27.x;
                u_xlat39 = (-u_xlat3.x) * u_xlat36 + 1.0;
                u_xlat4.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat39) * u_xlat4.xyz + u_xlat27.xxx;
                u_xlatb15.xz = lessThan(u_xlat15.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat36 = u_xlat3.x * u_xlat36 + -4.0;
                u_xlat36 = exp2(u_xlat36);
                u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.zyy + u_xlat27.xxx;
                u_xlat3.xzw = (u_xlatb15.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb15.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb36 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb36 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb36){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat27.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat27.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat27.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat27.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat36);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat15.x = sqrt(u_xlat36);
                    u_xlat27.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat3.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat27.x * u_xlat15.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat25.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat3.x = (-u_xlat25.x) + u_xlat3.x;
                    u_xlat25.x = u_xlat3.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat3.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat37) * u_xlat3.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat36) * u_xlat3.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat2.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat37 = sqrt(u_xlat36);
                    u_xlat2.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat1.z);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat37 * u_xlat2.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat25.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat2.x = (-u_xlat25.x) + u_xlat2.x;
                    u_xlat25.x = u_xlat2.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat2.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat37) * u_xlat2.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_2.xy = texture(_Texture_1_Normal, u_xlat2.xy).xy;
            u_xlat16_2.xy = u_xlat10_2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_Texture_1_Normal_Power, _Texture_1_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.xx * u_xlat16_2.xy;
            u_xlat16_11.z = u_xlat0.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat16_11.xyz;
        } else {
            u_xlat16_2.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat2.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    } else {
        u_xlat2.x = float(0.0);
        u_xlat2.y = float(0.0);
        u_xlat2.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_2_Normal_Power, _Texture_2_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_3_Normal_Power, _Texture_3_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(_Texture_4_Normal_Power);
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb3.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat4.x = vs_TEXCOORD1.w;
            u_xlat4.y = vs_TEXCOORD3.w;
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.xx;
            u_xlat10_4.xy = texture(_Texture_5_Normal, u_xlat4.xy).xy;
            u_xlat16_4.xy = u_xlat10_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_Texture_5_Normal_Power, _Texture_5_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.xx * u_xlat16_4.xy;
            u_xlat16_11.z = u_xlat1.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.yy;
            u_xlat10_3.xy = texture(_Texture_6_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_6_Normal_Power, _Texture_6_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.yy * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.zz;
            u_xlat10_3.xy = texture(_Texture_7_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_7_Normal_Power, _Texture_7_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.zz * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.ww;
            u_xlat10_3.xy = texture(_Texture_8_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(_Texture_8_Normal_Power);
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.ww * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb38 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb38){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD2.w;
        u_xlat3.z = vs_TEXCOORD3.w;
        u_xlat4.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat38 = max(abs(u_xlat4.z), abs(u_xlat4.y));
        u_xlat38 = max(u_xlat38, abs(u_xlat4.x));
        u_xlat38 = u_xlat38 + (-_UV_Mix_Start_Distance);
        u_xlat38 = max(u_xlat38, 0.0);
        u_xlat38 = u_xlat38 / _UV_Mix_Range;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * _UV_Mix_Power;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = min(u_xlat38, 1.0);
        u_xlat16_4.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_4.w = _Texture_4_Perlin_Power;
        u_xlat16_10.x = dot(u_xlat16_4, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_22 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_10.x = u_xlat16_22 + u_xlat16_10.x;
        u_xlat1.xy = u_xlat3.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy).xy;
        u_xlat16_22 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_22 = u_xlat38 * u_xlat16_22 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_22) * u_xlat16_1.xy;
        u_xlat16_22 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_22 = min(u_xlat16_22, 1.0);
        u_xlat16_22 = (-u_xlat16_22) + 1.0;
        u_xlat16_22 = sqrt(u_xlat16_22);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_22 + -1.0;
        u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_11.xy = u_xlat2.xy + u_xlat16_10.xy;
        u_xlat16_11.z = u_xlat2.z * u_xlat16_10.z;
        u_xlat16_10.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
        u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
        u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_11.xyz;
        u_xlat2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec2 u_xlat16_5;
lowp vec2 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_12;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_1_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_1_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.xx;
            u_xlat10_3.xy = texture(_Texture_1_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_2.xx * u_xlat16_3.xy;
            u_xlat16_2.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.xx * u_xlat16_3.xy;
            u_xlat16_4.z = u_xlat0.x * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat16_4.xyz;
        } else {
            u_xlat16_3.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat3.xyz = u_xlat16_3.xyz;
        //ENDIF
        }
    } else {
        u_xlat3.x = float(0.0);
        u_xlat3.y = float(0.0);
        u_xlat3.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_2_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_2_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.y * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_3_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_3_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.z * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_4_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_4_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.w * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb2 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb2.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_5_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_5_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.xx;
            u_xlat10_5.xy = texture(_Texture_5_Normal, u_xlat5.xy).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.xx * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.x * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_6_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_6_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.yy;
            u_xlat10_5.xy = texture(_Texture_6_Normal, u_xlat5.xy).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.yy * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.y * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_7_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_7_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
            u_xlat10_5.xy = texture(_Texture_7_Normal, u_xlat5.xy).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.zz * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.z * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_8_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_8_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.ww;
            u_xlat10_5.xy = texture(_Texture_8_Normal, u_xlat5.xy).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.ww * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.w * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb27 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb27){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD2.w;
        u_xlat5.z = vs_TEXCOORD3.w;
        u_xlat7.xyz = u_xlat5.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat27 = max(abs(u_xlat7.z), abs(u_xlat7.y));
        u_xlat27 = max(u_xlat27, abs(u_xlat7.x));
        u_xlat27 = u_xlat27 + (-_UV_Mix_Start_Distance);
        u_xlat27 = max(u_xlat27, 0.0);
        u_xlat27 = u_xlat27 / _UV_Mix_Range;
        u_xlat27 = log2(u_xlat27);
        u_xlat27 = u_xlat27 * _UV_Mix_Power;
        u_xlat27 = exp2(u_xlat27);
        u_xlat27 = min(u_xlat27, 1.0);
        u_xlat16_2.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_2.w = _Texture_4_Perlin_Power;
        u_xlat16_4.x = dot(u_xlat16_2, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_12 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_4.x = u_xlat16_12 + u_xlat16_4.x;
        u_xlat1.xy = u_xlat5.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy).xy;
        u_xlat16_12 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_12 = u_xlat27 * u_xlat16_12 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
        u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_12 = min(u_xlat16_12, 1.0);
        u_xlat16_12 = (-u_xlat16_12) + 1.0;
        u_xlat16_12 = sqrt(u_xlat16_12);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_12 + -1.0;
        u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_6.xy = u_xlat3.xy + u_xlat16_4.xy;
        u_xlat16_6.z = u_xlat3.z * u_xlat16_4.z;
        u_xlat16_4.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
        u_xlat16_3.xyz = u_xlat16_4.xxx * u_xlat16_6.xyz;
        u_xlat3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat5.xyz;
    SV_Target0.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec2 u_xlat16_5;
lowp vec2 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_12;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_1_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_1_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.xx;
            u_xlat10_3.xy = texture(_Texture_1_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_2.xx * u_xlat16_3.xy;
            u_xlat16_2.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.xx * u_xlat16_3.xy;
            u_xlat16_4.z = u_xlat0.x * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat16_4.xyz;
        } else {
            u_xlat16_3.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat3.xyz = u_xlat16_3.xyz;
        //ENDIF
        }
    } else {
        u_xlat3.x = float(0.0);
        u_xlat3.y = float(0.0);
        u_xlat3.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_2_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_2_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.y * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_3_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_3_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.z * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_4_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_4_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.w * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb2 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb2.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_5_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_5_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.xx;
            u_xlat10_5.xy = texture(_Texture_5_Normal, u_xlat5.xy).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.xx * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.x * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_6_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_6_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.yy;
            u_xlat10_5.xy = texture(_Texture_6_Normal, u_xlat5.xy).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.yy * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.y * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_7_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_7_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
            u_xlat10_5.xy = texture(_Texture_7_Normal, u_xlat5.xy).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.zz * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.z * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_8_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_8_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.ww;
            u_xlat10_5.xy = texture(_Texture_8_Normal, u_xlat5.xy).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.ww * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.w * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb27 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb27){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD2.w;
        u_xlat5.z = vs_TEXCOORD3.w;
        u_xlat7.xyz = u_xlat5.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat27 = max(abs(u_xlat7.z), abs(u_xlat7.y));
        u_xlat27 = max(u_xlat27, abs(u_xlat7.x));
        u_xlat27 = u_xlat27 + (-_UV_Mix_Start_Distance);
        u_xlat27 = max(u_xlat27, 0.0);
        u_xlat27 = u_xlat27 / _UV_Mix_Range;
        u_xlat27 = log2(u_xlat27);
        u_xlat27 = u_xlat27 * _UV_Mix_Power;
        u_xlat27 = exp2(u_xlat27);
        u_xlat27 = min(u_xlat27, 1.0);
        u_xlat16_2.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_2.w = _Texture_4_Perlin_Power;
        u_xlat16_4.x = dot(u_xlat16_2, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_12 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_4.x = u_xlat16_12 + u_xlat16_4.x;
        u_xlat1.xy = u_xlat5.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy).xy;
        u_xlat16_12 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_12 = u_xlat27 * u_xlat16_12 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
        u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_12 = min(u_xlat16_12, 1.0);
        u_xlat16_12 = (-u_xlat16_12) + 1.0;
        u_xlat16_12 = sqrt(u_xlat16_12);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_12 + -1.0;
        u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_6.xy = u_xlat3.xy + u_xlat16_4.xy;
        u_xlat16_6.z = u_xlat3.z * u_xlat16_4.z;
        u_xlat16_4.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
        u_xlat16_3.xyz = u_xlat16_4.xxx * u_xlat16_6.xyz;
        u_xlat3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat5.xyz;
    SV_Target0.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _TerrainLODLevel;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec2 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec2 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
bvec2 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat15;
bvec3 u_xlatb15;
mediump float u_xlat16_22;
vec2 u_xlat24;
bvec2 u_xlatb24;
vec2 u_xlat25;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
vec2 u_xlat31;
vec2 u_xlat32;
float u_xlat36;
bool u_xlatb36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
float u_xlat41;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb12.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb12.x = u_xlatb12.y || u_xlatb12.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb12.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat27.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat2.yyyy, u_xlat27.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat27.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat27.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat32.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat32.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat27.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlatb24.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat31.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat31.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb24.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat24.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat5.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb24.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat30.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat30.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat6.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat32.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat32.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb24.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat3.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat8.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb24.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat24.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat24.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel)));
        u_xlatb3.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel))).xy;
        u_xlat4 = (u_xlatb3.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat3 = (u_xlatb3.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat3 = (u_xlatb0.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat3;
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat24.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat24.x = dot(u_xlat24.xy, u_xlat24.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat24.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat12.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat12.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat15.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat15.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat15.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat15.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat12.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat12.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat12.zx);
            u_xlat12.z = inversesqrt(u_xlat12.z);
            u_xlat12.x = inversesqrt(u_xlat12.x);
            u_xlat0.xz = u_xlat12.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat12.x = u_xlat3.y * u_xlat3.x;
            u_xlat24.x = u_xlat0.x * u_xlat12.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat36 = fract((-u_xlat3.x));
            u_xlat36 = u_xlat36 + 0.5;
            u_xlat36 = floor(u_xlat36);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat36 = u_xlat36 + (-u_xlat3.x);
            u_xlat36 = u_xlat36 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat12.x) * u_xlat0.x + 1.0;
            u_xlat15.xyz = (-vec3(u_xlat36)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat15.xyz + vec3(u_xlat36);
            u_xlatb3.xy = lessThan(u_xlat24.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat36) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat12.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat15.zyy + vec3(u_xlat36);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb36 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb36){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat36 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat36 = max(u_xlat36, u_xlat4.x);
                u_xlat36 = log2(u_xlat36);
                u_xlat36 = u_xlat36 * 0.5;
                u_xlat36 = max(u_xlat36, 0.0);
                u_xlat36 = u_xlat36 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat36);
                u_xlat36 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat15.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat39 = sqrt(u_xlat36);
                u_xlat4.x = sqrt(u_xlat15.x);
                u_xlat36 = inversesqrt(u_xlat36);
                u_xlat36 = u_xlat36 * abs(u_xlat3.z);
                u_xlat15.x = inversesqrt(u_xlat15.x);
                u_xlat3.x = u_xlat15.x * abs(u_xlat3.x);
                u_xlat36 = u_xlat36 * u_xlat3.x;
                u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                u_xlat36 = sqrt(u_xlat36);
                u_xlat3.x = u_xlat39 * u_xlat4.x;
                u_xlat15.x = u_xlat36 * u_xlat3.x;
                u_xlat27.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat27.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat27.xy = fract(u_xlat27.xy);
                u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                u_xlat27.xy = floor(u_xlat27.xy);
                u_xlat4.x = (-u_xlat27.x) + u_xlat4.x;
                u_xlat27.x = u_xlat4.x * u_xlat27.y + u_xlat27.x;
                u_xlat39 = (-u_xlat3.x) * u_xlat36 + 1.0;
                u_xlat4.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat39) * u_xlat4.xyz + u_xlat27.xxx;
                u_xlatb15.xz = lessThan(u_xlat15.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat36 = u_xlat3.x * u_xlat36 + -4.0;
                u_xlat36 = exp2(u_xlat36);
                u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.zyy + u_xlat27.xxx;
                u_xlat3.xzw = (u_xlatb15.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb15.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb36 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb36 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb36){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat27.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat27.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat27.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat27.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat36);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat15.x = sqrt(u_xlat36);
                    u_xlat27.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat3.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat27.x * u_xlat15.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat25.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat3.x = (-u_xlat25.x) + u_xlat3.x;
                    u_xlat25.x = u_xlat3.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat3.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat37) * u_xlat3.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat36) * u_xlat3.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat2.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat37 = sqrt(u_xlat36);
                    u_xlat2.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat1.z);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat37 * u_xlat2.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat25.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat2.x = (-u_xlat25.x) + u_xlat2.x;
                    u_xlat25.x = u_xlat2.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat2.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat37) * u_xlat2.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_1_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_1_Normal_Power;
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_2.xy = texture(_Texture_1_Normal, u_xlat2.xy).xy;
            u_xlat16_2.xy = u_xlat10_2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_2.xy = u_xlat16_10.xx * u_xlat16_2.xy;
            u_xlat16_10.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.xx * u_xlat16_2.xy;
            u_xlat16_11.z = u_xlat0.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat16_11.xyz;
        } else {
            u_xlat16_2.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat2.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    } else {
        u_xlat2.x = float(0.0);
        u_xlat2.y = float(0.0);
        u_xlat2.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_2_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_2_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_3_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_3_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_4_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_4_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb3.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_5_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_5_Normal_Power;
            u_xlat4.x = vs_TEXCOORD1.w;
            u_xlat4.y = vs_TEXCOORD3.w;
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.xx;
            u_xlat10_4.xy = texture(_Texture_5_Normal, u_xlat4.xy).xy;
            u_xlat16_4.xy = u_xlat10_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_4.xy = u_xlat16_10.xx * u_xlat16_4.xy;
            u_xlat16_10.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.xx * u_xlat16_4.xy;
            u_xlat16_11.z = u_xlat1.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_6_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_6_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.yy;
            u_xlat10_3.xy = texture(_Texture_6_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.yy * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_7_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_7_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.zz;
            u_xlat10_3.xy = texture(_Texture_7_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.zz * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_8_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_8_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.ww;
            u_xlat10_3.xy = texture(_Texture_8_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.ww * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb38 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb38){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD2.w;
        u_xlat3.z = vs_TEXCOORD3.w;
        u_xlat4.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat38 = max(abs(u_xlat4.z), abs(u_xlat4.y));
        u_xlat38 = max(u_xlat38, abs(u_xlat4.x));
        u_xlat38 = u_xlat38 + (-_UV_Mix_Start_Distance);
        u_xlat38 = max(u_xlat38, 0.0);
        u_xlat38 = u_xlat38 / _UV_Mix_Range;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * _UV_Mix_Power;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = min(u_xlat38, 1.0);
        u_xlat16_4.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_4.w = _Texture_4_Perlin_Power;
        u_xlat16_10.x = dot(u_xlat16_4, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_22 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_10.x = u_xlat16_22 + u_xlat16_10.x;
        u_xlat3.xy = u_xlat3.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_3.xy = texture(_Perlin_Normal_Tex, u_xlat3.xy).xy;
        u_xlat16_22 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_22 = u_xlat38 * u_xlat16_22 + _Perlin_Normal_Power_Close;
        u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_3.xy;
        u_xlat16_22 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
        u_xlat16_22 = min(u_xlat16_22, 1.0);
        u_xlat16_22 = (-u_xlat16_22) + 1.0;
        u_xlat16_22 = sqrt(u_xlat16_22);
        u_xlat16_3.xy = u_xlat16_3.xy;
        u_xlat16_3.z = u_xlat16_22 + -1.0;
        u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_3.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_11.xy = u_xlat2.xy + u_xlat16_10.xy;
        u_xlat16_11.z = u_xlat2.z * u_xlat16_10.z;
        u_xlat16_10.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
        u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
        u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_11.xyz;
        u_xlat2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
    u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat5.xyz = vec3(u_xlat41) * u_xlat5.xyz;
    SV_Target0.xyz = u_xlat5.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
struct DebugView_PropsArray_Type {
	float _TerrainLODLevel;
};
layout(std140) uniform UnityInstancing_DebugView_Props {
	DebugView_PropsArray_Type DebugView_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec2 u_xlat10_2;
vec4 u_xlat3;
mediump vec2 u_xlat16_3;
lowp vec2 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec2 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
bvec2 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat15;
bvec3 u_xlatb15;
mediump float u_xlat16_22;
vec2 u_xlat24;
bvec2 u_xlatb24;
vec2 u_xlat25;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
vec2 u_xlat31;
vec2 u_xlat32;
float u_xlat36;
bool u_xlatb36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb12.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb12.x = u_xlatb12.y || u_xlatb12.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb12.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat27.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat2.yyyy, u_xlat27.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat27.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat27.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat32.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat32.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat27.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlatb24.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat31.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat31.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb24.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat24.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat5.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb24.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat30.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat30.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat6.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat32.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat32.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb24.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat3.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat8.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb24.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat24.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat24.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
        u_xlatb3 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel));
        u_xlatb0.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel)).xy;
        u_xlat4 = (u_xlatb0.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat0 = (u_xlatb0.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat0 = (u_xlatb3.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat0;
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat24.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat24.x = dot(u_xlat24.xy, u_xlat24.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat24.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat12.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat12.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat15.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat15.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat15.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat15.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat12.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat12.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat12.zx);
            u_xlat12.z = inversesqrt(u_xlat12.z);
            u_xlat12.x = inversesqrt(u_xlat12.x);
            u_xlat0.xz = u_xlat12.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat12.x = u_xlat3.y * u_xlat3.x;
            u_xlat24.x = u_xlat0.x * u_xlat12.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat36 = fract((-u_xlat3.x));
            u_xlat36 = u_xlat36 + 0.5;
            u_xlat36 = floor(u_xlat36);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat36 = u_xlat36 + (-u_xlat3.x);
            u_xlat36 = u_xlat36 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat12.x) * u_xlat0.x + 1.0;
            u_xlat15.xyz = (-vec3(u_xlat36)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat15.xyz + vec3(u_xlat36);
            u_xlatb3.xy = lessThan(u_xlat24.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat36) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat12.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat15.zyy + vec3(u_xlat36);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb36 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb36){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat36 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat36 = max(u_xlat36, u_xlat4.x);
                u_xlat36 = log2(u_xlat36);
                u_xlat36 = u_xlat36 * 0.5;
                u_xlat36 = max(u_xlat36, 0.0);
                u_xlat36 = u_xlat36 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat36);
                u_xlat36 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat15.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat39 = sqrt(u_xlat36);
                u_xlat4.x = sqrt(u_xlat15.x);
                u_xlat36 = inversesqrt(u_xlat36);
                u_xlat36 = u_xlat36 * abs(u_xlat3.z);
                u_xlat15.x = inversesqrt(u_xlat15.x);
                u_xlat3.x = u_xlat15.x * abs(u_xlat3.x);
                u_xlat36 = u_xlat36 * u_xlat3.x;
                u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                u_xlat36 = sqrt(u_xlat36);
                u_xlat3.x = u_xlat39 * u_xlat4.x;
                u_xlat15.x = u_xlat36 * u_xlat3.x;
                u_xlat27.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat27.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat27.xy = fract(u_xlat27.xy);
                u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                u_xlat27.xy = floor(u_xlat27.xy);
                u_xlat4.x = (-u_xlat27.x) + u_xlat4.x;
                u_xlat27.x = u_xlat4.x * u_xlat27.y + u_xlat27.x;
                u_xlat39 = (-u_xlat3.x) * u_xlat36 + 1.0;
                u_xlat4.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat39) * u_xlat4.xyz + u_xlat27.xxx;
                u_xlatb15.xz = lessThan(u_xlat15.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat36 = u_xlat3.x * u_xlat36 + -4.0;
                u_xlat36 = exp2(u_xlat36);
                u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.zyy + u_xlat27.xxx;
                u_xlat3.xzw = (u_xlatb15.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb15.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb36 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb36 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb36){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat27.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat27.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat27.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat27.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat36);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat15.x = sqrt(u_xlat36);
                    u_xlat27.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat3.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat27.x * u_xlat15.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat25.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat3.x = (-u_xlat25.x) + u_xlat3.x;
                    u_xlat25.x = u_xlat3.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat3.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat37) * u_xlat3.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat36) * u_xlat3.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat2.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat37 = sqrt(u_xlat36);
                    u_xlat2.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat1.z);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat37 * u_xlat2.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat25.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat2.x = (-u_xlat25.x) + u_xlat2.x;
                    u_xlat25.x = u_xlat2.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat2.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat37) * u_xlat2.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_1_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_1_Normal_Power;
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_2.xy = texture(_Texture_1_Normal, u_xlat2.xy).xy;
            u_xlat16_2.xy = u_xlat10_2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_2.xy = u_xlat16_10.xx * u_xlat16_2.xy;
            u_xlat16_10.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.xx * u_xlat16_2.xy;
            u_xlat16_11.z = u_xlat0.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat16_11.xyz;
        } else {
            u_xlat16_2.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat2.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    } else {
        u_xlat2.x = float(0.0);
        u_xlat2.y = float(0.0);
        u_xlat2.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_2_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_2_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_3_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_3_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_4_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_4_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb3.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_5_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_5_Normal_Power;
            u_xlat4.x = vs_TEXCOORD1.w;
            u_xlat4.y = vs_TEXCOORD3.w;
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.xx;
            u_xlat10_4.xy = texture(_Texture_5_Normal, u_xlat4.xy).xy;
            u_xlat16_4.xy = u_xlat10_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_4.xy = u_xlat16_10.xx * u_xlat16_4.xy;
            u_xlat16_10.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.xx * u_xlat16_4.xy;
            u_xlat16_11.z = u_xlat1.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_6_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_6_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.yy;
            u_xlat10_3.xy = texture(_Texture_6_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.yy * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_7_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_7_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.zz;
            u_xlat10_3.xy = texture(_Texture_7_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.zz * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_8_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_8_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.ww;
            u_xlat10_3.xy = texture(_Texture_8_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.ww * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb38 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb38){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD2.w;
        u_xlat3.z = vs_TEXCOORD3.w;
        u_xlat4.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat38 = max(abs(u_xlat4.z), abs(u_xlat4.y));
        u_xlat38 = max(u_xlat38, abs(u_xlat4.x));
        u_xlat38 = u_xlat38 + (-_UV_Mix_Start_Distance);
        u_xlat38 = max(u_xlat38, 0.0);
        u_xlat38 = u_xlat38 / _UV_Mix_Range;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * _UV_Mix_Power;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = min(u_xlat38, 1.0);
        u_xlat16_4.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_4.w = _Texture_4_Perlin_Power;
        u_xlat16_10.x = dot(u_xlat16_4, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_22 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_10.x = u_xlat16_22 + u_xlat16_10.x;
        u_xlat1.xy = u_xlat3.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy).xy;
        u_xlat16_22 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_22 = u_xlat38 * u_xlat16_22 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_22) * u_xlat16_1.xy;
        u_xlat16_22 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_22 = min(u_xlat16_22, 1.0);
        u_xlat16_22 = (-u_xlat16_22) + 1.0;
        u_xlat16_22 = sqrt(u_xlat16_22);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_22 + -1.0;
        u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_11.xy = u_xlat2.xy + u_xlat16_10.xy;
        u_xlat16_11.z = u_xlat2.z * u_xlat16_10.z;
        u_xlat16_10.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
        u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
        u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_11.xyz;
        u_xlat2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
mediump float u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec2 u_xlat16_7;
lowp vec2 u_xlat10_7;
vec3 u_xlat8;
mediump float u_xlat16_14;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_3.xy = texture(_Texture_1_Normal, u_xlat2.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_1_Normal_Power, _Texture_1_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_4 = sqrt(u_xlat16_4);
            u_xlat16_5.xy = u_xlat0.xx * u_xlat16_3.xy;
            u_xlat16_5.z = u_xlat0.x * u_xlat16_4;
            u_xlat3.xyz = u_xlat16_5.xyz;
        } else {
            u_xlat16_3.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat3.xyz = u_xlat16_3.xyz;
        //ENDIF
        }
    } else {
        u_xlat3.x = float(0.0);
        u_xlat3.y = float(0.0);
        u_xlat3.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_2_Normal_Power, _Texture_2_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_4 = sqrt(u_xlat16_4);
            u_xlat16_5.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_5.z = u_xlat0.y * u_xlat16_4;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_5.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_3_Normal_Power, _Texture_3_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_4);
            u_xlat16_6.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_6.z = u_xlat0.z * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(_Texture_4_Normal_Power);
            u_xlat16_5.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_6.z = u_xlat0.w * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb2 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb2.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.xx;
            u_xlat10_7.xy = texture(_Texture_5_Normal, u_xlat7.xy, -1.0).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_5_Normal_Power, _Texture_5_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.xx * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.x * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
            u_xlat10_7.xy = texture(_Texture_6_Normal, u_xlat7.xy, -1.0).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_6_Normal_Power, _Texture_6_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.yy * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.y * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.zz;
            u_xlat10_7.xy = texture(_Texture_7_Normal, u_xlat7.xy, -1.0).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_7_Normal_Power, _Texture_7_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.zz * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.z * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.ww;
            u_xlat10_7.xy = texture(_Texture_8_Normal, u_xlat7.xy, -1.0).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(_Texture_8_Normal_Power);
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.ww * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.w * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb30 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb30){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD2.w;
        u_xlat7.z = vs_TEXCOORD3.w;
        u_xlat8.xyz = u_xlat7.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat30 = max(abs(u_xlat8.z), abs(u_xlat8.y));
        u_xlat30 = max(u_xlat30, abs(u_xlat8.x));
        u_xlat30 = u_xlat30 + (-_UV_Mix_Start_Distance);
        u_xlat30 = max(u_xlat30, 0.0);
        u_xlat30 = u_xlat30 / _UV_Mix_Range;
        u_xlat30 = log2(u_xlat30);
        u_xlat30 = u_xlat30 * _UV_Mix_Power;
        u_xlat30 = exp2(u_xlat30);
        u_xlat30 = min(u_xlat30, 1.0);
        u_xlat16_2.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_2.w = _Texture_4_Perlin_Power;
        u_xlat16_5.x = dot(u_xlat16_2, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_14 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_5.x = u_xlat16_14 + u_xlat16_5.x;
        u_xlat1.xy = u_xlat7.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy, -1.0).xy;
        u_xlat16_14 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_14 = u_xlat30 * u_xlat16_14 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_14) * u_xlat16_1.xy;
        u_xlat16_14 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_14 = min(u_xlat16_14, 1.0);
        u_xlat16_14 = (-u_xlat16_14) + 1.0;
        u_xlat16_14 = sqrt(u_xlat16_14);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_14 + -1.0;
        u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_6.xy = u_xlat3.xy + u_xlat16_5.xy;
        u_xlat16_6.z = u_xlat3.z * u_xlat16_5.z;
        u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
        u_xlat16_3.xyz = u_xlat16_5.xxx * u_xlat16_6.xyz;
        u_xlat3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat7.xyz;
    SV_Target0.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
mediump float u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec2 u_xlat16_7;
lowp vec2 u_xlat10_7;
vec3 u_xlat8;
mediump float u_xlat16_14;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_3.xy = texture(_Texture_1_Normal, u_xlat2.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_1_Normal_Power, _Texture_1_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_4 = sqrt(u_xlat16_4);
            u_xlat16_5.xy = u_xlat0.xx * u_xlat16_3.xy;
            u_xlat16_5.z = u_xlat0.x * u_xlat16_4;
            u_xlat3.xyz = u_xlat16_5.xyz;
        } else {
            u_xlat16_3.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat3.xyz = u_xlat16_3.xyz;
        //ENDIF
        }
    } else {
        u_xlat3.x = float(0.0);
        u_xlat3.y = float(0.0);
        u_xlat3.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_2_Normal_Power, _Texture_2_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_4 = sqrt(u_xlat16_4);
            u_xlat16_5.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_5.z = u_xlat0.y * u_xlat16_4;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_5.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_3_Normal_Power, _Texture_3_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_4);
            u_xlat16_6.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_6.z = u_xlat0.z * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(_Texture_4_Normal_Power);
            u_xlat16_5.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_6.z = u_xlat0.w * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb2 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb2.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.xx;
            u_xlat10_7.xy = texture(_Texture_5_Normal, u_xlat7.xy, -1.0).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_5_Normal_Power, _Texture_5_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.xx * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.x * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
            u_xlat10_7.xy = texture(_Texture_6_Normal, u_xlat7.xy, -1.0).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_6_Normal_Power, _Texture_6_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.yy * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.y * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.zz;
            u_xlat10_7.xy = texture(_Texture_7_Normal, u_xlat7.xy, -1.0).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_7_Normal_Power, _Texture_7_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.zz * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.z * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.ww;
            u_xlat10_7.xy = texture(_Texture_8_Normal, u_xlat7.xy, -1.0).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(_Texture_8_Normal_Power);
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.ww * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.w * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb30 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb30){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD2.w;
        u_xlat7.z = vs_TEXCOORD3.w;
        u_xlat8.xyz = u_xlat7.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat30 = max(abs(u_xlat8.z), abs(u_xlat8.y));
        u_xlat30 = max(u_xlat30, abs(u_xlat8.x));
        u_xlat30 = u_xlat30 + (-_UV_Mix_Start_Distance);
        u_xlat30 = max(u_xlat30, 0.0);
        u_xlat30 = u_xlat30 / _UV_Mix_Range;
        u_xlat30 = log2(u_xlat30);
        u_xlat30 = u_xlat30 * _UV_Mix_Power;
        u_xlat30 = exp2(u_xlat30);
        u_xlat30 = min(u_xlat30, 1.0);
        u_xlat16_2.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_2.w = _Texture_4_Perlin_Power;
        u_xlat16_5.x = dot(u_xlat16_2, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_14 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_5.x = u_xlat16_14 + u_xlat16_5.x;
        u_xlat1.xy = u_xlat7.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy, -1.0).xy;
        u_xlat16_14 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_14 = u_xlat30 * u_xlat16_14 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_14) * u_xlat16_1.xy;
        u_xlat16_14 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_14 = min(u_xlat16_14, 1.0);
        u_xlat16_14 = (-u_xlat16_14) + 1.0;
        u_xlat16_14 = sqrt(u_xlat16_14);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_14 + -1.0;
        u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_6.xy = u_xlat3.xy + u_xlat16_5.xy;
        u_xlat16_6.z = u_xlat3.z * u_xlat16_5.z;
        u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
        u_xlat16_3.xyz = u_xlat16_5.xxx * u_xlat16_6.xyz;
        u_xlat3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat7.xyz;
    SV_Target0.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _TerrainLODLevel;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec2 u_xlat10_2;
vec4 u_xlat3;
mediump vec2 u_xlat16_3;
lowp vec2 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec2 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
bvec2 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat15;
bvec3 u_xlatb15;
mediump float u_xlat16_22;
vec2 u_xlat24;
bvec2 u_xlatb24;
vec2 u_xlat25;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
vec2 u_xlat31;
vec2 u_xlat32;
float u_xlat36;
bool u_xlatb36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb12.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb12.x = u_xlatb12.y || u_xlatb12.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb12.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat27.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat2.yyyy, u_xlat27.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat27.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat27.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat32.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat32.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat27.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlatb24.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat31.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat31.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb24.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat24.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat5.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb24.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat30.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat30.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat6.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat32.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat32.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb24.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat3.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat8.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb24.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat24.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat24.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel)));
        u_xlatb3.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel))).xy;
        u_xlat4 = (u_xlatb3.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat3 = (u_xlatb3.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat3 = (u_xlatb0.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat3;
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat24.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat24.x = dot(u_xlat24.xy, u_xlat24.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat24.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat12.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat12.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat15.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat15.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat15.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat15.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat12.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat12.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat12.zx);
            u_xlat12.z = inversesqrt(u_xlat12.z);
            u_xlat12.x = inversesqrt(u_xlat12.x);
            u_xlat0.xz = u_xlat12.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat12.x = u_xlat3.y * u_xlat3.x;
            u_xlat24.x = u_xlat0.x * u_xlat12.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat36 = fract((-u_xlat3.x));
            u_xlat36 = u_xlat36 + 0.5;
            u_xlat36 = floor(u_xlat36);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat36 = u_xlat36 + (-u_xlat3.x);
            u_xlat36 = u_xlat36 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat12.x) * u_xlat0.x + 1.0;
            u_xlat15.xyz = (-vec3(u_xlat36)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat15.xyz + vec3(u_xlat36);
            u_xlatb3.xy = lessThan(u_xlat24.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat36) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat12.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat15.zyy + vec3(u_xlat36);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb36 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb36){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat36 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat36 = max(u_xlat36, u_xlat4.x);
                u_xlat36 = log2(u_xlat36);
                u_xlat36 = u_xlat36 * 0.5;
                u_xlat36 = max(u_xlat36, 0.0);
                u_xlat36 = u_xlat36 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat36);
                u_xlat36 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat15.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat39 = sqrt(u_xlat36);
                u_xlat4.x = sqrt(u_xlat15.x);
                u_xlat36 = inversesqrt(u_xlat36);
                u_xlat36 = u_xlat36 * abs(u_xlat3.z);
                u_xlat15.x = inversesqrt(u_xlat15.x);
                u_xlat3.x = u_xlat15.x * abs(u_xlat3.x);
                u_xlat36 = u_xlat36 * u_xlat3.x;
                u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                u_xlat36 = sqrt(u_xlat36);
                u_xlat3.x = u_xlat39 * u_xlat4.x;
                u_xlat15.x = u_xlat36 * u_xlat3.x;
                u_xlat27.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat27.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat27.xy = fract(u_xlat27.xy);
                u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                u_xlat27.xy = floor(u_xlat27.xy);
                u_xlat4.x = (-u_xlat27.x) + u_xlat4.x;
                u_xlat27.x = u_xlat4.x * u_xlat27.y + u_xlat27.x;
                u_xlat39 = (-u_xlat3.x) * u_xlat36 + 1.0;
                u_xlat4.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat39) * u_xlat4.xyz + u_xlat27.xxx;
                u_xlatb15.xz = lessThan(u_xlat15.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat36 = u_xlat3.x * u_xlat36 + -4.0;
                u_xlat36 = exp2(u_xlat36);
                u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.zyy + u_xlat27.xxx;
                u_xlat3.xzw = (u_xlatb15.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb15.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb36 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb36 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb36){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat27.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat27.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat27.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat27.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat36);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat15.x = sqrt(u_xlat36);
                    u_xlat27.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat3.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat27.x * u_xlat15.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat25.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat3.x = (-u_xlat25.x) + u_xlat3.x;
                    u_xlat25.x = u_xlat3.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat3.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat37) * u_xlat3.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat36) * u_xlat3.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat2.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat37 = sqrt(u_xlat36);
                    u_xlat2.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat1.z);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat37 * u_xlat2.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat25.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat2.x = (-u_xlat25.x) + u_xlat2.x;
                    u_xlat25.x = u_xlat2.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat2.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat37) * u_xlat2.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_2.xy = texture(_Texture_1_Normal, u_xlat2.xy, -1.0).xy;
            u_xlat16_2.xy = u_xlat10_2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_Texture_1_Normal_Power, _Texture_1_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.xx * u_xlat16_2.xy;
            u_xlat16_11.z = u_xlat0.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat16_11.xyz;
        } else {
            u_xlat16_2.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat2.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    } else {
        u_xlat2.x = float(0.0);
        u_xlat2.y = float(0.0);
        u_xlat2.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_2_Normal_Power, _Texture_2_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_3_Normal_Power, _Texture_3_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(_Texture_4_Normal_Power);
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb3.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat4.x = vs_TEXCOORD1.w;
            u_xlat4.y = vs_TEXCOORD3.w;
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.xx;
            u_xlat10_4.xy = texture(_Texture_5_Normal, u_xlat4.xy, -1.0).xy;
            u_xlat16_4.xy = u_xlat10_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_Texture_5_Normal_Power, _Texture_5_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.xx * u_xlat16_4.xy;
            u_xlat16_11.z = u_xlat1.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.yy;
            u_xlat10_3.xy = texture(_Texture_6_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_6_Normal_Power, _Texture_6_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.yy * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.zz;
            u_xlat10_3.xy = texture(_Texture_7_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_7_Normal_Power, _Texture_7_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.zz * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.ww;
            u_xlat10_3.xy = texture(_Texture_8_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(_Texture_8_Normal_Power);
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.ww * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb38 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb38){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD2.w;
        u_xlat3.z = vs_TEXCOORD3.w;
        u_xlat4.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat38 = max(abs(u_xlat4.z), abs(u_xlat4.y));
        u_xlat38 = max(u_xlat38, abs(u_xlat4.x));
        u_xlat38 = u_xlat38 + (-_UV_Mix_Start_Distance);
        u_xlat38 = max(u_xlat38, 0.0);
        u_xlat38 = u_xlat38 / _UV_Mix_Range;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * _UV_Mix_Power;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = min(u_xlat38, 1.0);
        u_xlat16_4.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_4.w = _Texture_4_Perlin_Power;
        u_xlat16_10.x = dot(u_xlat16_4, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_22 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_10.x = u_xlat16_22 + u_xlat16_10.x;
        u_xlat1.xy = u_xlat3.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy, -1.0).xy;
        u_xlat16_22 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_22 = u_xlat38 * u_xlat16_22 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_22) * u_xlat16_1.xy;
        u_xlat16_22 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_22 = min(u_xlat16_22, 1.0);
        u_xlat16_22 = (-u_xlat16_22) + 1.0;
        u_xlat16_22 = sqrt(u_xlat16_22);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_22 + -1.0;
        u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_11.xy = u_xlat2.xy + u_xlat16_10.xy;
        u_xlat16_11.z = u_xlat2.z * u_xlat16_10.z;
        u_xlat16_10.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
        u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
        u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_11.xyz;
        u_xlat2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
struct DebugView_PropsArray_Type {
	float _TerrainLODLevel;
};
layout(std140) uniform UnityInstancing_DebugView_Props {
	DebugView_PropsArray_Type DebugView_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec2 u_xlat10_2;
vec4 u_xlat3;
mediump vec2 u_xlat16_3;
lowp vec2 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec2 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
bvec2 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat15;
bvec3 u_xlatb15;
mediump float u_xlat16_22;
vec2 u_xlat24;
bvec2 u_xlatb24;
vec2 u_xlat25;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
vec2 u_xlat31;
vec2 u_xlat32;
float u_xlat36;
bool u_xlatb36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb12.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb12.x = u_xlatb12.y || u_xlatb12.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb12.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat27.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat2.yyyy, u_xlat27.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat27.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat27.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat32.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat32.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat27.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlatb24.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat31.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat31.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb24.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat24.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat5.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb24.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat30.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat30.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat6.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat32.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat32.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb24.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat3.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat8.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb24.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat24.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat24.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
        u_xlatb3 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel));
        u_xlatb0.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel)).xy;
        u_xlat4 = (u_xlatb0.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat0 = (u_xlatb0.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat0 = (u_xlatb3.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat0;
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat24.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat24.x = dot(u_xlat24.xy, u_xlat24.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat24.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat12.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat12.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat15.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat15.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat15.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat15.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat12.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat12.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat12.zx);
            u_xlat12.z = inversesqrt(u_xlat12.z);
            u_xlat12.x = inversesqrt(u_xlat12.x);
            u_xlat0.xz = u_xlat12.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat12.x = u_xlat3.y * u_xlat3.x;
            u_xlat24.x = u_xlat0.x * u_xlat12.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat36 = fract((-u_xlat3.x));
            u_xlat36 = u_xlat36 + 0.5;
            u_xlat36 = floor(u_xlat36);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat36 = u_xlat36 + (-u_xlat3.x);
            u_xlat36 = u_xlat36 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat12.x) * u_xlat0.x + 1.0;
            u_xlat15.xyz = (-vec3(u_xlat36)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat15.xyz + vec3(u_xlat36);
            u_xlatb3.xy = lessThan(u_xlat24.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat36) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat12.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat15.zyy + vec3(u_xlat36);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb36 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb36){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat36 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat36 = max(u_xlat36, u_xlat4.x);
                u_xlat36 = log2(u_xlat36);
                u_xlat36 = u_xlat36 * 0.5;
                u_xlat36 = max(u_xlat36, 0.0);
                u_xlat36 = u_xlat36 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat36);
                u_xlat36 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat15.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat39 = sqrt(u_xlat36);
                u_xlat4.x = sqrt(u_xlat15.x);
                u_xlat36 = inversesqrt(u_xlat36);
                u_xlat36 = u_xlat36 * abs(u_xlat3.z);
                u_xlat15.x = inversesqrt(u_xlat15.x);
                u_xlat3.x = u_xlat15.x * abs(u_xlat3.x);
                u_xlat36 = u_xlat36 * u_xlat3.x;
                u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                u_xlat36 = sqrt(u_xlat36);
                u_xlat3.x = u_xlat39 * u_xlat4.x;
                u_xlat15.x = u_xlat36 * u_xlat3.x;
                u_xlat27.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat27.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat27.xy = fract(u_xlat27.xy);
                u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                u_xlat27.xy = floor(u_xlat27.xy);
                u_xlat4.x = (-u_xlat27.x) + u_xlat4.x;
                u_xlat27.x = u_xlat4.x * u_xlat27.y + u_xlat27.x;
                u_xlat39 = (-u_xlat3.x) * u_xlat36 + 1.0;
                u_xlat4.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat39) * u_xlat4.xyz + u_xlat27.xxx;
                u_xlatb15.xz = lessThan(u_xlat15.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat36 = u_xlat3.x * u_xlat36 + -4.0;
                u_xlat36 = exp2(u_xlat36);
                u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.zyy + u_xlat27.xxx;
                u_xlat3.xzw = (u_xlatb15.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb15.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb36 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb36 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb36){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat27.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat27.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat27.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat27.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat36);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat15.x = sqrt(u_xlat36);
                    u_xlat27.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat3.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat27.x * u_xlat15.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat25.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat3.x = (-u_xlat25.x) + u_xlat3.x;
                    u_xlat25.x = u_xlat3.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat3.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat37) * u_xlat3.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat36) * u_xlat3.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat2.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat37 = sqrt(u_xlat36);
                    u_xlat2.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat1.z);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat37 * u_xlat2.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat25.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat2.x = (-u_xlat25.x) + u_xlat2.x;
                    u_xlat25.x = u_xlat2.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat2.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat37) * u_xlat2.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_2.xy = texture(_Texture_1_Normal, u_xlat2.xy, -1.0).xy;
            u_xlat16_2.xy = u_xlat10_2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_Texture_1_Normal_Power, _Texture_1_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.xx * u_xlat16_2.xy;
            u_xlat16_11.z = u_xlat0.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat16_11.xyz;
        } else {
            u_xlat16_2.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat2.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    } else {
        u_xlat2.x = float(0.0);
        u_xlat2.y = float(0.0);
        u_xlat2.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_2_Normal_Power, _Texture_2_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_3_Normal_Power, _Texture_3_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(_Texture_4_Normal_Power);
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb3.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat4.x = vs_TEXCOORD1.w;
            u_xlat4.y = vs_TEXCOORD3.w;
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.xx;
            u_xlat10_4.xy = texture(_Texture_5_Normal, u_xlat4.xy, -1.0).xy;
            u_xlat16_4.xy = u_xlat10_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_Texture_5_Normal_Power, _Texture_5_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.xx * u_xlat16_4.xy;
            u_xlat16_11.z = u_xlat1.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.yy;
            u_xlat10_3.xy = texture(_Texture_6_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_6_Normal_Power, _Texture_6_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.yy * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.zz;
            u_xlat10_3.xy = texture(_Texture_7_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_7_Normal_Power, _Texture_7_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.zz * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.ww;
            u_xlat10_3.xy = texture(_Texture_8_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(_Texture_8_Normal_Power);
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.ww * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb38 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb38){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD2.w;
        u_xlat3.z = vs_TEXCOORD3.w;
        u_xlat4.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat38 = max(abs(u_xlat4.z), abs(u_xlat4.y));
        u_xlat38 = max(u_xlat38, abs(u_xlat4.x));
        u_xlat38 = u_xlat38 + (-_UV_Mix_Start_Distance);
        u_xlat38 = max(u_xlat38, 0.0);
        u_xlat38 = u_xlat38 / _UV_Mix_Range;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * _UV_Mix_Power;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = min(u_xlat38, 1.0);
        u_xlat16_4.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_4.w = _Texture_4_Perlin_Power;
        u_xlat16_10.x = dot(u_xlat16_4, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_22 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_10.x = u_xlat16_22 + u_xlat16_10.x;
        u_xlat1.xy = u_xlat3.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy, -1.0).xy;
        u_xlat16_22 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_22 = u_xlat38 * u_xlat16_22 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_22) * u_xlat16_1.xy;
        u_xlat16_22 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_22 = min(u_xlat16_22, 1.0);
        u_xlat16_22 = (-u_xlat16_22) + 1.0;
        u_xlat16_22 = sqrt(u_xlat16_22);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_22 + -1.0;
        u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_11.xy = u_xlat2.xy + u_xlat16_10.xy;
        u_xlat16_11.z = u_xlat2.z * u_xlat16_10.z;
        u_xlat16_10.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
        u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
        u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_11.xyz;
        u_xlat2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec2 u_xlat16_5;
lowp vec2 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_12;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_1_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_1_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.xx;
            u_xlat10_3.xy = texture(_Texture_1_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_2.xx * u_xlat16_3.xy;
            u_xlat16_2.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.xx * u_xlat16_3.xy;
            u_xlat16_4.z = u_xlat0.x * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat16_4.xyz;
        } else {
            u_xlat16_3.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat3.xyz = u_xlat16_3.xyz;
        //ENDIF
        }
    } else {
        u_xlat3.x = float(0.0);
        u_xlat3.y = float(0.0);
        u_xlat3.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_2_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_2_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.y * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_3_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_3_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.z * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_4_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_4_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.w * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb2 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb2.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_5_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_5_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.xx;
            u_xlat10_5.xy = texture(_Texture_5_Normal, u_xlat5.xy, -1.0).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.xx * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.x * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_6_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_6_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.yy;
            u_xlat10_5.xy = texture(_Texture_6_Normal, u_xlat5.xy, -1.0).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.yy * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.y * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_7_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_7_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
            u_xlat10_5.xy = texture(_Texture_7_Normal, u_xlat5.xy, -1.0).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.zz * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.z * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_8_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_8_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.ww;
            u_xlat10_5.xy = texture(_Texture_8_Normal, u_xlat5.xy, -1.0).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.ww * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.w * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb27 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb27){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD2.w;
        u_xlat5.z = vs_TEXCOORD3.w;
        u_xlat7.xyz = u_xlat5.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat27 = max(abs(u_xlat7.z), abs(u_xlat7.y));
        u_xlat27 = max(u_xlat27, abs(u_xlat7.x));
        u_xlat27 = u_xlat27 + (-_UV_Mix_Start_Distance);
        u_xlat27 = max(u_xlat27, 0.0);
        u_xlat27 = u_xlat27 / _UV_Mix_Range;
        u_xlat27 = log2(u_xlat27);
        u_xlat27 = u_xlat27 * _UV_Mix_Power;
        u_xlat27 = exp2(u_xlat27);
        u_xlat27 = min(u_xlat27, 1.0);
        u_xlat16_2.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_2.w = _Texture_4_Perlin_Power;
        u_xlat16_4.x = dot(u_xlat16_2, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_12 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_4.x = u_xlat16_12 + u_xlat16_4.x;
        u_xlat1.xy = u_xlat5.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy, -1.0).xy;
        u_xlat16_12 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_12 = u_xlat27 * u_xlat16_12 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
        u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_12 = min(u_xlat16_12, 1.0);
        u_xlat16_12 = (-u_xlat16_12) + 1.0;
        u_xlat16_12 = sqrt(u_xlat16_12);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_12 + -1.0;
        u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_6.xy = u_xlat3.xy + u_xlat16_4.xy;
        u_xlat16_6.z = u_xlat3.z * u_xlat16_4.z;
        u_xlat16_4.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
        u_xlat16_3.xyz = u_xlat16_4.xxx * u_xlat16_6.xyz;
        u_xlat3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat5.xyz;
    SV_Target0.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec2 u_xlat16_5;
lowp vec2 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_12;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_1_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_1_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.xx;
            u_xlat10_3.xy = texture(_Texture_1_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_2.xx * u_xlat16_3.xy;
            u_xlat16_2.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.xx * u_xlat16_3.xy;
            u_xlat16_4.z = u_xlat0.x * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat16_4.xyz;
        } else {
            u_xlat16_3.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat3.xyz = u_xlat16_3.xyz;
        //ENDIF
        }
    } else {
        u_xlat3.x = float(0.0);
        u_xlat3.y = float(0.0);
        u_xlat3.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_2_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_2_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.y * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_3_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_3_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.z * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_4_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_4_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.w * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb2 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb2.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_5_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_5_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.xx;
            u_xlat10_5.xy = texture(_Texture_5_Normal, u_xlat5.xy, -1.0).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.xx * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.x * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_6_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_6_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.yy;
            u_xlat10_5.xy = texture(_Texture_6_Normal, u_xlat5.xy, -1.0).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.yy * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.y * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_7_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_7_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
            u_xlat10_5.xy = texture(_Texture_7_Normal, u_xlat5.xy, -1.0).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.zz * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.z * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_8_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_8_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.ww;
            u_xlat10_5.xy = texture(_Texture_8_Normal, u_xlat5.xy, -1.0).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.ww * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.w * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb27 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb27){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD2.w;
        u_xlat5.z = vs_TEXCOORD3.w;
        u_xlat7.xyz = u_xlat5.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat27 = max(abs(u_xlat7.z), abs(u_xlat7.y));
        u_xlat27 = max(u_xlat27, abs(u_xlat7.x));
        u_xlat27 = u_xlat27 + (-_UV_Mix_Start_Distance);
        u_xlat27 = max(u_xlat27, 0.0);
        u_xlat27 = u_xlat27 / _UV_Mix_Range;
        u_xlat27 = log2(u_xlat27);
        u_xlat27 = u_xlat27 * _UV_Mix_Power;
        u_xlat27 = exp2(u_xlat27);
        u_xlat27 = min(u_xlat27, 1.0);
        u_xlat16_2.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_2.w = _Texture_4_Perlin_Power;
        u_xlat16_4.x = dot(u_xlat16_2, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_12 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_4.x = u_xlat16_12 + u_xlat16_4.x;
        u_xlat1.xy = u_xlat5.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy, -1.0).xy;
        u_xlat16_12 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_12 = u_xlat27 * u_xlat16_12 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
        u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_12 = min(u_xlat16_12, 1.0);
        u_xlat16_12 = (-u_xlat16_12) + 1.0;
        u_xlat16_12 = sqrt(u_xlat16_12);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_12 + -1.0;
        u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_6.xy = u_xlat3.xy + u_xlat16_4.xy;
        u_xlat16_6.z = u_xlat3.z * u_xlat16_4.z;
        u_xlat16_4.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
        u_xlat16_3.xyz = u_xlat16_4.xxx * u_xlat16_6.xyz;
        u_xlat3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat5.xyz;
    SV_Target0.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _TerrainLODLevel;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec2 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec2 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
bvec2 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat15;
bvec3 u_xlatb15;
mediump float u_xlat16_22;
vec2 u_xlat24;
bvec2 u_xlatb24;
vec2 u_xlat25;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
vec2 u_xlat31;
vec2 u_xlat32;
float u_xlat36;
bool u_xlatb36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
float u_xlat41;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb12.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb12.x = u_xlatb12.y || u_xlatb12.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb12.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat27.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat2.yyyy, u_xlat27.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat27.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat27.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat32.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat32.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat27.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlatb24.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat31.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat31.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb24.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat24.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat5.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb24.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat30.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat30.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat6.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat32.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat32.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb24.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat3.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat8.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb24.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat24.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat24.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel)));
        u_xlatb3.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel))).xy;
        u_xlat4 = (u_xlatb3.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat3 = (u_xlatb3.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat3 = (u_xlatb0.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat3;
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat24.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat24.x = dot(u_xlat24.xy, u_xlat24.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat24.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat12.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat12.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat15.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat15.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat15.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat15.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat12.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat12.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat12.zx);
            u_xlat12.z = inversesqrt(u_xlat12.z);
            u_xlat12.x = inversesqrt(u_xlat12.x);
            u_xlat0.xz = u_xlat12.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat12.x = u_xlat3.y * u_xlat3.x;
            u_xlat24.x = u_xlat0.x * u_xlat12.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat36 = fract((-u_xlat3.x));
            u_xlat36 = u_xlat36 + 0.5;
            u_xlat36 = floor(u_xlat36);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat36 = u_xlat36 + (-u_xlat3.x);
            u_xlat36 = u_xlat36 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat12.x) * u_xlat0.x + 1.0;
            u_xlat15.xyz = (-vec3(u_xlat36)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat15.xyz + vec3(u_xlat36);
            u_xlatb3.xy = lessThan(u_xlat24.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat36) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat12.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat15.zyy + vec3(u_xlat36);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb36 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb36){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat36 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat36 = max(u_xlat36, u_xlat4.x);
                u_xlat36 = log2(u_xlat36);
                u_xlat36 = u_xlat36 * 0.5;
                u_xlat36 = max(u_xlat36, 0.0);
                u_xlat36 = u_xlat36 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat36);
                u_xlat36 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat15.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat39 = sqrt(u_xlat36);
                u_xlat4.x = sqrt(u_xlat15.x);
                u_xlat36 = inversesqrt(u_xlat36);
                u_xlat36 = u_xlat36 * abs(u_xlat3.z);
                u_xlat15.x = inversesqrt(u_xlat15.x);
                u_xlat3.x = u_xlat15.x * abs(u_xlat3.x);
                u_xlat36 = u_xlat36 * u_xlat3.x;
                u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                u_xlat36 = sqrt(u_xlat36);
                u_xlat3.x = u_xlat39 * u_xlat4.x;
                u_xlat15.x = u_xlat36 * u_xlat3.x;
                u_xlat27.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat27.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat27.xy = fract(u_xlat27.xy);
                u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                u_xlat27.xy = floor(u_xlat27.xy);
                u_xlat4.x = (-u_xlat27.x) + u_xlat4.x;
                u_xlat27.x = u_xlat4.x * u_xlat27.y + u_xlat27.x;
                u_xlat39 = (-u_xlat3.x) * u_xlat36 + 1.0;
                u_xlat4.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat39) * u_xlat4.xyz + u_xlat27.xxx;
                u_xlatb15.xz = lessThan(u_xlat15.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat36 = u_xlat3.x * u_xlat36 + -4.0;
                u_xlat36 = exp2(u_xlat36);
                u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.zyy + u_xlat27.xxx;
                u_xlat3.xzw = (u_xlatb15.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb15.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb36 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb36 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb36){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat27.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat27.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat27.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat27.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat36);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat15.x = sqrt(u_xlat36);
                    u_xlat27.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat3.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat27.x * u_xlat15.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat25.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat3.x = (-u_xlat25.x) + u_xlat3.x;
                    u_xlat25.x = u_xlat3.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat3.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat37) * u_xlat3.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat36) * u_xlat3.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat2.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat37 = sqrt(u_xlat36);
                    u_xlat2.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat1.z);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat37 * u_xlat2.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat25.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat2.x = (-u_xlat25.x) + u_xlat2.x;
                    u_xlat25.x = u_xlat2.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat2.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat37) * u_xlat2.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_1_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_1_Normal_Power;
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_2.xy = texture(_Texture_1_Normal, u_xlat2.xy, -1.0).xy;
            u_xlat16_2.xy = u_xlat10_2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_2.xy = u_xlat16_10.xx * u_xlat16_2.xy;
            u_xlat16_10.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.xx * u_xlat16_2.xy;
            u_xlat16_11.z = u_xlat0.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat16_11.xyz;
        } else {
            u_xlat16_2.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat2.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    } else {
        u_xlat2.x = float(0.0);
        u_xlat2.y = float(0.0);
        u_xlat2.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_2_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_2_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_3_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_3_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_4_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_4_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb3.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_5_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_5_Normal_Power;
            u_xlat4.x = vs_TEXCOORD1.w;
            u_xlat4.y = vs_TEXCOORD3.w;
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.xx;
            u_xlat10_4.xy = texture(_Texture_5_Normal, u_xlat4.xy, -1.0).xy;
            u_xlat16_4.xy = u_xlat10_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_4.xy = u_xlat16_10.xx * u_xlat16_4.xy;
            u_xlat16_10.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.xx * u_xlat16_4.xy;
            u_xlat16_11.z = u_xlat1.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_6_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_6_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.yy;
            u_xlat10_3.xy = texture(_Texture_6_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.yy * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_7_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_7_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.zz;
            u_xlat10_3.xy = texture(_Texture_7_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.zz * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_8_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_8_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.ww;
            u_xlat10_3.xy = texture(_Texture_8_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.ww * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb38 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb38){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD2.w;
        u_xlat3.z = vs_TEXCOORD3.w;
        u_xlat4.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat38 = max(abs(u_xlat4.z), abs(u_xlat4.y));
        u_xlat38 = max(u_xlat38, abs(u_xlat4.x));
        u_xlat38 = u_xlat38 + (-_UV_Mix_Start_Distance);
        u_xlat38 = max(u_xlat38, 0.0);
        u_xlat38 = u_xlat38 / _UV_Mix_Range;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * _UV_Mix_Power;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = min(u_xlat38, 1.0);
        u_xlat16_4.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_4.w = _Texture_4_Perlin_Power;
        u_xlat16_10.x = dot(u_xlat16_4, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_22 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_10.x = u_xlat16_22 + u_xlat16_10.x;
        u_xlat3.xy = u_xlat3.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_3.xy = texture(_Perlin_Normal_Tex, u_xlat3.xy, -1.0).xy;
        u_xlat16_22 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_22 = u_xlat38 * u_xlat16_22 + _Perlin_Normal_Power_Close;
        u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_3.xy;
        u_xlat16_22 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
        u_xlat16_22 = min(u_xlat16_22, 1.0);
        u_xlat16_22 = (-u_xlat16_22) + 1.0;
        u_xlat16_22 = sqrt(u_xlat16_22);
        u_xlat16_3.xy = u_xlat16_3.xy;
        u_xlat16_3.z = u_xlat16_22 + -1.0;
        u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_3.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_11.xy = u_xlat2.xy + u_xlat16_10.xy;
        u_xlat16_11.z = u_xlat2.z * u_xlat16_10.z;
        u_xlat16_10.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
        u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
        u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_11.xyz;
        u_xlat2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
    u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat5.xyz = vec3(u_xlat41) * u_xlat5.xyz;
    SV_Target0.xyz = u_xlat5.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat2.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat2.zxy * u_xlat16_3.yzx + (-u_xlat16_4.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_4.x);
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.x = u_xlat16_3.z;
    vs_TEXCOORD2.x = u_xlat16_3.x;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = (-u_xlat16_4.y);
    vs_TEXCOORD3.y = (-u_xlat16_4.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
struct DebugView_PropsArray_Type {
	float _TerrainLODLevel;
};
layout(std140) uniform UnityInstancing_DebugView_Props {
	DebugView_PropsArray_Type DebugView_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec2 u_xlat10_2;
vec4 u_xlat3;
mediump vec2 u_xlat16_3;
lowp vec2 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec2 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
bvec2 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat15;
bvec3 u_xlatb15;
mediump float u_xlat16_22;
vec2 u_xlat24;
bvec2 u_xlatb24;
vec2 u_xlat25;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
vec2 u_xlat31;
vec2 u_xlat32;
float u_xlat36;
bool u_xlatb36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb12.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb12.x = u_xlatb12.y || u_xlatb12.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb12.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat27.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat2.yyyy, u_xlat27.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat27.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat27.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat32.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat32.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat27.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlatb24.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat31.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat31.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb24.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat24.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat5.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb24.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat30.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat30.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat6.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat32.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat32.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb24.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat3.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat8.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb24.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat24.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat24.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
        u_xlatb3 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel));
        u_xlatb0.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel)).xy;
        u_xlat4 = (u_xlatb0.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat0 = (u_xlatb0.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat0 = (u_xlatb3.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat0;
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat24.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat24.x = dot(u_xlat24.xy, u_xlat24.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat24.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat12.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat12.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat15.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat15.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat15.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat15.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat12.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat12.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat12.zx);
            u_xlat12.z = inversesqrt(u_xlat12.z);
            u_xlat12.x = inversesqrt(u_xlat12.x);
            u_xlat0.xz = u_xlat12.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat12.x = u_xlat3.y * u_xlat3.x;
            u_xlat24.x = u_xlat0.x * u_xlat12.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat36 = fract((-u_xlat3.x));
            u_xlat36 = u_xlat36 + 0.5;
            u_xlat36 = floor(u_xlat36);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat36 = u_xlat36 + (-u_xlat3.x);
            u_xlat36 = u_xlat36 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat12.x) * u_xlat0.x + 1.0;
            u_xlat15.xyz = (-vec3(u_xlat36)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat15.xyz + vec3(u_xlat36);
            u_xlatb3.xy = lessThan(u_xlat24.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat36) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat12.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat15.zyy + vec3(u_xlat36);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb36 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb36){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat36 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat36 = max(u_xlat36, u_xlat4.x);
                u_xlat36 = log2(u_xlat36);
                u_xlat36 = u_xlat36 * 0.5;
                u_xlat36 = max(u_xlat36, 0.0);
                u_xlat36 = u_xlat36 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat36);
                u_xlat36 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat15.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat39 = sqrt(u_xlat36);
                u_xlat4.x = sqrt(u_xlat15.x);
                u_xlat36 = inversesqrt(u_xlat36);
                u_xlat36 = u_xlat36 * abs(u_xlat3.z);
                u_xlat15.x = inversesqrt(u_xlat15.x);
                u_xlat3.x = u_xlat15.x * abs(u_xlat3.x);
                u_xlat36 = u_xlat36 * u_xlat3.x;
                u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                u_xlat36 = sqrt(u_xlat36);
                u_xlat3.x = u_xlat39 * u_xlat4.x;
                u_xlat15.x = u_xlat36 * u_xlat3.x;
                u_xlat27.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat27.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat27.xy = fract(u_xlat27.xy);
                u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                u_xlat27.xy = floor(u_xlat27.xy);
                u_xlat4.x = (-u_xlat27.x) + u_xlat4.x;
                u_xlat27.x = u_xlat4.x * u_xlat27.y + u_xlat27.x;
                u_xlat39 = (-u_xlat3.x) * u_xlat36 + 1.0;
                u_xlat4.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat39) * u_xlat4.xyz + u_xlat27.xxx;
                u_xlatb15.xz = lessThan(u_xlat15.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat36 = u_xlat3.x * u_xlat36 + -4.0;
                u_xlat36 = exp2(u_xlat36);
                u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.zyy + u_xlat27.xxx;
                u_xlat3.xzw = (u_xlatb15.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb15.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb36 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb36 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb36){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat27.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat27.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat27.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat27.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat36);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat15.x = sqrt(u_xlat36);
                    u_xlat27.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat3.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat27.x * u_xlat15.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat25.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat3.x = (-u_xlat25.x) + u_xlat3.x;
                    u_xlat25.x = u_xlat3.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat3.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat37) * u_xlat3.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat36) * u_xlat3.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat2.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat37 = sqrt(u_xlat36);
                    u_xlat2.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat1.z);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat37 * u_xlat2.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat25.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat2.x = (-u_xlat25.x) + u_xlat2.x;
                    u_xlat25.x = u_xlat2.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat2.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat37) * u_xlat2.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_1_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_1_Normal_Power;
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_2.xy = texture(_Texture_1_Normal, u_xlat2.xy, -1.0).xy;
            u_xlat16_2.xy = u_xlat10_2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_2.xy = u_xlat16_10.xx * u_xlat16_2.xy;
            u_xlat16_10.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.xx * u_xlat16_2.xy;
            u_xlat16_11.z = u_xlat0.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat16_11.xyz;
        } else {
            u_xlat16_2.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat2.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    } else {
        u_xlat2.x = float(0.0);
        u_xlat2.y = float(0.0);
        u_xlat2.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_2_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_2_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_3_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_3_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_4_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_4_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb3.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_5_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_5_Normal_Power;
            u_xlat4.x = vs_TEXCOORD1.w;
            u_xlat4.y = vs_TEXCOORD3.w;
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.xx;
            u_xlat10_4.xy = texture(_Texture_5_Normal, u_xlat4.xy, -1.0).xy;
            u_xlat16_4.xy = u_xlat10_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_4.xy = u_xlat16_10.xx * u_xlat16_4.xy;
            u_xlat16_10.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.xx * u_xlat16_4.xy;
            u_xlat16_11.z = u_xlat1.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_6_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_6_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.yy;
            u_xlat10_3.xy = texture(_Texture_6_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.yy * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_7_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_7_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.zz;
            u_xlat10_3.xy = texture(_Texture_7_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.zz * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_8_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_8_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.ww;
            u_xlat10_3.xy = texture(_Texture_8_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.ww * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb38 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb38){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD2.w;
        u_xlat3.z = vs_TEXCOORD3.w;
        u_xlat4.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat38 = max(abs(u_xlat4.z), abs(u_xlat4.y));
        u_xlat38 = max(u_xlat38, abs(u_xlat4.x));
        u_xlat38 = u_xlat38 + (-_UV_Mix_Start_Distance);
        u_xlat38 = max(u_xlat38, 0.0);
        u_xlat38 = u_xlat38 / _UV_Mix_Range;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * _UV_Mix_Power;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = min(u_xlat38, 1.0);
        u_xlat16_4.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_4.w = _Texture_4_Perlin_Power;
        u_xlat16_10.x = dot(u_xlat16_4, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_22 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_10.x = u_xlat16_22 + u_xlat16_10.x;
        u_xlat1.xy = u_xlat3.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy, -1.0).xy;
        u_xlat16_22 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_22 = u_xlat38 * u_xlat16_22 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_22) * u_xlat16_1.xy;
        u_xlat16_22 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_22 = min(u_xlat16_22, 1.0);
        u_xlat16_22 = (-u_xlat16_22) + 1.0;
        u_xlat16_22 = sqrt(u_xlat16_22);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_22 + -1.0;
        u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_11.xy = u_xlat2.xy + u_xlat16_10.xy;
        u_xlat16_11.z = u_xlat2.z * u_xlat16_10.z;
        u_xlat16_10.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
        u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
        u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_11.xyz;
        u_xlat2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
mediump float u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec2 u_xlat16_7;
lowp vec2 u_xlat10_7;
vec3 u_xlat8;
mediump float u_xlat16_14;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_3.xy = texture(_Texture_1_Normal, u_xlat2.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_1_Normal_Power, _Texture_1_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_4 = sqrt(u_xlat16_4);
            u_xlat16_5.xy = u_xlat0.xx * u_xlat16_3.xy;
            u_xlat16_5.z = u_xlat0.x * u_xlat16_4;
            u_xlat3.xyz = u_xlat16_5.xyz;
        } else {
            u_xlat16_3.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat3.xyz = u_xlat16_3.xyz;
        //ENDIF
        }
    } else {
        u_xlat3.x = float(0.0);
        u_xlat3.y = float(0.0);
        u_xlat3.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_2_Normal_Power, _Texture_2_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_4 = sqrt(u_xlat16_4);
            u_xlat16_5.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_5.z = u_xlat0.y * u_xlat16_4;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_5.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_3_Normal_Power, _Texture_3_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_4);
            u_xlat16_6.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_6.z = u_xlat0.z * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(_Texture_4_Normal_Power);
            u_xlat16_5.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_6.z = u_xlat0.w * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb2 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb2.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.xx;
            u_xlat10_7.xy = texture(_Texture_5_Normal, u_xlat7.xy).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_5_Normal_Power, _Texture_5_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.xx * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.x * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
            u_xlat10_7.xy = texture(_Texture_6_Normal, u_xlat7.xy).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_6_Normal_Power, _Texture_6_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.yy * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.y * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.zz;
            u_xlat10_7.xy = texture(_Texture_7_Normal, u_xlat7.xy).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_7_Normal_Power, _Texture_7_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.zz * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.z * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.ww;
            u_xlat10_7.xy = texture(_Texture_8_Normal, u_xlat7.xy).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(_Texture_8_Normal_Power);
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.ww * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.w * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb30 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb30){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD2.w;
        u_xlat7.z = vs_TEXCOORD3.w;
        u_xlat8.xyz = u_xlat7.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat30 = max(abs(u_xlat8.z), abs(u_xlat8.y));
        u_xlat30 = max(u_xlat30, abs(u_xlat8.x));
        u_xlat30 = u_xlat30 + (-_UV_Mix_Start_Distance);
        u_xlat30 = max(u_xlat30, 0.0);
        u_xlat30 = u_xlat30 / _UV_Mix_Range;
        u_xlat30 = log2(u_xlat30);
        u_xlat30 = u_xlat30 * _UV_Mix_Power;
        u_xlat30 = exp2(u_xlat30);
        u_xlat30 = min(u_xlat30, 1.0);
        u_xlat16_2.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_2.w = _Texture_4_Perlin_Power;
        u_xlat16_5.x = dot(u_xlat16_2, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_14 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_5.x = u_xlat16_14 + u_xlat16_5.x;
        u_xlat1.xy = u_xlat7.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy).xy;
        u_xlat16_14 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_14 = u_xlat30 * u_xlat16_14 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_14) * u_xlat16_1.xy;
        u_xlat16_14 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_14 = min(u_xlat16_14, 1.0);
        u_xlat16_14 = (-u_xlat16_14) + 1.0;
        u_xlat16_14 = sqrt(u_xlat16_14);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_14 + -1.0;
        u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_6.xy = u_xlat3.xy + u_xlat16_5.xy;
        u_xlat16_6.z = u_xlat3.z * u_xlat16_5.z;
        u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
        u_xlat16_3.xyz = u_xlat16_5.xxx * u_xlat16_6.xyz;
        u_xlat3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat7.xyz;
    SV_Target0.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
mediump float u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec2 u_xlat16_7;
lowp vec2 u_xlat10_7;
vec3 u_xlat8;
mediump float u_xlat16_14;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_3.xy = texture(_Texture_1_Normal, u_xlat2.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_1_Normal_Power, _Texture_1_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_4 = sqrt(u_xlat16_4);
            u_xlat16_5.xy = u_xlat0.xx * u_xlat16_3.xy;
            u_xlat16_5.z = u_xlat0.x * u_xlat16_4;
            u_xlat3.xyz = u_xlat16_5.xyz;
        } else {
            u_xlat16_3.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat3.xyz = u_xlat16_3.xyz;
        //ENDIF
        }
    } else {
        u_xlat3.x = float(0.0);
        u_xlat3.y = float(0.0);
        u_xlat3.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_2_Normal_Power, _Texture_2_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_4 = sqrt(u_xlat16_4);
            u_xlat16_5.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_5.z = u_xlat0.y * u_xlat16_4;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_5.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_3_Normal_Power, _Texture_3_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_4);
            u_xlat16_6.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_6.z = u_xlat0.z * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(_Texture_4_Normal_Power);
            u_xlat16_5.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_6.z = u_xlat0.w * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb2 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb2.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.xx;
            u_xlat10_7.xy = texture(_Texture_5_Normal, u_xlat7.xy).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_5_Normal_Power, _Texture_5_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.xx * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.x * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
            u_xlat10_7.xy = texture(_Texture_6_Normal, u_xlat7.xy).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_6_Normal_Power, _Texture_6_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.yy * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.y * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.zz;
            u_xlat10_7.xy = texture(_Texture_7_Normal, u_xlat7.xy).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_7_Normal_Power, _Texture_7_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.zz * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.z * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.ww;
            u_xlat10_7.xy = texture(_Texture_8_Normal, u_xlat7.xy).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(_Texture_8_Normal_Power);
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.ww * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.w * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb30 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb30){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD2.w;
        u_xlat7.z = vs_TEXCOORD3.w;
        u_xlat8.xyz = u_xlat7.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat30 = max(abs(u_xlat8.z), abs(u_xlat8.y));
        u_xlat30 = max(u_xlat30, abs(u_xlat8.x));
        u_xlat30 = u_xlat30 + (-_UV_Mix_Start_Distance);
        u_xlat30 = max(u_xlat30, 0.0);
        u_xlat30 = u_xlat30 / _UV_Mix_Range;
        u_xlat30 = log2(u_xlat30);
        u_xlat30 = u_xlat30 * _UV_Mix_Power;
        u_xlat30 = exp2(u_xlat30);
        u_xlat30 = min(u_xlat30, 1.0);
        u_xlat16_2.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_2.w = _Texture_4_Perlin_Power;
        u_xlat16_5.x = dot(u_xlat16_2, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_14 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_5.x = u_xlat16_14 + u_xlat16_5.x;
        u_xlat1.xy = u_xlat7.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy).xy;
        u_xlat16_14 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_14 = u_xlat30 * u_xlat16_14 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_14) * u_xlat16_1.xy;
        u_xlat16_14 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_14 = min(u_xlat16_14, 1.0);
        u_xlat16_14 = (-u_xlat16_14) + 1.0;
        u_xlat16_14 = sqrt(u_xlat16_14);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_14 + -1.0;
        u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_6.xy = u_xlat3.xy + u_xlat16_5.xy;
        u_xlat16_6.z = u_xlat3.z * u_xlat16_5.z;
        u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
        u_xlat16_3.xyz = u_xlat16_5.xxx * u_xlat16_6.xyz;
        u_xlat3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat7.xyz;
    SV_Target0.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _TerrainLODLevel;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec2 u_xlat10_2;
vec4 u_xlat3;
mediump vec2 u_xlat16_3;
lowp vec2 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec2 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
bvec2 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat15;
bvec3 u_xlatb15;
mediump float u_xlat16_22;
vec2 u_xlat24;
bvec2 u_xlatb24;
vec2 u_xlat25;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
vec2 u_xlat31;
vec2 u_xlat32;
float u_xlat36;
bool u_xlatb36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb12.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb12.x = u_xlatb12.y || u_xlatb12.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb12.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat27.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat2.yyyy, u_xlat27.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat27.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat27.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat32.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat32.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat27.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlatb24.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat31.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat31.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb24.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat24.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat5.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb24.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat30.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat30.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat6.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat32.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat32.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb24.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat3.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat8.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb24.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat24.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat24.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel)));
        u_xlatb3.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel))).xy;
        u_xlat4 = (u_xlatb3.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat3 = (u_xlatb3.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat3 = (u_xlatb0.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat3;
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat24.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat24.x = dot(u_xlat24.xy, u_xlat24.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat24.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat12.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat12.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat15.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat15.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat15.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat15.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat12.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat12.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat12.zx);
            u_xlat12.z = inversesqrt(u_xlat12.z);
            u_xlat12.x = inversesqrt(u_xlat12.x);
            u_xlat0.xz = u_xlat12.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat12.x = u_xlat3.y * u_xlat3.x;
            u_xlat24.x = u_xlat0.x * u_xlat12.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat36 = fract((-u_xlat3.x));
            u_xlat36 = u_xlat36 + 0.5;
            u_xlat36 = floor(u_xlat36);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat36 = u_xlat36 + (-u_xlat3.x);
            u_xlat36 = u_xlat36 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat12.x) * u_xlat0.x + 1.0;
            u_xlat15.xyz = (-vec3(u_xlat36)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat15.xyz + vec3(u_xlat36);
            u_xlatb3.xy = lessThan(u_xlat24.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat36) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat12.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat15.zyy + vec3(u_xlat36);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb36 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb36){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat36 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat36 = max(u_xlat36, u_xlat4.x);
                u_xlat36 = log2(u_xlat36);
                u_xlat36 = u_xlat36 * 0.5;
                u_xlat36 = max(u_xlat36, 0.0);
                u_xlat36 = u_xlat36 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat36);
                u_xlat36 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat15.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat39 = sqrt(u_xlat36);
                u_xlat4.x = sqrt(u_xlat15.x);
                u_xlat36 = inversesqrt(u_xlat36);
                u_xlat36 = u_xlat36 * abs(u_xlat3.z);
                u_xlat15.x = inversesqrt(u_xlat15.x);
                u_xlat3.x = u_xlat15.x * abs(u_xlat3.x);
                u_xlat36 = u_xlat36 * u_xlat3.x;
                u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                u_xlat36 = sqrt(u_xlat36);
                u_xlat3.x = u_xlat39 * u_xlat4.x;
                u_xlat15.x = u_xlat36 * u_xlat3.x;
                u_xlat27.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat27.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat27.xy = fract(u_xlat27.xy);
                u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                u_xlat27.xy = floor(u_xlat27.xy);
                u_xlat4.x = (-u_xlat27.x) + u_xlat4.x;
                u_xlat27.x = u_xlat4.x * u_xlat27.y + u_xlat27.x;
                u_xlat39 = (-u_xlat3.x) * u_xlat36 + 1.0;
                u_xlat4.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat39) * u_xlat4.xyz + u_xlat27.xxx;
                u_xlatb15.xz = lessThan(u_xlat15.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat36 = u_xlat3.x * u_xlat36 + -4.0;
                u_xlat36 = exp2(u_xlat36);
                u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.zyy + u_xlat27.xxx;
                u_xlat3.xzw = (u_xlatb15.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb15.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb36 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb36 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb36){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat27.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat27.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat27.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat27.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat36);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat15.x = sqrt(u_xlat36);
                    u_xlat27.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat3.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat27.x * u_xlat15.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat25.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat3.x = (-u_xlat25.x) + u_xlat3.x;
                    u_xlat25.x = u_xlat3.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat3.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat37) * u_xlat3.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat36) * u_xlat3.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat2.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat37 = sqrt(u_xlat36);
                    u_xlat2.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat1.z);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat37 * u_xlat2.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat25.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat2.x = (-u_xlat25.x) + u_xlat2.x;
                    u_xlat25.x = u_xlat2.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat2.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat37) * u_xlat2.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_2.xy = texture(_Texture_1_Normal, u_xlat2.xy).xy;
            u_xlat16_2.xy = u_xlat10_2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_Texture_1_Normal_Power, _Texture_1_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.xx * u_xlat16_2.xy;
            u_xlat16_11.z = u_xlat0.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat16_11.xyz;
        } else {
            u_xlat16_2.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat2.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    } else {
        u_xlat2.x = float(0.0);
        u_xlat2.y = float(0.0);
        u_xlat2.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_2_Normal_Power, _Texture_2_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_3_Normal_Power, _Texture_3_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(_Texture_4_Normal_Power);
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb3.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat4.x = vs_TEXCOORD1.w;
            u_xlat4.y = vs_TEXCOORD3.w;
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.xx;
            u_xlat10_4.xy = texture(_Texture_5_Normal, u_xlat4.xy).xy;
            u_xlat16_4.xy = u_xlat10_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_Texture_5_Normal_Power, _Texture_5_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.xx * u_xlat16_4.xy;
            u_xlat16_11.z = u_xlat1.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.yy;
            u_xlat10_3.xy = texture(_Texture_6_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_6_Normal_Power, _Texture_6_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.yy * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.zz;
            u_xlat10_3.xy = texture(_Texture_7_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_7_Normal_Power, _Texture_7_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.zz * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.ww;
            u_xlat10_3.xy = texture(_Texture_8_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(_Texture_8_Normal_Power);
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.ww * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb38 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb38){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD2.w;
        u_xlat3.z = vs_TEXCOORD3.w;
        u_xlat4.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat38 = max(abs(u_xlat4.z), abs(u_xlat4.y));
        u_xlat38 = max(u_xlat38, abs(u_xlat4.x));
        u_xlat38 = u_xlat38 + (-_UV_Mix_Start_Distance);
        u_xlat38 = max(u_xlat38, 0.0);
        u_xlat38 = u_xlat38 / _UV_Mix_Range;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * _UV_Mix_Power;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = min(u_xlat38, 1.0);
        u_xlat16_4.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_4.w = _Texture_4_Perlin_Power;
        u_xlat16_10.x = dot(u_xlat16_4, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_22 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_10.x = u_xlat16_22 + u_xlat16_10.x;
        u_xlat1.xy = u_xlat3.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy).xy;
        u_xlat16_22 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_22 = u_xlat38 * u_xlat16_22 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_22) * u_xlat16_1.xy;
        u_xlat16_22 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_22 = min(u_xlat16_22, 1.0);
        u_xlat16_22 = (-u_xlat16_22) + 1.0;
        u_xlat16_22 = sqrt(u_xlat16_22);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_22 + -1.0;
        u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_11.xy = u_xlat2.xy + u_xlat16_10.xy;
        u_xlat16_11.z = u_xlat2.z * u_xlat16_10.z;
        u_xlat16_10.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
        u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
        u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_11.xyz;
        u_xlat2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
struct DebugView_PropsArray_Type {
	float _TerrainLODLevel;
};
layout(std140) uniform UnityInstancing_DebugView_Props {
	DebugView_PropsArray_Type DebugView_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec2 u_xlat10_2;
vec4 u_xlat3;
mediump vec2 u_xlat16_3;
lowp vec2 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec2 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
bvec2 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat15;
bvec3 u_xlatb15;
mediump float u_xlat16_22;
vec2 u_xlat24;
bvec2 u_xlatb24;
vec2 u_xlat25;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
vec2 u_xlat31;
vec2 u_xlat32;
float u_xlat36;
bool u_xlatb36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb12.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb12.x = u_xlatb12.y || u_xlatb12.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb12.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat27.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat2.yyyy, u_xlat27.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat27.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat27.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat32.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat32.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat27.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlatb24.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat31.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat31.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb24.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat24.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat5.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb24.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat30.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat30.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat6.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat32.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat32.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb24.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat3.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat8.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb24.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat24.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat24.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
        u_xlatb3 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel));
        u_xlatb0.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel)).xy;
        u_xlat4 = (u_xlatb0.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat0 = (u_xlatb0.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat0 = (u_xlatb3.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat0;
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat24.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat24.x = dot(u_xlat24.xy, u_xlat24.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat24.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat12.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat12.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat15.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat15.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat15.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat15.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat12.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat12.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat12.zx);
            u_xlat12.z = inversesqrt(u_xlat12.z);
            u_xlat12.x = inversesqrt(u_xlat12.x);
            u_xlat0.xz = u_xlat12.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat12.x = u_xlat3.y * u_xlat3.x;
            u_xlat24.x = u_xlat0.x * u_xlat12.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat36 = fract((-u_xlat3.x));
            u_xlat36 = u_xlat36 + 0.5;
            u_xlat36 = floor(u_xlat36);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat36 = u_xlat36 + (-u_xlat3.x);
            u_xlat36 = u_xlat36 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat12.x) * u_xlat0.x + 1.0;
            u_xlat15.xyz = (-vec3(u_xlat36)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat15.xyz + vec3(u_xlat36);
            u_xlatb3.xy = lessThan(u_xlat24.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat36) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat12.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat15.zyy + vec3(u_xlat36);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb36 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb36){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat36 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat36 = max(u_xlat36, u_xlat4.x);
                u_xlat36 = log2(u_xlat36);
                u_xlat36 = u_xlat36 * 0.5;
                u_xlat36 = max(u_xlat36, 0.0);
                u_xlat36 = u_xlat36 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat36);
                u_xlat36 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat15.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat39 = sqrt(u_xlat36);
                u_xlat4.x = sqrt(u_xlat15.x);
                u_xlat36 = inversesqrt(u_xlat36);
                u_xlat36 = u_xlat36 * abs(u_xlat3.z);
                u_xlat15.x = inversesqrt(u_xlat15.x);
                u_xlat3.x = u_xlat15.x * abs(u_xlat3.x);
                u_xlat36 = u_xlat36 * u_xlat3.x;
                u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                u_xlat36 = sqrt(u_xlat36);
                u_xlat3.x = u_xlat39 * u_xlat4.x;
                u_xlat15.x = u_xlat36 * u_xlat3.x;
                u_xlat27.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat27.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat27.xy = fract(u_xlat27.xy);
                u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                u_xlat27.xy = floor(u_xlat27.xy);
                u_xlat4.x = (-u_xlat27.x) + u_xlat4.x;
                u_xlat27.x = u_xlat4.x * u_xlat27.y + u_xlat27.x;
                u_xlat39 = (-u_xlat3.x) * u_xlat36 + 1.0;
                u_xlat4.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat39) * u_xlat4.xyz + u_xlat27.xxx;
                u_xlatb15.xz = lessThan(u_xlat15.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat36 = u_xlat3.x * u_xlat36 + -4.0;
                u_xlat36 = exp2(u_xlat36);
                u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.zyy + u_xlat27.xxx;
                u_xlat3.xzw = (u_xlatb15.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb15.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb36 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb36 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb36){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat27.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat27.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat27.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat27.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat36);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat15.x = sqrt(u_xlat36);
                    u_xlat27.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat3.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat27.x * u_xlat15.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat25.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat3.x = (-u_xlat25.x) + u_xlat3.x;
                    u_xlat25.x = u_xlat3.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat3.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat37) * u_xlat3.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat36) * u_xlat3.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat2.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat37 = sqrt(u_xlat36);
                    u_xlat2.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat1.z);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat37 * u_xlat2.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat25.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat2.x = (-u_xlat25.x) + u_xlat2.x;
                    u_xlat25.x = u_xlat2.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat2.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat37) * u_xlat2.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_2.xy = texture(_Texture_1_Normal, u_xlat2.xy).xy;
            u_xlat16_2.xy = u_xlat10_2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_Texture_1_Normal_Power, _Texture_1_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.xx * u_xlat16_2.xy;
            u_xlat16_11.z = u_xlat0.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat16_11.xyz;
        } else {
            u_xlat16_2.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat2.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    } else {
        u_xlat2.x = float(0.0);
        u_xlat2.y = float(0.0);
        u_xlat2.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_2_Normal_Power, _Texture_2_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_3_Normal_Power, _Texture_3_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(_Texture_4_Normal_Power);
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb3.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat4.x = vs_TEXCOORD1.w;
            u_xlat4.y = vs_TEXCOORD3.w;
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.xx;
            u_xlat10_4.xy = texture(_Texture_5_Normal, u_xlat4.xy).xy;
            u_xlat16_4.xy = u_xlat10_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_Texture_5_Normal_Power, _Texture_5_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.xx * u_xlat16_4.xy;
            u_xlat16_11.z = u_xlat1.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.yy;
            u_xlat10_3.xy = texture(_Texture_6_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_6_Normal_Power, _Texture_6_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.yy * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.zz;
            u_xlat10_3.xy = texture(_Texture_7_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_7_Normal_Power, _Texture_7_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.zz * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.ww;
            u_xlat10_3.xy = texture(_Texture_8_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(_Texture_8_Normal_Power);
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.ww * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb38 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb38){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD2.w;
        u_xlat3.z = vs_TEXCOORD3.w;
        u_xlat4.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat38 = max(abs(u_xlat4.z), abs(u_xlat4.y));
        u_xlat38 = max(u_xlat38, abs(u_xlat4.x));
        u_xlat38 = u_xlat38 + (-_UV_Mix_Start_Distance);
        u_xlat38 = max(u_xlat38, 0.0);
        u_xlat38 = u_xlat38 / _UV_Mix_Range;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * _UV_Mix_Power;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = min(u_xlat38, 1.0);
        u_xlat16_4.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_4.w = _Texture_4_Perlin_Power;
        u_xlat16_10.x = dot(u_xlat16_4, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_22 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_10.x = u_xlat16_22 + u_xlat16_10.x;
        u_xlat1.xy = u_xlat3.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy).xy;
        u_xlat16_22 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_22 = u_xlat38 * u_xlat16_22 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_22) * u_xlat16_1.xy;
        u_xlat16_22 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_22 = min(u_xlat16_22, 1.0);
        u_xlat16_22 = (-u_xlat16_22) + 1.0;
        u_xlat16_22 = sqrt(u_xlat16_22);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_22 + -1.0;
        u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_11.xy = u_xlat2.xy + u_xlat16_10.xy;
        u_xlat16_11.z = u_xlat2.z * u_xlat16_10.z;
        u_xlat16_10.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
        u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
        u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_11.xyz;
        u_xlat2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec2 u_xlat16_5;
lowp vec2 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_12;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_1_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_1_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.xx;
            u_xlat10_3.xy = texture(_Texture_1_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_2.xx * u_xlat16_3.xy;
            u_xlat16_2.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.xx * u_xlat16_3.xy;
            u_xlat16_4.z = u_xlat0.x * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat16_4.xyz;
        } else {
            u_xlat16_3.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat3.xyz = u_xlat16_3.xyz;
        //ENDIF
        }
    } else {
        u_xlat3.x = float(0.0);
        u_xlat3.y = float(0.0);
        u_xlat3.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_2_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_2_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.y * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_3_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_3_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.z * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_4_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_4_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.w * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb2 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb2.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_5_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_5_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.xx;
            u_xlat10_5.xy = texture(_Texture_5_Normal, u_xlat5.xy).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.xx * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.x * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_6_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_6_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.yy;
            u_xlat10_5.xy = texture(_Texture_6_Normal, u_xlat5.xy).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.yy * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.y * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_7_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_7_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
            u_xlat10_5.xy = texture(_Texture_7_Normal, u_xlat5.xy).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.zz * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.z * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_8_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_8_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.ww;
            u_xlat10_5.xy = texture(_Texture_8_Normal, u_xlat5.xy).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.ww * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.w * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb27 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb27){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD2.w;
        u_xlat5.z = vs_TEXCOORD3.w;
        u_xlat7.xyz = u_xlat5.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat27 = max(abs(u_xlat7.z), abs(u_xlat7.y));
        u_xlat27 = max(u_xlat27, abs(u_xlat7.x));
        u_xlat27 = u_xlat27 + (-_UV_Mix_Start_Distance);
        u_xlat27 = max(u_xlat27, 0.0);
        u_xlat27 = u_xlat27 / _UV_Mix_Range;
        u_xlat27 = log2(u_xlat27);
        u_xlat27 = u_xlat27 * _UV_Mix_Power;
        u_xlat27 = exp2(u_xlat27);
        u_xlat27 = min(u_xlat27, 1.0);
        u_xlat16_2.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_2.w = _Texture_4_Perlin_Power;
        u_xlat16_4.x = dot(u_xlat16_2, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_12 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_4.x = u_xlat16_12 + u_xlat16_4.x;
        u_xlat1.xy = u_xlat5.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy).xy;
        u_xlat16_12 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_12 = u_xlat27 * u_xlat16_12 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
        u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_12 = min(u_xlat16_12, 1.0);
        u_xlat16_12 = (-u_xlat16_12) + 1.0;
        u_xlat16_12 = sqrt(u_xlat16_12);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_12 + -1.0;
        u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_6.xy = u_xlat3.xy + u_xlat16_4.xy;
        u_xlat16_6.z = u_xlat3.z * u_xlat16_4.z;
        u_xlat16_4.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
        u_xlat16_3.xyz = u_xlat16_4.xxx * u_xlat16_6.xyz;
        u_xlat3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat5.xyz;
    SV_Target0.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec2 u_xlat16_5;
lowp vec2 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_12;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_1_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_1_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.xx;
            u_xlat10_3.xy = texture(_Texture_1_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_2.xx * u_xlat16_3.xy;
            u_xlat16_2.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.xx * u_xlat16_3.xy;
            u_xlat16_4.z = u_xlat0.x * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat16_4.xyz;
        } else {
            u_xlat16_3.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat3.xyz = u_xlat16_3.xyz;
        //ENDIF
        }
    } else {
        u_xlat3.x = float(0.0);
        u_xlat3.y = float(0.0);
        u_xlat3.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_2_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_2_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.y * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_3_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_3_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.z * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_4_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_4_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.w * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb2 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb2.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_5_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_5_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.xx;
            u_xlat10_5.xy = texture(_Texture_5_Normal, u_xlat5.xy).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.xx * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.x * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_6_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_6_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.yy;
            u_xlat10_5.xy = texture(_Texture_6_Normal, u_xlat5.xy).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.yy * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.y * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_7_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_7_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
            u_xlat10_5.xy = texture(_Texture_7_Normal, u_xlat5.xy).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.zz * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.z * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_8_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_8_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.ww;
            u_xlat10_5.xy = texture(_Texture_8_Normal, u_xlat5.xy).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.ww * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.w * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb27 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb27){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD2.w;
        u_xlat5.z = vs_TEXCOORD3.w;
        u_xlat7.xyz = u_xlat5.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat27 = max(abs(u_xlat7.z), abs(u_xlat7.y));
        u_xlat27 = max(u_xlat27, abs(u_xlat7.x));
        u_xlat27 = u_xlat27 + (-_UV_Mix_Start_Distance);
        u_xlat27 = max(u_xlat27, 0.0);
        u_xlat27 = u_xlat27 / _UV_Mix_Range;
        u_xlat27 = log2(u_xlat27);
        u_xlat27 = u_xlat27 * _UV_Mix_Power;
        u_xlat27 = exp2(u_xlat27);
        u_xlat27 = min(u_xlat27, 1.0);
        u_xlat16_2.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_2.w = _Texture_4_Perlin_Power;
        u_xlat16_4.x = dot(u_xlat16_2, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_12 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_4.x = u_xlat16_12 + u_xlat16_4.x;
        u_xlat1.xy = u_xlat5.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy).xy;
        u_xlat16_12 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_12 = u_xlat27 * u_xlat16_12 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
        u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_12 = min(u_xlat16_12, 1.0);
        u_xlat16_12 = (-u_xlat16_12) + 1.0;
        u_xlat16_12 = sqrt(u_xlat16_12);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_12 + -1.0;
        u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_6.xy = u_xlat3.xy + u_xlat16_4.xy;
        u_xlat16_6.z = u_xlat3.z * u_xlat16_4.z;
        u_xlat16_4.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
        u_xlat16_3.xyz = u_xlat16_4.xxx * u_xlat16_6.xyz;
        u_xlat3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat5.xyz;
    SV_Target0.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _TerrainLODLevel;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec2 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec2 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
bvec2 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat15;
bvec3 u_xlatb15;
mediump float u_xlat16_22;
vec2 u_xlat24;
bvec2 u_xlatb24;
vec2 u_xlat25;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
vec2 u_xlat31;
vec2 u_xlat32;
float u_xlat36;
bool u_xlatb36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
float u_xlat41;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb12.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb12.x = u_xlatb12.y || u_xlatb12.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb12.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat27.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat2.yyyy, u_xlat27.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat27.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat27.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat32.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat32.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat27.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlatb24.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat31.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat31.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb24.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat24.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat5.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb24.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat30.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat30.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat6.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat32.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat32.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb24.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat3.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat8.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb24.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat24.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat24.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel)));
        u_xlatb3.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel))).xy;
        u_xlat4 = (u_xlatb3.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat3 = (u_xlatb3.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat3 = (u_xlatb0.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat3;
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat24.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat24.x = dot(u_xlat24.xy, u_xlat24.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat24.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat12.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat12.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat15.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat15.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat15.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat15.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat12.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat12.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat12.zx);
            u_xlat12.z = inversesqrt(u_xlat12.z);
            u_xlat12.x = inversesqrt(u_xlat12.x);
            u_xlat0.xz = u_xlat12.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat12.x = u_xlat3.y * u_xlat3.x;
            u_xlat24.x = u_xlat0.x * u_xlat12.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat36 = fract((-u_xlat3.x));
            u_xlat36 = u_xlat36 + 0.5;
            u_xlat36 = floor(u_xlat36);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat36 = u_xlat36 + (-u_xlat3.x);
            u_xlat36 = u_xlat36 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat12.x) * u_xlat0.x + 1.0;
            u_xlat15.xyz = (-vec3(u_xlat36)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat15.xyz + vec3(u_xlat36);
            u_xlatb3.xy = lessThan(u_xlat24.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat36) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat12.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat15.zyy + vec3(u_xlat36);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb36 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb36){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat36 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat36 = max(u_xlat36, u_xlat4.x);
                u_xlat36 = log2(u_xlat36);
                u_xlat36 = u_xlat36 * 0.5;
                u_xlat36 = max(u_xlat36, 0.0);
                u_xlat36 = u_xlat36 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat36);
                u_xlat36 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat15.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat39 = sqrt(u_xlat36);
                u_xlat4.x = sqrt(u_xlat15.x);
                u_xlat36 = inversesqrt(u_xlat36);
                u_xlat36 = u_xlat36 * abs(u_xlat3.z);
                u_xlat15.x = inversesqrt(u_xlat15.x);
                u_xlat3.x = u_xlat15.x * abs(u_xlat3.x);
                u_xlat36 = u_xlat36 * u_xlat3.x;
                u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                u_xlat36 = sqrt(u_xlat36);
                u_xlat3.x = u_xlat39 * u_xlat4.x;
                u_xlat15.x = u_xlat36 * u_xlat3.x;
                u_xlat27.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat27.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat27.xy = fract(u_xlat27.xy);
                u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                u_xlat27.xy = floor(u_xlat27.xy);
                u_xlat4.x = (-u_xlat27.x) + u_xlat4.x;
                u_xlat27.x = u_xlat4.x * u_xlat27.y + u_xlat27.x;
                u_xlat39 = (-u_xlat3.x) * u_xlat36 + 1.0;
                u_xlat4.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat39) * u_xlat4.xyz + u_xlat27.xxx;
                u_xlatb15.xz = lessThan(u_xlat15.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat36 = u_xlat3.x * u_xlat36 + -4.0;
                u_xlat36 = exp2(u_xlat36);
                u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.zyy + u_xlat27.xxx;
                u_xlat3.xzw = (u_xlatb15.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb15.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb36 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb36 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb36){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat27.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat27.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat27.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat27.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat36);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat15.x = sqrt(u_xlat36);
                    u_xlat27.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat3.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat27.x * u_xlat15.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat25.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat3.x = (-u_xlat25.x) + u_xlat3.x;
                    u_xlat25.x = u_xlat3.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat3.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat37) * u_xlat3.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat36) * u_xlat3.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat2.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat37 = sqrt(u_xlat36);
                    u_xlat2.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat1.z);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat37 * u_xlat2.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat25.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat2.x = (-u_xlat25.x) + u_xlat2.x;
                    u_xlat25.x = u_xlat2.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat2.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat37) * u_xlat2.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_1_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_1_Normal_Power;
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_2.xy = texture(_Texture_1_Normal, u_xlat2.xy).xy;
            u_xlat16_2.xy = u_xlat10_2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_2.xy = u_xlat16_10.xx * u_xlat16_2.xy;
            u_xlat16_10.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.xx * u_xlat16_2.xy;
            u_xlat16_11.z = u_xlat0.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat16_11.xyz;
        } else {
            u_xlat16_2.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat2.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    } else {
        u_xlat2.x = float(0.0);
        u_xlat2.y = float(0.0);
        u_xlat2.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_2_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_2_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_3_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_3_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_4_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_4_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb3.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_5_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_5_Normal_Power;
            u_xlat4.x = vs_TEXCOORD1.w;
            u_xlat4.y = vs_TEXCOORD3.w;
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.xx;
            u_xlat10_4.xy = texture(_Texture_5_Normal, u_xlat4.xy).xy;
            u_xlat16_4.xy = u_xlat10_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_4.xy = u_xlat16_10.xx * u_xlat16_4.xy;
            u_xlat16_10.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.xx * u_xlat16_4.xy;
            u_xlat16_11.z = u_xlat1.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_6_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_6_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.yy;
            u_xlat10_3.xy = texture(_Texture_6_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.yy * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_7_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_7_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.zz;
            u_xlat10_3.xy = texture(_Texture_7_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.zz * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_8_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_8_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.ww;
            u_xlat10_3.xy = texture(_Texture_8_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.ww * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb38 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb38){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD2.w;
        u_xlat3.z = vs_TEXCOORD3.w;
        u_xlat4.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat38 = max(abs(u_xlat4.z), abs(u_xlat4.y));
        u_xlat38 = max(u_xlat38, abs(u_xlat4.x));
        u_xlat38 = u_xlat38 + (-_UV_Mix_Start_Distance);
        u_xlat38 = max(u_xlat38, 0.0);
        u_xlat38 = u_xlat38 / _UV_Mix_Range;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * _UV_Mix_Power;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = min(u_xlat38, 1.0);
        u_xlat16_4.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_4.w = _Texture_4_Perlin_Power;
        u_xlat16_10.x = dot(u_xlat16_4, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_22 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_10.x = u_xlat16_22 + u_xlat16_10.x;
        u_xlat3.xy = u_xlat3.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_3.xy = texture(_Perlin_Normal_Tex, u_xlat3.xy).xy;
        u_xlat16_22 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_22 = u_xlat38 * u_xlat16_22 + _Perlin_Normal_Power_Close;
        u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_3.xy;
        u_xlat16_22 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
        u_xlat16_22 = min(u_xlat16_22, 1.0);
        u_xlat16_22 = (-u_xlat16_22) + 1.0;
        u_xlat16_22 = sqrt(u_xlat16_22);
        u_xlat16_3.xy = u_xlat16_3.xy;
        u_xlat16_3.z = u_xlat16_22 + -1.0;
        u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_3.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_11.xy = u_xlat2.xy + u_xlat16_10.xy;
        u_xlat16_11.z = u_xlat2.z * u_xlat16_10.z;
        u_xlat16_10.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
        u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
        u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_11.xyz;
        u_xlat2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
    u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat5.xyz = vec3(u_xlat41) * u_xlat5.xyz;
    SV_Target0.xyz = u_xlat5.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
struct DebugView_PropsArray_Type {
	float _TerrainLODLevel;
};
layout(std140) uniform UnityInstancing_DebugView_Props {
	DebugView_PropsArray_Type DebugView_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec2 u_xlat10_2;
vec4 u_xlat3;
mediump vec2 u_xlat16_3;
lowp vec2 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec2 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
bvec2 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat15;
bvec3 u_xlatb15;
mediump float u_xlat16_22;
vec2 u_xlat24;
bvec2 u_xlatb24;
vec2 u_xlat25;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
vec2 u_xlat31;
vec2 u_xlat32;
float u_xlat36;
bool u_xlatb36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb12.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb12.x = u_xlatb12.y || u_xlatb12.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb12.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat27.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat2.yyyy, u_xlat27.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat27.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat27.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat32.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat32.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat27.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlatb24.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat31.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat31.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb24.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat24.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat5.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb24.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat30.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat30.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat6.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat32.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat32.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb24.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat3.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat8.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb24.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat24.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat24.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
        u_xlatb3 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel));
        u_xlatb0.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel)).xy;
        u_xlat4 = (u_xlatb0.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat0 = (u_xlatb0.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat0 = (u_xlatb3.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat0;
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat24.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat24.x = dot(u_xlat24.xy, u_xlat24.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat24.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat12.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat12.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat15.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat15.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat15.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat15.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat12.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat12.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat12.zx);
            u_xlat12.z = inversesqrt(u_xlat12.z);
            u_xlat12.x = inversesqrt(u_xlat12.x);
            u_xlat0.xz = u_xlat12.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat12.x = u_xlat3.y * u_xlat3.x;
            u_xlat24.x = u_xlat0.x * u_xlat12.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat36 = fract((-u_xlat3.x));
            u_xlat36 = u_xlat36 + 0.5;
            u_xlat36 = floor(u_xlat36);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat36 = u_xlat36 + (-u_xlat3.x);
            u_xlat36 = u_xlat36 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat12.x) * u_xlat0.x + 1.0;
            u_xlat15.xyz = (-vec3(u_xlat36)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat15.xyz + vec3(u_xlat36);
            u_xlatb3.xy = lessThan(u_xlat24.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat36) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat12.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat15.zyy + vec3(u_xlat36);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb36 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb36){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat36 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat36 = max(u_xlat36, u_xlat4.x);
                u_xlat36 = log2(u_xlat36);
                u_xlat36 = u_xlat36 * 0.5;
                u_xlat36 = max(u_xlat36, 0.0);
                u_xlat36 = u_xlat36 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat36);
                u_xlat36 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat15.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat39 = sqrt(u_xlat36);
                u_xlat4.x = sqrt(u_xlat15.x);
                u_xlat36 = inversesqrt(u_xlat36);
                u_xlat36 = u_xlat36 * abs(u_xlat3.z);
                u_xlat15.x = inversesqrt(u_xlat15.x);
                u_xlat3.x = u_xlat15.x * abs(u_xlat3.x);
                u_xlat36 = u_xlat36 * u_xlat3.x;
                u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                u_xlat36 = sqrt(u_xlat36);
                u_xlat3.x = u_xlat39 * u_xlat4.x;
                u_xlat15.x = u_xlat36 * u_xlat3.x;
                u_xlat27.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat27.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat27.xy = fract(u_xlat27.xy);
                u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                u_xlat27.xy = floor(u_xlat27.xy);
                u_xlat4.x = (-u_xlat27.x) + u_xlat4.x;
                u_xlat27.x = u_xlat4.x * u_xlat27.y + u_xlat27.x;
                u_xlat39 = (-u_xlat3.x) * u_xlat36 + 1.0;
                u_xlat4.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat39) * u_xlat4.xyz + u_xlat27.xxx;
                u_xlatb15.xz = lessThan(u_xlat15.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat36 = u_xlat3.x * u_xlat36 + -4.0;
                u_xlat36 = exp2(u_xlat36);
                u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.zyy + u_xlat27.xxx;
                u_xlat3.xzw = (u_xlatb15.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb15.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb36 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb36 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb36){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat27.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat27.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat27.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat27.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat36);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat15.x = sqrt(u_xlat36);
                    u_xlat27.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat3.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat27.x * u_xlat15.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat25.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat3.x = (-u_xlat25.x) + u_xlat3.x;
                    u_xlat25.x = u_xlat3.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat3.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat37) * u_xlat3.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat36) * u_xlat3.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat2.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat37 = sqrt(u_xlat36);
                    u_xlat2.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat1.z);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat37 * u_xlat2.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat25.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat2.x = (-u_xlat25.x) + u_xlat2.x;
                    u_xlat25.x = u_xlat2.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat2.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat37) * u_xlat2.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_1_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_1_Normal_Power;
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_2.xy = texture(_Texture_1_Normal, u_xlat2.xy).xy;
            u_xlat16_2.xy = u_xlat10_2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_2.xy = u_xlat16_10.xx * u_xlat16_2.xy;
            u_xlat16_10.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.xx * u_xlat16_2.xy;
            u_xlat16_11.z = u_xlat0.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat16_11.xyz;
        } else {
            u_xlat16_2.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat2.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    } else {
        u_xlat2.x = float(0.0);
        u_xlat2.y = float(0.0);
        u_xlat2.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_2_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_2_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_3_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_3_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_4_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_4_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb3.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_5_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_5_Normal_Power;
            u_xlat4.x = vs_TEXCOORD1.w;
            u_xlat4.y = vs_TEXCOORD3.w;
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.xx;
            u_xlat10_4.xy = texture(_Texture_5_Normal, u_xlat4.xy).xy;
            u_xlat16_4.xy = u_xlat10_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_4.xy = u_xlat16_10.xx * u_xlat16_4.xy;
            u_xlat16_10.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.xx * u_xlat16_4.xy;
            u_xlat16_11.z = u_xlat1.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_6_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_6_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.yy;
            u_xlat10_3.xy = texture(_Texture_6_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.yy * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_7_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_7_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.zz;
            u_xlat10_3.xy = texture(_Texture_7_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.zz * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_8_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_8_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.ww;
            u_xlat10_3.xy = texture(_Texture_8_Normal, u_xlat3.xy).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.ww * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb38 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb38){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD2.w;
        u_xlat3.z = vs_TEXCOORD3.w;
        u_xlat4.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat38 = max(abs(u_xlat4.z), abs(u_xlat4.y));
        u_xlat38 = max(u_xlat38, abs(u_xlat4.x));
        u_xlat38 = u_xlat38 + (-_UV_Mix_Start_Distance);
        u_xlat38 = max(u_xlat38, 0.0);
        u_xlat38 = u_xlat38 / _UV_Mix_Range;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * _UV_Mix_Power;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = min(u_xlat38, 1.0);
        u_xlat16_4.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_4.w = _Texture_4_Perlin_Power;
        u_xlat16_10.x = dot(u_xlat16_4, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_22 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_10.x = u_xlat16_22 + u_xlat16_10.x;
        u_xlat1.xy = u_xlat3.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy).xy;
        u_xlat16_22 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_22 = u_xlat38 * u_xlat16_22 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_22) * u_xlat16_1.xy;
        u_xlat16_22 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_22 = min(u_xlat16_22, 1.0);
        u_xlat16_22 = (-u_xlat16_22) + 1.0;
        u_xlat16_22 = sqrt(u_xlat16_22);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_22 + -1.0;
        u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_11.xy = u_xlat2.xy + u_xlat16_10.xy;
        u_xlat16_11.z = u_xlat2.z * u_xlat16_10.z;
        u_xlat16_10.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
        u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
        u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_11.xyz;
        u_xlat2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
mediump float u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec2 u_xlat16_7;
lowp vec2 u_xlat10_7;
vec3 u_xlat8;
mediump float u_xlat16_14;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_3.xy = texture(_Texture_1_Normal, u_xlat2.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_1_Normal_Power, _Texture_1_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_4 = sqrt(u_xlat16_4);
            u_xlat16_5.xy = u_xlat0.xx * u_xlat16_3.xy;
            u_xlat16_5.z = u_xlat0.x * u_xlat16_4;
            u_xlat3.xyz = u_xlat16_5.xyz;
        } else {
            u_xlat16_3.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat3.xyz = u_xlat16_3.xyz;
        //ENDIF
        }
    } else {
        u_xlat3.x = float(0.0);
        u_xlat3.y = float(0.0);
        u_xlat3.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_2_Normal_Power, _Texture_2_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_4 = sqrt(u_xlat16_4);
            u_xlat16_5.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_5.z = u_xlat0.y * u_xlat16_4;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_5.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_3_Normal_Power, _Texture_3_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_4);
            u_xlat16_6.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_6.z = u_xlat0.z * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(_Texture_4_Normal_Power);
            u_xlat16_5.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_6.z = u_xlat0.w * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb2 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb2.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.xx;
            u_xlat10_7.xy = texture(_Texture_5_Normal, u_xlat7.xy, -1.0).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_5_Normal_Power, _Texture_5_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.xx * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.x * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
            u_xlat10_7.xy = texture(_Texture_6_Normal, u_xlat7.xy, -1.0).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_6_Normal_Power, _Texture_6_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.yy * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.y * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.zz;
            u_xlat10_7.xy = texture(_Texture_7_Normal, u_xlat7.xy, -1.0).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_7_Normal_Power, _Texture_7_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.zz * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.z * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.ww;
            u_xlat10_7.xy = texture(_Texture_8_Normal, u_xlat7.xy, -1.0).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(_Texture_8_Normal_Power);
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.ww * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.w * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb30 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb30){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD2.w;
        u_xlat7.z = vs_TEXCOORD3.w;
        u_xlat8.xyz = u_xlat7.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat30 = max(abs(u_xlat8.z), abs(u_xlat8.y));
        u_xlat30 = max(u_xlat30, abs(u_xlat8.x));
        u_xlat30 = u_xlat30 + (-_UV_Mix_Start_Distance);
        u_xlat30 = max(u_xlat30, 0.0);
        u_xlat30 = u_xlat30 / _UV_Mix_Range;
        u_xlat30 = log2(u_xlat30);
        u_xlat30 = u_xlat30 * _UV_Mix_Power;
        u_xlat30 = exp2(u_xlat30);
        u_xlat30 = min(u_xlat30, 1.0);
        u_xlat16_2.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_2.w = _Texture_4_Perlin_Power;
        u_xlat16_5.x = dot(u_xlat16_2, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_14 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_5.x = u_xlat16_14 + u_xlat16_5.x;
        u_xlat1.xy = u_xlat7.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy, -1.0).xy;
        u_xlat16_14 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_14 = u_xlat30 * u_xlat16_14 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_14) * u_xlat16_1.xy;
        u_xlat16_14 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_14 = min(u_xlat16_14, 1.0);
        u_xlat16_14 = (-u_xlat16_14) + 1.0;
        u_xlat16_14 = sqrt(u_xlat16_14);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_14 + -1.0;
        u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_6.xy = u_xlat3.xy + u_xlat16_5.xy;
        u_xlat16_6.z = u_xlat3.z * u_xlat16_5.z;
        u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
        u_xlat16_3.xyz = u_xlat16_5.xxx * u_xlat16_6.xyz;
        u_xlat3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat7.xyz;
    SV_Target0.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
mediump float u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec2 u_xlat16_7;
lowp vec2 u_xlat10_7;
vec3 u_xlat8;
mediump float u_xlat16_14;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_3.xy = texture(_Texture_1_Normal, u_xlat2.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_1_Normal_Power, _Texture_1_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_4 = sqrt(u_xlat16_4);
            u_xlat16_5.xy = u_xlat0.xx * u_xlat16_3.xy;
            u_xlat16_5.z = u_xlat0.x * u_xlat16_4;
            u_xlat3.xyz = u_xlat16_5.xyz;
        } else {
            u_xlat16_3.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat3.xyz = u_xlat16_3.xyz;
        //ENDIF
        }
    } else {
        u_xlat3.x = float(0.0);
        u_xlat3.y = float(0.0);
        u_xlat3.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_2_Normal_Power, _Texture_2_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_4 = sqrt(u_xlat16_4);
            u_xlat16_5.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_5.z = u_xlat0.y * u_xlat16_4;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_5.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_3_Normal_Power, _Texture_3_Normal_Power));
            u_xlat16_4 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_4 = min(u_xlat16_4, 1.0);
            u_xlat16_4 = (-u_xlat16_4) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_4);
            u_xlat16_6.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_6.z = u_xlat0.z * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(_Texture_4_Normal_Power);
            u_xlat16_5.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_6.z = u_xlat0.w * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb2 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb2.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.xx;
            u_xlat10_7.xy = texture(_Texture_5_Normal, u_xlat7.xy, -1.0).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_5_Normal_Power, _Texture_5_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.xx * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.x * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.yy;
            u_xlat10_7.xy = texture(_Texture_6_Normal, u_xlat7.xy, -1.0).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_6_Normal_Power, _Texture_6_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.yy * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.y * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.zz;
            u_xlat10_7.xy = texture(_Texture_7_Normal, u_xlat7.xy, -1.0).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_Texture_7_Normal_Power, _Texture_7_Normal_Power));
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.zz * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.z * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb30 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb30){
            u_xlat7.x = vs_TEXCOORD1.w;
            u_xlat7.y = vs_TEXCOORD3.w;
            u_xlat7.xy = u_xlat7.xy * vs_TEXCOORD6.ww;
            u_xlat10_7.xy = texture(_Texture_8_Normal, u_xlat7.xy, -1.0).xy;
            u_xlat16_7.xy = u_xlat10_7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_7.xy = u_xlat16_7.xy * vec2(_Texture_8_Normal_Power);
            u_xlat16_5.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
            u_xlat16_5.x = min(u_xlat16_5.x, 1.0);
            u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
            u_xlat16_5.x = sqrt(u_xlat16_5.x);
            u_xlat16_6.xy = u_xlat1.ww * u_xlat16_7.xy;
            u_xlat16_6.z = u_xlat1.w * u_xlat16_5.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb30 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb30){
        u_xlat7.x = vs_TEXCOORD1.w;
        u_xlat7.y = vs_TEXCOORD2.w;
        u_xlat7.z = vs_TEXCOORD3.w;
        u_xlat8.xyz = u_xlat7.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat30 = max(abs(u_xlat8.z), abs(u_xlat8.y));
        u_xlat30 = max(u_xlat30, abs(u_xlat8.x));
        u_xlat30 = u_xlat30 + (-_UV_Mix_Start_Distance);
        u_xlat30 = max(u_xlat30, 0.0);
        u_xlat30 = u_xlat30 / _UV_Mix_Range;
        u_xlat30 = log2(u_xlat30);
        u_xlat30 = u_xlat30 * _UV_Mix_Power;
        u_xlat30 = exp2(u_xlat30);
        u_xlat30 = min(u_xlat30, 1.0);
        u_xlat16_2.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_2.w = _Texture_4_Perlin_Power;
        u_xlat16_5.x = dot(u_xlat16_2, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_14 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_5.x = u_xlat16_14 + u_xlat16_5.x;
        u_xlat1.xy = u_xlat7.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy, -1.0).xy;
        u_xlat16_14 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_14 = u_xlat30 * u_xlat16_14 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_14) * u_xlat16_1.xy;
        u_xlat16_14 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_14 = min(u_xlat16_14, 1.0);
        u_xlat16_14 = (-u_xlat16_14) + 1.0;
        u_xlat16_14 = sqrt(u_xlat16_14);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_14 + -1.0;
        u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_6.xy = u_xlat3.xy + u_xlat16_5.xy;
        u_xlat16_6.z = u_xlat3.z * u_xlat16_5.z;
        u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
        u_xlat16_3.xyz = u_xlat16_5.xxx * u_xlat16_6.xyz;
        u_xlat3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    u_xlat7.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat7.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat7.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat7.xyz;
    SV_Target0.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _TerrainLODLevel;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec2 u_xlat10_2;
vec4 u_xlat3;
mediump vec2 u_xlat16_3;
lowp vec2 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec2 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
bvec2 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat15;
bvec3 u_xlatb15;
mediump float u_xlat16_22;
vec2 u_xlat24;
bvec2 u_xlatb24;
vec2 u_xlat25;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
vec2 u_xlat31;
vec2 u_xlat32;
float u_xlat36;
bool u_xlatb36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb12.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb12.x = u_xlatb12.y || u_xlatb12.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb12.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat27.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat2.yyyy, u_xlat27.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat27.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat27.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat32.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat32.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat27.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlatb24.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat31.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat31.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb24.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat24.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat5.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb24.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat30.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat30.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat6.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat32.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat32.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb24.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat3.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat8.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb24.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat24.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat24.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel)));
        u_xlatb3.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel))).xy;
        u_xlat4 = (u_xlatb3.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat3 = (u_xlatb3.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat3 = (u_xlatb0.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat3;
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat24.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat24.x = dot(u_xlat24.xy, u_xlat24.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat24.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat12.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat12.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat15.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat15.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat15.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat15.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat12.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat12.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat12.zx);
            u_xlat12.z = inversesqrt(u_xlat12.z);
            u_xlat12.x = inversesqrt(u_xlat12.x);
            u_xlat0.xz = u_xlat12.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat12.x = u_xlat3.y * u_xlat3.x;
            u_xlat24.x = u_xlat0.x * u_xlat12.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat36 = fract((-u_xlat3.x));
            u_xlat36 = u_xlat36 + 0.5;
            u_xlat36 = floor(u_xlat36);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat36 = u_xlat36 + (-u_xlat3.x);
            u_xlat36 = u_xlat36 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat12.x) * u_xlat0.x + 1.0;
            u_xlat15.xyz = (-vec3(u_xlat36)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat15.xyz + vec3(u_xlat36);
            u_xlatb3.xy = lessThan(u_xlat24.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat36) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat12.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat15.zyy + vec3(u_xlat36);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb36 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb36){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat36 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat36 = max(u_xlat36, u_xlat4.x);
                u_xlat36 = log2(u_xlat36);
                u_xlat36 = u_xlat36 * 0.5;
                u_xlat36 = max(u_xlat36, 0.0);
                u_xlat36 = u_xlat36 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat36);
                u_xlat36 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat15.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat39 = sqrt(u_xlat36);
                u_xlat4.x = sqrt(u_xlat15.x);
                u_xlat36 = inversesqrt(u_xlat36);
                u_xlat36 = u_xlat36 * abs(u_xlat3.z);
                u_xlat15.x = inversesqrt(u_xlat15.x);
                u_xlat3.x = u_xlat15.x * abs(u_xlat3.x);
                u_xlat36 = u_xlat36 * u_xlat3.x;
                u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                u_xlat36 = sqrt(u_xlat36);
                u_xlat3.x = u_xlat39 * u_xlat4.x;
                u_xlat15.x = u_xlat36 * u_xlat3.x;
                u_xlat27.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat27.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat27.xy = fract(u_xlat27.xy);
                u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                u_xlat27.xy = floor(u_xlat27.xy);
                u_xlat4.x = (-u_xlat27.x) + u_xlat4.x;
                u_xlat27.x = u_xlat4.x * u_xlat27.y + u_xlat27.x;
                u_xlat39 = (-u_xlat3.x) * u_xlat36 + 1.0;
                u_xlat4.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat39) * u_xlat4.xyz + u_xlat27.xxx;
                u_xlatb15.xz = lessThan(u_xlat15.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat36 = u_xlat3.x * u_xlat36 + -4.0;
                u_xlat36 = exp2(u_xlat36);
                u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.zyy + u_xlat27.xxx;
                u_xlat3.xzw = (u_xlatb15.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb15.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb36 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb36 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb36){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat27.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat27.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat27.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat27.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat36);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat15.x = sqrt(u_xlat36);
                    u_xlat27.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat3.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat27.x * u_xlat15.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat25.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat3.x = (-u_xlat25.x) + u_xlat3.x;
                    u_xlat25.x = u_xlat3.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat3.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat37) * u_xlat3.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat36) * u_xlat3.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat2.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat37 = sqrt(u_xlat36);
                    u_xlat2.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat1.z);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat37 * u_xlat2.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat25.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat2.x = (-u_xlat25.x) + u_xlat2.x;
                    u_xlat25.x = u_xlat2.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat2.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat37) * u_xlat2.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_2.xy = texture(_Texture_1_Normal, u_xlat2.xy, -1.0).xy;
            u_xlat16_2.xy = u_xlat10_2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_Texture_1_Normal_Power, _Texture_1_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.xx * u_xlat16_2.xy;
            u_xlat16_11.z = u_xlat0.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat16_11.xyz;
        } else {
            u_xlat16_2.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat2.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    } else {
        u_xlat2.x = float(0.0);
        u_xlat2.y = float(0.0);
        u_xlat2.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_2_Normal_Power, _Texture_2_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_3_Normal_Power, _Texture_3_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(_Texture_4_Normal_Power);
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb3.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat4.x = vs_TEXCOORD1.w;
            u_xlat4.y = vs_TEXCOORD3.w;
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.xx;
            u_xlat10_4.xy = texture(_Texture_5_Normal, u_xlat4.xy, -1.0).xy;
            u_xlat16_4.xy = u_xlat10_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_Texture_5_Normal_Power, _Texture_5_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.xx * u_xlat16_4.xy;
            u_xlat16_11.z = u_xlat1.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.yy;
            u_xlat10_3.xy = texture(_Texture_6_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_6_Normal_Power, _Texture_6_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.yy * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.zz;
            u_xlat10_3.xy = texture(_Texture_7_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_7_Normal_Power, _Texture_7_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.zz * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.ww;
            u_xlat10_3.xy = texture(_Texture_8_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(_Texture_8_Normal_Power);
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.ww * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb38 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb38){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD2.w;
        u_xlat3.z = vs_TEXCOORD3.w;
        u_xlat4.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat38 = max(abs(u_xlat4.z), abs(u_xlat4.y));
        u_xlat38 = max(u_xlat38, abs(u_xlat4.x));
        u_xlat38 = u_xlat38 + (-_UV_Mix_Start_Distance);
        u_xlat38 = max(u_xlat38, 0.0);
        u_xlat38 = u_xlat38 / _UV_Mix_Range;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * _UV_Mix_Power;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = min(u_xlat38, 1.0);
        u_xlat16_4.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_4.w = _Texture_4_Perlin_Power;
        u_xlat16_10.x = dot(u_xlat16_4, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_22 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_10.x = u_xlat16_22 + u_xlat16_10.x;
        u_xlat1.xy = u_xlat3.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy, -1.0).xy;
        u_xlat16_22 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_22 = u_xlat38 * u_xlat16_22 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_22) * u_xlat16_1.xy;
        u_xlat16_22 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_22 = min(u_xlat16_22, 1.0);
        u_xlat16_22 = (-u_xlat16_22) + 1.0;
        u_xlat16_22 = sqrt(u_xlat16_22);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_22 + -1.0;
        u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_11.xy = u_xlat2.xy + u_xlat16_10.xy;
        u_xlat16_11.z = u_xlat2.z * u_xlat16_10.z;
        u_xlat16_10.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
        u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
        u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_11.xyz;
        u_xlat2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
struct DebugView_PropsArray_Type {
	float _TerrainLODLevel;
};
layout(std140) uniform UnityInstancing_DebugView_Props {
	DebugView_PropsArray_Type DebugView_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec2 u_xlat10_2;
vec4 u_xlat3;
mediump vec2 u_xlat16_3;
lowp vec2 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec2 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
bvec2 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat15;
bvec3 u_xlatb15;
mediump float u_xlat16_22;
vec2 u_xlat24;
bvec2 u_xlatb24;
vec2 u_xlat25;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
vec2 u_xlat31;
vec2 u_xlat32;
float u_xlat36;
bool u_xlatb36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb12.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb12.x = u_xlatb12.y || u_xlatb12.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb12.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat27.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat2.yyyy, u_xlat27.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat27.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat27.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat32.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat32.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat27.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlatb24.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat31.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat31.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb24.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat24.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat5.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb24.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat30.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat30.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat6.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat32.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat32.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb24.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat3.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat8.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb24.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat24.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat24.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
        u_xlatb3 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel));
        u_xlatb0.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel)).xy;
        u_xlat4 = (u_xlatb0.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat0 = (u_xlatb0.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat0 = (u_xlatb3.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat0;
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat24.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat24.x = dot(u_xlat24.xy, u_xlat24.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat24.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat12.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat12.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat15.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat15.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat15.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat15.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat12.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat12.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat12.zx);
            u_xlat12.z = inversesqrt(u_xlat12.z);
            u_xlat12.x = inversesqrt(u_xlat12.x);
            u_xlat0.xz = u_xlat12.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat12.x = u_xlat3.y * u_xlat3.x;
            u_xlat24.x = u_xlat0.x * u_xlat12.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat36 = fract((-u_xlat3.x));
            u_xlat36 = u_xlat36 + 0.5;
            u_xlat36 = floor(u_xlat36);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat36 = u_xlat36 + (-u_xlat3.x);
            u_xlat36 = u_xlat36 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat12.x) * u_xlat0.x + 1.0;
            u_xlat15.xyz = (-vec3(u_xlat36)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat15.xyz + vec3(u_xlat36);
            u_xlatb3.xy = lessThan(u_xlat24.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat36) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat12.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat15.zyy + vec3(u_xlat36);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb36 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb36){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat36 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat36 = max(u_xlat36, u_xlat4.x);
                u_xlat36 = log2(u_xlat36);
                u_xlat36 = u_xlat36 * 0.5;
                u_xlat36 = max(u_xlat36, 0.0);
                u_xlat36 = u_xlat36 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat36);
                u_xlat36 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat15.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat39 = sqrt(u_xlat36);
                u_xlat4.x = sqrt(u_xlat15.x);
                u_xlat36 = inversesqrt(u_xlat36);
                u_xlat36 = u_xlat36 * abs(u_xlat3.z);
                u_xlat15.x = inversesqrt(u_xlat15.x);
                u_xlat3.x = u_xlat15.x * abs(u_xlat3.x);
                u_xlat36 = u_xlat36 * u_xlat3.x;
                u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                u_xlat36 = sqrt(u_xlat36);
                u_xlat3.x = u_xlat39 * u_xlat4.x;
                u_xlat15.x = u_xlat36 * u_xlat3.x;
                u_xlat27.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat27.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat27.xy = fract(u_xlat27.xy);
                u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                u_xlat27.xy = floor(u_xlat27.xy);
                u_xlat4.x = (-u_xlat27.x) + u_xlat4.x;
                u_xlat27.x = u_xlat4.x * u_xlat27.y + u_xlat27.x;
                u_xlat39 = (-u_xlat3.x) * u_xlat36 + 1.0;
                u_xlat4.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat39) * u_xlat4.xyz + u_xlat27.xxx;
                u_xlatb15.xz = lessThan(u_xlat15.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat36 = u_xlat3.x * u_xlat36 + -4.0;
                u_xlat36 = exp2(u_xlat36);
                u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.zyy + u_xlat27.xxx;
                u_xlat3.xzw = (u_xlatb15.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb15.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb36 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb36 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb36){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat27.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat27.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat27.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat27.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat36);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat15.x = sqrt(u_xlat36);
                    u_xlat27.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat3.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat27.x * u_xlat15.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat25.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat3.x = (-u_xlat25.x) + u_xlat3.x;
                    u_xlat25.x = u_xlat3.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat3.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat37) * u_xlat3.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat36) * u_xlat3.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat2.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat37 = sqrt(u_xlat36);
                    u_xlat2.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat1.z);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat37 * u_xlat2.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat25.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat2.x = (-u_xlat25.x) + u_xlat2.x;
                    u_xlat25.x = u_xlat2.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat2.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat37) * u_xlat2.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_2.xy = texture(_Texture_1_Normal, u_xlat2.xy, -1.0).xy;
            u_xlat16_2.xy = u_xlat10_2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_Texture_1_Normal_Power, _Texture_1_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.xx * u_xlat16_2.xy;
            u_xlat16_11.z = u_xlat0.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat16_11.xyz;
        } else {
            u_xlat16_2.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat2.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    } else {
        u_xlat2.x = float(0.0);
        u_xlat2.y = float(0.0);
        u_xlat2.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_2_Normal_Power, _Texture_2_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_Texture_3_Normal_Power, _Texture_3_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_1.xy * vec2(_Texture_4_Normal_Power);
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb3.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat4.x = vs_TEXCOORD1.w;
            u_xlat4.y = vs_TEXCOORD3.w;
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.xx;
            u_xlat10_4.xy = texture(_Texture_5_Normal, u_xlat4.xy, -1.0).xy;
            u_xlat16_4.xy = u_xlat10_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_Texture_5_Normal_Power, _Texture_5_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.xx * u_xlat16_4.xy;
            u_xlat16_11.z = u_xlat1.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.yy;
            u_xlat10_3.xy = texture(_Texture_6_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_6_Normal_Power, _Texture_6_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.yy * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.zz;
            u_xlat10_3.xy = texture(_Texture_7_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_Texture_7_Normal_Power, _Texture_7_Normal_Power));
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.zz * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.ww;
            u_xlat10_3.xy = texture(_Texture_8_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_3.xy * vec2(_Texture_8_Normal_Power);
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.ww * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb38 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb38){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD2.w;
        u_xlat3.z = vs_TEXCOORD3.w;
        u_xlat4.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat38 = max(abs(u_xlat4.z), abs(u_xlat4.y));
        u_xlat38 = max(u_xlat38, abs(u_xlat4.x));
        u_xlat38 = u_xlat38 + (-_UV_Mix_Start_Distance);
        u_xlat38 = max(u_xlat38, 0.0);
        u_xlat38 = u_xlat38 / _UV_Mix_Range;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * _UV_Mix_Power;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = min(u_xlat38, 1.0);
        u_xlat16_4.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_4.w = _Texture_4_Perlin_Power;
        u_xlat16_10.x = dot(u_xlat16_4, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_22 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_10.x = u_xlat16_22 + u_xlat16_10.x;
        u_xlat1.xy = u_xlat3.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy, -1.0).xy;
        u_xlat16_22 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_22 = u_xlat38 * u_xlat16_22 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_22) * u_xlat16_1.xy;
        u_xlat16_22 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_22 = min(u_xlat16_22, 1.0);
        u_xlat16_22 = (-u_xlat16_22) + 1.0;
        u_xlat16_22 = sqrt(u_xlat16_22);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_22 + -1.0;
        u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_11.xy = u_xlat2.xy + u_xlat16_10.xy;
        u_xlat16_11.z = u_xlat2.z * u_xlat16_10.z;
        u_xlat16_10.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
        u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
        u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_11.xyz;
        u_xlat2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec2 u_xlat16_5;
lowp vec2 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_12;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_1_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_1_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.xx;
            u_xlat10_3.xy = texture(_Texture_1_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_2.xx * u_xlat16_3.xy;
            u_xlat16_2.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.xx * u_xlat16_3.xy;
            u_xlat16_4.z = u_xlat0.x * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat16_4.xyz;
        } else {
            u_xlat16_3.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat3.xyz = u_xlat16_3.xyz;
        //ENDIF
        }
    } else {
        u_xlat3.x = float(0.0);
        u_xlat3.y = float(0.0);
        u_xlat3.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_2_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_2_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.y * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_3_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_3_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.z * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_4_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_4_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.w * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb2 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb2.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_5_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_5_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.xx;
            u_xlat10_5.xy = texture(_Texture_5_Normal, u_xlat5.xy, -1.0).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.xx * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.x * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_6_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_6_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.yy;
            u_xlat10_5.xy = texture(_Texture_6_Normal, u_xlat5.xy, -1.0).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.yy * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.y * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_7_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_7_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
            u_xlat10_5.xy = texture(_Texture_7_Normal, u_xlat5.xy, -1.0).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.zz * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.z * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_8_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_8_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.ww;
            u_xlat10_5.xy = texture(_Texture_8_Normal, u_xlat5.xy, -1.0).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.ww * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.w * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb27 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb27){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD2.w;
        u_xlat5.z = vs_TEXCOORD3.w;
        u_xlat7.xyz = u_xlat5.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat27 = max(abs(u_xlat7.z), abs(u_xlat7.y));
        u_xlat27 = max(u_xlat27, abs(u_xlat7.x));
        u_xlat27 = u_xlat27 + (-_UV_Mix_Start_Distance);
        u_xlat27 = max(u_xlat27, 0.0);
        u_xlat27 = u_xlat27 / _UV_Mix_Range;
        u_xlat27 = log2(u_xlat27);
        u_xlat27 = u_xlat27 * _UV_Mix_Power;
        u_xlat27 = exp2(u_xlat27);
        u_xlat27 = min(u_xlat27, 1.0);
        u_xlat16_2.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_2.w = _Texture_4_Perlin_Power;
        u_xlat16_4.x = dot(u_xlat16_2, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_12 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_4.x = u_xlat16_12 + u_xlat16_4.x;
        u_xlat1.xy = u_xlat5.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy, -1.0).xy;
        u_xlat16_12 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_12 = u_xlat27 * u_xlat16_12 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
        u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_12 = min(u_xlat16_12, 1.0);
        u_xlat16_12 = (-u_xlat16_12) + 1.0;
        u_xlat16_12 = sqrt(u_xlat16_12);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_12 + -1.0;
        u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_6.xy = u_xlat3.xy + u_xlat16_4.xy;
        u_xlat16_6.z = u_xlat3.z * u_xlat16_4.z;
        u_xlat16_4.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
        u_xlat16_3.xyz = u_xlat16_4.xxx * u_xlat16_6.xyz;
        u_xlat3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat5.xyz;
    SV_Target0.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec2 u_xlat16_5;
lowp vec2 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_12;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_1_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_1_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD5.xx;
            u_xlat10_3.xy = texture(_Texture_1_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_2.xx * u_xlat16_3.xy;
            u_xlat16_2.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.xx * u_xlat16_3.xy;
            u_xlat16_4.z = u_xlat0.x * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat16_4.xyz;
        } else {
            u_xlat16_3.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat3.xyz = u_xlat16_3.xyz;
        //ENDIF
        }
    } else {
        u_xlat3.x = float(0.0);
        u_xlat3.y = float(0.0);
        u_xlat3.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_2_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_2_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.y * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_3_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_3_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.z * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_2.x = _Texture_4_RainParams.x + -1.0;
            u_xlat16_2.x = _mhyRainNoiseParam1.z * u_xlat16_2.x + 1.0;
            u_xlat16_2.x = u_xlat16_2.x * _Texture_4_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_2.xx * u_xlat16_1.xy;
            u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
            u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
            u_xlat16_2.x = sqrt(u_xlat16_2.x);
            u_xlat16_4.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_4.z = u_xlat0.w * u_xlat16_2.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_4.xyz;
        } else {
            u_xlat3.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb2 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb2.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_5_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_5_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.xx;
            u_xlat10_5.xy = texture(_Texture_5_Normal, u_xlat5.xy, -1.0).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.xx * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.x * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_6_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_6_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.yy;
            u_xlat10_5.xy = texture(_Texture_6_Normal, u_xlat5.xy, -1.0).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.yy * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.y * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_7_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_7_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.zz;
            u_xlat10_5.xy = texture(_Texture_7_Normal, u_xlat5.xy, -1.0).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.zz * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.z * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb27 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb27){
            u_xlat16_4.x = _Texture_8_RainParams.x + -1.0;
            u_xlat16_4.x = _mhyRainNoiseParam1.z * u_xlat16_4.x + 1.0;
            u_xlat16_4.x = u_xlat16_4.x * _Texture_8_Normal_Power;
            u_xlat5.x = vs_TEXCOORD1.w;
            u_xlat5.y = vs_TEXCOORD3.w;
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD6.ww;
            u_xlat10_5.xy = texture(_Texture_8_Normal, u_xlat5.xy, -1.0).xy;
            u_xlat16_5.xy = u_xlat10_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_5.xy = u_xlat16_4.xx * u_xlat16_5.xy;
            u_xlat16_4.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
            u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
            u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
            u_xlat16_4.x = sqrt(u_xlat16_4.x);
            u_xlat16_6.xy = u_xlat1.ww * u_xlat16_5.xy;
            u_xlat16_6.z = u_xlat1.w * u_xlat16_4.x;
            u_xlat3.xyz = u_xlat3.xyz + u_xlat16_6.xyz;
        } else {
            u_xlat3.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb27 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb27){
        u_xlat5.x = vs_TEXCOORD1.w;
        u_xlat5.y = vs_TEXCOORD2.w;
        u_xlat5.z = vs_TEXCOORD3.w;
        u_xlat7.xyz = u_xlat5.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat27 = max(abs(u_xlat7.z), abs(u_xlat7.y));
        u_xlat27 = max(u_xlat27, abs(u_xlat7.x));
        u_xlat27 = u_xlat27 + (-_UV_Mix_Start_Distance);
        u_xlat27 = max(u_xlat27, 0.0);
        u_xlat27 = u_xlat27 / _UV_Mix_Range;
        u_xlat27 = log2(u_xlat27);
        u_xlat27 = u_xlat27 * _UV_Mix_Power;
        u_xlat27 = exp2(u_xlat27);
        u_xlat27 = min(u_xlat27, 1.0);
        u_xlat16_2.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_2.w = _Texture_4_Perlin_Power;
        u_xlat16_4.x = dot(u_xlat16_2, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_12 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_4.x = u_xlat16_12 + u_xlat16_4.x;
        u_xlat1.xy = u_xlat5.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy, -1.0).xy;
        u_xlat16_12 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_12 = u_xlat27 * u_xlat16_12 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
        u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_12 = min(u_xlat16_12, 1.0);
        u_xlat16_12 = (-u_xlat16_12) + 1.0;
        u_xlat16_12 = sqrt(u_xlat16_12);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_12 + -1.0;
        u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_6.xy = u_xlat3.xy + u_xlat16_4.xy;
        u_xlat16_6.z = u_xlat3.z * u_xlat16_4.z;
        u_xlat16_4.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
        u_xlat16_3.xyz = u_xlat16_4.xxx * u_xlat16_6.xyz;
        u_xlat3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat5.xyz;
    SV_Target0.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat12.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat12.x / _BlockParam1.z, u_xlat12.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _TerrainLODLevel;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec2 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec2 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
bvec2 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat15;
bvec3 u_xlatb15;
mediump float u_xlat16_22;
vec2 u_xlat24;
bvec2 u_xlatb24;
vec2 u_xlat25;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
vec2 u_xlat31;
vec2 u_xlat32;
float u_xlat36;
bool u_xlatb36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
float u_xlat41;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb12.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb12.x = u_xlatb12.y || u_xlatb12.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb12.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat27.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat2.yyyy, u_xlat27.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat27.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat27.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat32.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat32.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat27.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlatb24.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat31.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat31.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb24.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat24.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat5.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb24.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat30.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat30.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat6.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat32.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat32.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb24.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat3.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat8.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb24.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat24.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat24.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel)));
        u_xlatb3.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(vec4(_TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel, _TerrainLODLevel))).xy;
        u_xlat4 = (u_xlatb3.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat3 = (u_xlatb3.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat3 = (u_xlatb0.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat3 = (u_xlatb0.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat3;
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat24.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat24.x = dot(u_xlat24.xy, u_xlat24.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat24.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat12.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat12.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat15.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat15.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat15.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat15.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat12.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat12.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat12.zx);
            u_xlat12.z = inversesqrt(u_xlat12.z);
            u_xlat12.x = inversesqrt(u_xlat12.x);
            u_xlat0.xz = u_xlat12.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat12.x = u_xlat3.y * u_xlat3.x;
            u_xlat24.x = u_xlat0.x * u_xlat12.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat36 = fract((-u_xlat3.x));
            u_xlat36 = u_xlat36 + 0.5;
            u_xlat36 = floor(u_xlat36);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat36 = u_xlat36 + (-u_xlat3.x);
            u_xlat36 = u_xlat36 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat12.x) * u_xlat0.x + 1.0;
            u_xlat15.xyz = (-vec3(u_xlat36)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat15.xyz + vec3(u_xlat36);
            u_xlatb3.xy = lessThan(u_xlat24.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat36) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat12.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat15.zyy + vec3(u_xlat36);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb36 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb36){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat36 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat36 = max(u_xlat36, u_xlat4.x);
                u_xlat36 = log2(u_xlat36);
                u_xlat36 = u_xlat36 * 0.5;
                u_xlat36 = max(u_xlat36, 0.0);
                u_xlat36 = u_xlat36 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat36);
                u_xlat36 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat15.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat39 = sqrt(u_xlat36);
                u_xlat4.x = sqrt(u_xlat15.x);
                u_xlat36 = inversesqrt(u_xlat36);
                u_xlat36 = u_xlat36 * abs(u_xlat3.z);
                u_xlat15.x = inversesqrt(u_xlat15.x);
                u_xlat3.x = u_xlat15.x * abs(u_xlat3.x);
                u_xlat36 = u_xlat36 * u_xlat3.x;
                u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                u_xlat36 = sqrt(u_xlat36);
                u_xlat3.x = u_xlat39 * u_xlat4.x;
                u_xlat15.x = u_xlat36 * u_xlat3.x;
                u_xlat27.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat27.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat27.xy = fract(u_xlat27.xy);
                u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                u_xlat27.xy = floor(u_xlat27.xy);
                u_xlat4.x = (-u_xlat27.x) + u_xlat4.x;
                u_xlat27.x = u_xlat4.x * u_xlat27.y + u_xlat27.x;
                u_xlat39 = (-u_xlat3.x) * u_xlat36 + 1.0;
                u_xlat4.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat39) * u_xlat4.xyz + u_xlat27.xxx;
                u_xlatb15.xz = lessThan(u_xlat15.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat36 = u_xlat3.x * u_xlat36 + -4.0;
                u_xlat36 = exp2(u_xlat36);
                u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.zyy + u_xlat27.xxx;
                u_xlat3.xzw = (u_xlatb15.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb15.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb36 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb36 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb36){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat27.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat27.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat27.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat27.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat36);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat15.x = sqrt(u_xlat36);
                    u_xlat27.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat3.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat27.x * u_xlat15.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat25.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat3.x = (-u_xlat25.x) + u_xlat3.x;
                    u_xlat25.x = u_xlat3.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat3.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat37) * u_xlat3.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat36) * u_xlat3.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat2.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat37 = sqrt(u_xlat36);
                    u_xlat2.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat1.z);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat37 * u_xlat2.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat25.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat2.x = (-u_xlat25.x) + u_xlat2.x;
                    u_xlat25.x = u_xlat2.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat2.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat37) * u_xlat2.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_1_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_1_Normal_Power;
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_2.xy = texture(_Texture_1_Normal, u_xlat2.xy, -1.0).xy;
            u_xlat16_2.xy = u_xlat10_2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_2.xy = u_xlat16_10.xx * u_xlat16_2.xy;
            u_xlat16_10.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.xx * u_xlat16_2.xy;
            u_xlat16_11.z = u_xlat0.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat16_11.xyz;
        } else {
            u_xlat16_2.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat2.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    } else {
        u_xlat2.x = float(0.0);
        u_xlat2.y = float(0.0);
        u_xlat2.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_2_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_2_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_3_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_3_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_4_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_4_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb3.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_5_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_5_Normal_Power;
            u_xlat4.x = vs_TEXCOORD1.w;
            u_xlat4.y = vs_TEXCOORD3.w;
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.xx;
            u_xlat10_4.xy = texture(_Texture_5_Normal, u_xlat4.xy, -1.0).xy;
            u_xlat16_4.xy = u_xlat10_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_4.xy = u_xlat16_10.xx * u_xlat16_4.xy;
            u_xlat16_10.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.xx * u_xlat16_4.xy;
            u_xlat16_11.z = u_xlat1.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_6_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_6_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.yy;
            u_xlat10_3.xy = texture(_Texture_6_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.yy * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_7_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_7_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.zz;
            u_xlat10_3.xy = texture(_Texture_7_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.zz * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_8_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_8_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.ww;
            u_xlat10_3.xy = texture(_Texture_8_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.ww * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb38 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb38){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD2.w;
        u_xlat3.z = vs_TEXCOORD3.w;
        u_xlat4.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat38 = max(abs(u_xlat4.z), abs(u_xlat4.y));
        u_xlat38 = max(u_xlat38, abs(u_xlat4.x));
        u_xlat38 = u_xlat38 + (-_UV_Mix_Start_Distance);
        u_xlat38 = max(u_xlat38, 0.0);
        u_xlat38 = u_xlat38 / _UV_Mix_Range;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * _UV_Mix_Power;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = min(u_xlat38, 1.0);
        u_xlat16_4.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_4.w = _Texture_4_Perlin_Power;
        u_xlat16_10.x = dot(u_xlat16_4, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_22 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_10.x = u_xlat16_22 + u_xlat16_10.x;
        u_xlat3.xy = u_xlat3.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_3.xy = texture(_Perlin_Normal_Tex, u_xlat3.xy, -1.0).xy;
        u_xlat16_22 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_22 = u_xlat38 * u_xlat16_22 + _Perlin_Normal_Power_Close;
        u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_3.xy = vec2(u_xlat16_22) * u_xlat16_3.xy;
        u_xlat16_22 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
        u_xlat16_22 = min(u_xlat16_22, 1.0);
        u_xlat16_22 = (-u_xlat16_22) + 1.0;
        u_xlat16_22 = sqrt(u_xlat16_22);
        u_xlat16_3.xy = u_xlat16_3.xy;
        u_xlat16_3.z = u_xlat16_22 + -1.0;
        u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_3.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_11.xy = u_xlat2.xy + u_xlat16_10.xy;
        u_xlat16_11.z = u_xlat2.z * u_xlat16_10.z;
        u_xlat16_10.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
        u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
        u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_11.xyz;
        u_xlat2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
    u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat5.xyz = vec3(u_xlat41) * u_xlat5.xyz;
    SV_Target0.xyz = u_xlat5.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
int u_xlati6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati6 / 2]._InstanceParam0.zz;
    u_xlat12.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat12.xy, 0.0).x;
    u_xlat12.xy = textureLod(_VertexNormalMap, u_xlat12.xy, 0.0).xy;
    u_xlat12.xy = u_xlat12.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy / u_xlat3.xy;
    vs_TEXCOORD0.zw = vec2(3.0, 0.0);
    vs_TEXCOORD1.w = u_xlat1.x;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat3.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat0.xx * u_xlat12.xy;
    u_xlat0.y = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.z = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.x = dot(u_xlat3.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    vs_TEXCOORD1.z = u_xlat0.y;
    u_xlat16_4.xyz = u_xlat0.yzx * vec3(1.0, 0.0, 0.0);
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(0.0, 0.0, 1.0) + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat0.zxy * u_xlat16_4.yzx + (-u_xlat16_5.xyz);
    vs_TEXCOORD1.y = (-u_xlat16_5.x);
    vs_TEXCOORD1.x = u_xlat16_4.z;
    vs_TEXCOORD2.x = u_xlat16_4.x;
    vs_TEXCOORD2.z = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.w = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat1.z;
    vs_TEXCOORD2.y = (-u_xlat16_5.y);
    vs_TEXCOORD3.y = (-u_xlat16_5.z);
    vs_TEXCOORD3.x = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat2.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _UV_Mix_Power;
uniform 	mediump float _UV_Mix_Start_Distance;
uniform 	mediump float _UV_Mix_Range;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Perlin_Normal_Tiling_Close;
uniform 	mediump float _Perlin_Normal_Power;
uniform 	mediump float _Perlin_Normal_Power_Close;
uniform 	mediump float _Texture_1_Perlin_Power;
uniform 	mediump float _Texture_2_Perlin_Power;
uniform 	mediump float _Texture_3_Perlin_Power;
uniform 	mediump float _Texture_4_Perlin_Power;
uniform 	mediump float _Texture_5_Perlin_Power;
uniform 	mediump float _Texture_6_Perlin_Power;
uniform 	mediump float _Texture_7_Perlin_Power;
uniform 	mediump float _Texture_8_Perlin_Power;
uniform 	mediump float _Texture_1_Normal_Power;
uniform 	mediump float _Texture_2_Normal_Power;
uniform 	mediump float _Texture_3_Normal_Power;
uniform 	mediump float _Texture_4_Normal_Power;
uniform 	mediump float _Texture_5_Normal_Power;
uniform 	mediump float _Texture_6_Normal_Power;
uniform 	mediump float _Texture_7_Normal_Power;
uniform 	mediump float _Texture_8_Normal_Power;
uniform 	vec4 _Texture_1_Albedo_TexelSize;
uniform 	vec4 _Texture_2_Albedo_TexelSize;
uniform 	vec4 _Texture_3_Albedo_TexelSize;
uniform 	vec4 _Texture_4_Albedo_TexelSize;
uniform 	vec4 _Texture_5_Albedo_TexelSize;
uniform 	vec4 _Texture_6_Albedo_TexelSize;
uniform 	vec4 _Texture_7_Albedo_TexelSize;
uniform 	vec4 _Texture_8_Albedo_TexelSize;
uniform 	vec4 _Texture_1_Normal_TexelSize;
uniform 	vec4 _Texture_2_Normal_TexelSize;
uniform 	vec4 _Texture_3_Normal_TexelSize;
uniform 	vec4 _Texture_4_Normal_TexelSize;
uniform 	vec4 _Texture_5_Normal_TexelSize;
uniform 	vec4 _Texture_6_Normal_TexelSize;
uniform 	vec4 _Texture_7_Normal_TexelSize;
uniform 	vec4 _Texture_8_Normal_TexelSize;
uniform 	mediump float _Texture_Perlin_Normal_Index;
uniform 	mediump float _Texture_1_Normal_Index;
uniform 	mediump float _Texture_2_Normal_Index;
uniform 	mediump float _Texture_3_Normal_Index;
uniform 	mediump float _Texture_4_Normal_Index;
uniform 	mediump float _Texture_5_Normal_Index;
uniform 	mediump float _Texture_6_Normal_Index;
uniform 	mediump float _Texture_7_Normal_Index;
uniform 	mediump float _Texture_8_Normal_Index;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec4 _Texture_1_RainParams;
uniform 	mediump vec4 _Texture_2_RainParams;
uniform 	mediump vec4 _Texture_3_RainParams;
uniform 	mediump vec4 _Texture_4_RainParams;
uniform 	mediump vec4 _Texture_5_RainParams;
uniform 	mediump vec4 _Texture_6_RainParams;
uniform 	mediump vec4 _Texture_7_RainParams;
uniform 	mediump vec4 _Texture_8_RainParams;
struct DebugView_PropsArray_Type {
	float _TerrainLODLevel;
};
layout(std140) uniform UnityInstancing_DebugView_Props {
	DebugView_PropsArray_Type DebugView_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Texture_1_Normal;
uniform lowp sampler2D _Texture_2_Normal;
uniform lowp sampler2D _Texture_3_Normal;
uniform lowp sampler2D _Texture_4_Normal;
uniform lowp sampler2D _Texture_5_Normal;
uniform lowp sampler2D _Texture_6_Normal;
uniform lowp sampler2D _Texture_7_Normal;
uniform lowp sampler2D _Texture_8_Normal;
uniform lowp sampler2D _Perlin_Normal_Tex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec2 u_xlat10_2;
vec4 u_xlat3;
mediump vec2 u_xlat16_3;
lowp vec2 u_xlat10_3;
ivec3 u_xlati3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec2 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
bvec2 u_xlatb7;
vec4 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
bvec2 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat15;
bvec3 u_xlatb15;
mediump float u_xlat16_22;
vec2 u_xlat24;
bvec2 u_xlatb24;
vec2 u_xlat25;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
vec2 u_xlat31;
vec2 u_xlat32;
float u_xlat36;
bool u_xlatb36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vs_TEXCOORD0.z<1.5);
#else
    u_xlatb0.x = vs_TEXCOORD0.z<1.5;
#endif
    u_xlatb12.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), _MainTex_TexelSize.zwzz).xy;
    u_xlatb12.x = u_xlatb12.y || u_xlatb12.x;
    u_xlat1.xy = _MainTex_TexelSize.zw;
    u_xlat1.zw = vs_TEXCOORD0.xy;
    u_xlat1 = (u_xlatb12.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat1 = (u_xlatb0.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
    u_xlat2.x = float(4096.0);
    u_xlat2.y = float(4096.0);
    u_xlat2.zw = vs_TEXCOORD0.xy;
    u_xlat2 = (u_xlatb0.x) ? u_xlat2 : vec4(1.0, 1.0, 0.0, 0.0);
    if(!u_xlatb0.x){
        u_xlat0 = texture(_Texture_Splat_1, vs_TEXCOORD0.xy);
        u_xlatb0 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat0);
        u_xlat3.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat1.xyxx, u_xlat3.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Albedo_TexelSize.zw;
        u_xlat4.z = vs_TEXCOORD1.w;
        u_xlat4.w = vs_TEXCOORD3.w;
        u_xlat5 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat1;
        u_xlat27.xy = vec2(float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.z, float(_Texture_1_Tiling) * _Texture_1_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat2.yyyy, u_xlat27.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_1_Normal_TexelSize.zw;
        u_xlat6 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat2;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_1_Tiling) : float(1.0);
        u_xlat5 = (u_xlatb0.x) ? u_xlat5 : u_xlat1;
        u_xlat6 = (u_xlatb0.x) ? u_xlat6 : u_xlat2;
        u_xlat3.xy = (u_xlatb0.x) ? u_xlat3.xy : vec2(1.0, 1.0);
        u_xlat27.xy = u_xlat3.xx * u_xlat5.xy;
        u_xlat7.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Albedo_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat7.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
        u_xlat8.x = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.x;
        u_xlat27.xy = u_xlat3.yy * u_xlat6.xy;
        u_xlat32.xy = vec2(float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.z, float(_Texture_2_Tiling) * _Texture_2_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat32.xyxy).xy;
        u_xlatb0.x = u_xlatb27.y || u_xlatb27.x;
        u_xlat4.xy = _Texture_2_Normal_TexelSize.zw;
        u_xlat9 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
        u_xlat8.y = (u_xlatb0.x) ? _Texture_2_Tiling : u_xlat3.y;
        u_xlat5 = (u_xlatb0.y) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.y) ? u_xlat9 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.y) ? u_xlat8.xy : u_xlat3.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlati3.x = int(uint(u_xlatb3.y) * 0xffffffffu | uint(u_xlatb3.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Albedo_TexelSize.zw;
        u_xlat7 = (u_xlati3.x != 0) ? u_xlat4 : u_xlat5;
        u_xlat27.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat8.xy = vec2(float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.z, float(_Texture_3_Tiling) * _Texture_3_Normal_TexelSize.w);
        u_xlatb27.xy = lessThan(u_xlat27.xyxy, u_xlat8.xyxy).xy;
        u_xlati3.z = int(uint(u_xlatb27.y) * 0xffffffffu | uint(u_xlatb27.x) * 0xffffffffu);
        u_xlat4.xy = _Texture_3_Normal_TexelSize.zw;
        u_xlat8 = (u_xlati3.z != 0) ? u_xlat4 : u_xlat6;
        u_xlat3.x = (u_xlati3.x != 0) ? float(_Texture_3_Tiling) : u_xlat0.x;
        u_xlat3.y = (u_xlati3.z != 0) ? float(_Texture_3_Tiling) : u_xlat0.y;
        u_xlat5 = (u_xlatb0.z) ? u_xlat7 : u_xlat5;
        u_xlat6 = (u_xlatb0.z) ? u_xlat8 : u_xlat6;
        u_xlat0.xy = (u_xlatb0.z) ? u_xlat3.xy : u_xlat0.xy;
        u_xlat3.xy = u_xlat0.xx * u_xlat5.xy;
        u_xlat27.xy = vec2(_Texture_4_Tiling * _Texture_4_Albedo_TexelSize.z, _Texture_4_Tiling * _Texture_4_Albedo_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat27.xyxx).xy;
        u_xlatb24.x = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _Texture_4_Albedo_TexelSize.zw;
        u_xlat3 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
        u_xlat7.xy = u_xlat0.yy * u_xlat6.xy;
        u_xlat31.xy = vec2(_Texture_4_Tiling * _Texture_4_Normal_TexelSize.z, _Texture_4_Tiling * _Texture_4_Normal_TexelSize.w);
        u_xlatb7.xy = lessThan(u_xlat7.xyxx, u_xlat31.xyxx).xy;
        u_xlatb7.x = u_xlatb7.y || u_xlatb7.x;
        u_xlat4.xy = _Texture_4_Normal_TexelSize.zw;
        u_xlat8 = (u_xlatb7.x) ? u_xlat4 : u_xlat6;
        u_xlat1 = (u_xlatb0.w) ? u_xlat3 : u_xlat5;
        u_xlat2 = (u_xlatb0.w) ? u_xlat8 : u_xlat6;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(2.5<vs_TEXCOORD0.z);
#else
        u_xlatb3.x = 2.5<vs_TEXCOORD0.z;
#endif
        if(u_xlatb3.x){
            u_xlat3.x = (u_xlatb24.x) ? _Texture_4_Tiling : u_xlat0.x;
            u_xlat3.y = (u_xlatb7.x) ? _Texture_4_Tiling : u_xlat0.y;
            u_xlat0.xy = (u_xlatb0.w) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat3 = texture(_Texture_Splat_2, vs_TEXCOORD0.xy);
            u_xlatb3 = lessThan(vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001), u_xlat3);
            u_xlat24.xy = u_xlat0.xx * u_xlat1.xy;
            u_xlat5.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat5.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Albedo_TexelSize.zw;
            u_xlat5 = (u_xlatb24.x) ? u_xlat4 : u_xlat1;
            u_xlat6.x = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat2.xy;
            u_xlat30.xy = vec2(float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.z, float(_Texture_5_Tiling) * _Texture_5_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat30.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_5_Normal_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat2;
            u_xlat6.y = (u_xlatb24.x) ? _Texture_5_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.x) ? u_xlat5 : u_xlat1;
            u_xlat7 = (u_xlatb3.x) ? u_xlat7 : u_xlat2;
            u_xlat0.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat6.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat6.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Albedo_TexelSize.zw;
            u_xlat6 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat8.x = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat7.xy;
            u_xlat32.xy = vec2(float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.z, float(_Texture_6_Tiling) * _Texture_6_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat32.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_6_Normal_TexelSize.zw;
            u_xlat9 = (u_xlatb24.x) ? u_xlat4 : u_xlat7;
            u_xlat8.y = (u_xlatb24.x) ? _Texture_6_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.y) ? u_xlat6 : u_xlat5;
            u_xlat6 = (u_xlatb3.y) ? u_xlat9 : u_xlat7;
            u_xlat0.xy = (u_xlatb3.y) ? u_xlat8.xy : u_xlat0.xy;
            u_xlat24.xy = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Albedo_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat3.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb24.x) ? u_xlat4 : u_xlat5;
            u_xlat3.x = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.x;
            u_xlat24.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat8.xy = vec2(float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.z, float(_Texture_7_Tiling) * _Texture_7_Normal_TexelSize.w);
            u_xlatb24.xy = lessThan(u_xlat24.xyxy, u_xlat8.xyxy).xy;
            u_xlatb24.x = u_xlatb24.y || u_xlatb24.x;
            u_xlat4.xy = _Texture_7_Normal_TexelSize.zw;
            u_xlat8 = (u_xlatb24.x) ? u_xlat4 : u_xlat6;
            u_xlat3.y = (u_xlatb24.x) ? _Texture_7_Tiling : u_xlat0.y;
            u_xlat5 = (u_xlatb3.z) ? u_xlat7 : u_xlat5;
            u_xlat6 = (u_xlatb3.z) ? u_xlat8 : u_xlat6;
            u_xlat0.xy = (u_xlatb3.z) ? u_xlat3.xy : u_xlat0.xy;
            u_xlat0.xz = u_xlat0.xx * u_xlat5.xy;
            u_xlat3.xy = vec2(_Texture_8_Tiling * _Texture_8_Albedo_TexelSize.z, _Texture_8_Tiling * _Texture_8_Albedo_TexelSize.w);
            u_xlatb0.xz = lessThan(u_xlat0.xxzx, u_xlat3.xxyx).xz;
            u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Albedo_TexelSize.zw;
            u_xlat7 = (u_xlatb0.x) ? u_xlat4 : u_xlat5;
            u_xlat0.xy = u_xlat0.yy * u_xlat6.xy;
            u_xlat24.xy = vec2(_Texture_8_Tiling * _Texture_8_Normal_TexelSize.z, _Texture_8_Tiling * _Texture_8_Normal_TexelSize.w);
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat24.xyxx).xy;
            u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
            u_xlat4.xy = _Texture_8_Normal_TexelSize.zw;
            u_xlat0 = (u_xlatb0.x) ? u_xlat4 : u_xlat6;
            u_xlat1 = (u_xlatb3.w) ? u_xlat7 : u_xlat5;
            u_xlat2 = (u_xlatb3.w) ? u_xlat0 : u_xlat6;
        //ENDIF
        }
    } else {
        u_xlat2 = u_xlat2.yyzw;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
        u_xlatb3 = lessThan(vec4(4.9000001, 3.9000001, 2.9000001, 1.89999998), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel));
        u_xlatb0.xy = lessThan(vec4(0.899999976, -0.100000001, 0.0, 0.0), vec4(DebugView_PropsArray[u_xlati0]._TerrainLODLevel)).xy;
        u_xlat4 = (u_xlatb0.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat0 = (u_xlatb0.x) ? vec4(0.5, 0.0, 0.0, 1.0) : u_xlat4;
        u_xlat0 = (u_xlatb3.w) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.z) ? vec4(0.5, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.y) ? vec4(0.0, 0.5, 0.0, 1.0) : u_xlat0;
        u_xlat0 = (u_xlatb3.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat0;
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat24.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat24.x = dot(u_xlat24.xy, u_xlat24.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat24.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat12.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat12.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb12.x = !!(256.0<u_xlat0.x);
#else
        u_xlatb12.x = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat3 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat3 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat3;
        u_xlat0 = (u_xlatb12.x) ? u_xlat3 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb0.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat0.zw = dFdx(u_xlat0.xy);
            u_xlat0.xy = dFdy(u_xlat0.xy);
            u_xlat3.x = dot(u_xlat0.zw, u_xlat0.zw);
            u_xlat15.x = dot(u_xlat0.xy, u_xlat0.xy);
            u_xlat3.x = max(u_xlat15.x, u_xlat3.x);
            u_xlat3.x = log2(u_xlat3.x);
            u_xlat3.x = u_xlat3.x * 0.5;
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlat3.x = u_xlat3.x + 1.0;
            u_xlat15.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat0 = u_xlat0 * u_xlat15.xxxx;
            u_xlat0 = u_xlat0 / u_xlat3.xxxx;
            u_xlat12.z = dot(abs(u_xlat0.zw), abs(u_xlat0.zw));
            u_xlat12.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
            u_xlat3.xy = sqrt(u_xlat12.zx);
            u_xlat12.z = inversesqrt(u_xlat12.z);
            u_xlat12.x = inversesqrt(u_xlat12.x);
            u_xlat0.xz = u_xlat12.xz * abs(u_xlat0.xz);
            u_xlat0.x = u_xlat0.x * u_xlat0.z;
            u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
            u_xlat0.x = sqrt(u_xlat0.x);
            u_xlat12.x = u_xlat3.y * u_xlat3.x;
            u_xlat24.x = u_xlat0.x * u_xlat12.x;
            u_xlat3.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat36 = fract((-u_xlat3.x));
            u_xlat36 = u_xlat36 + 0.5;
            u_xlat36 = floor(u_xlat36);
            u_xlat3.xy = fract(u_xlat3.xy);
            u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
            u_xlat3.xy = floor(u_xlat3.xy);
            u_xlat36 = u_xlat36 + (-u_xlat3.x);
            u_xlat36 = u_xlat36 * u_xlat3.y + u_xlat3.x;
            u_xlat3.x = (-u_xlat12.x) * u_xlat0.x + 1.0;
            u_xlat15.xyz = (-vec3(u_xlat36)) + vec3(0.5, 0.0, 1.0);
            u_xlat4.xyz = u_xlat3.xxx * u_xlat15.xyz + vec3(u_xlat36);
            u_xlatb3.xy = lessThan(u_xlat24.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat5.xyz = vec3(u_xlat36) * vec3(0.0, 1.0, 0.0);
            u_xlat0.x = u_xlat12.x * u_xlat0.x + -4.0;
            u_xlat0.x = exp2(u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
            u_xlat0.xyz = u_xlat0.xxx * u_xlat15.zyy + vec3(u_xlat36);
            u_xlat0.xyz = (u_xlatb3.y) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlat0.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat0.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb36 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb36){
                u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat36 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat36 = max(u_xlat36, u_xlat4.x);
                u_xlat36 = log2(u_xlat36);
                u_xlat36 = u_xlat36 * 0.5;
                u_xlat36 = max(u_xlat36, 0.0);
                u_xlat36 = u_xlat36 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat36);
                u_xlat36 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat15.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat39 = sqrt(u_xlat36);
                u_xlat4.x = sqrt(u_xlat15.x);
                u_xlat36 = inversesqrt(u_xlat36);
                u_xlat36 = u_xlat36 * abs(u_xlat3.z);
                u_xlat15.x = inversesqrt(u_xlat15.x);
                u_xlat3.x = u_xlat15.x * abs(u_xlat3.x);
                u_xlat36 = u_xlat36 * u_xlat3.x;
                u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                u_xlat36 = sqrt(u_xlat36);
                u_xlat3.x = u_xlat39 * u_xlat4.x;
                u_xlat15.x = u_xlat36 * u_xlat3.x;
                u_xlat27.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                u_xlat4.x = fract((-u_xlat27.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat27.xy = fract(u_xlat27.xy);
                u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                u_xlat27.xy = floor(u_xlat27.xy);
                u_xlat4.x = (-u_xlat27.x) + u_xlat4.x;
                u_xlat27.x = u_xlat4.x * u_xlat27.y + u_xlat27.x;
                u_xlat39 = (-u_xlat3.x) * u_xlat36 + 1.0;
                u_xlat4.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat39) * u_xlat4.xyz + u_xlat27.xxx;
                u_xlatb15.xz = lessThan(u_xlat15.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat36 = u_xlat3.x * u_xlat36 + -4.0;
                u_xlat36 = exp2(u_xlat36);
                u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.zyy + u_xlat27.xxx;
                u_xlat3.xzw = (u_xlatb15.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat0.xyz = (u_xlatb15.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb36 = !!(u_xlat1.x>=u_xlat2.x);
#else
                u_xlatb36 = u_xlat1.x>=u_xlat2.x;
#endif
                if(u_xlatb36){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat27.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat27.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat27.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat27.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat36);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat15.x = sqrt(u_xlat36);
                    u_xlat27.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat3.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat27.x * u_xlat15.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat25.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat3.x = (-u_xlat25.x) + u_xlat3.x;
                    u_xlat25.x = u_xlat3.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat3.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat37) * u_xlat3.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat3.xyz = vec3(u_xlat36) * u_xlat3.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat5.xyz : u_xlat3.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat4.xyz : u_xlat1.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat36 = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat36 = max(u_xlat36, u_xlat2.x);
                    u_xlat36 = log2(u_xlat36);
                    u_xlat36 = u_xlat36 * 0.5;
                    u_xlat36 = max(u_xlat36, 0.0);
                    u_xlat36 = u_xlat36 + 1.0;
                    u_xlat2.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
                    u_xlat1 = u_xlat1 / vec4(u_xlat36);
                    u_xlat36 = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat13 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat37 = sqrt(u_xlat36);
                    u_xlat2.x = sqrt(u_xlat13);
                    u_xlat36 = inversesqrt(u_xlat36);
                    u_xlat36 = u_xlat36 * abs(u_xlat1.z);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat1.x = u_xlat13 * abs(u_xlat1.x);
                    u_xlat36 = u_xlat36 * u_xlat1.x;
                    u_xlat36 = (-u_xlat36) * u_xlat36 + 1.0;
                    u_xlat36 = sqrt(u_xlat36);
                    u_xlat1.x = u_xlat37 * u_xlat2.x;
                    u_xlat13 = u_xlat36 * u_xlat1.x;
                    u_xlat25.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat25.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat25.xy = fract(u_xlat25.xy);
                    u_xlat25.xy = u_xlat25.xy + vec2(0.5, 0.5);
                    u_xlat25.xy = floor(u_xlat25.xy);
                    u_xlat2.x = (-u_xlat25.x) + u_xlat2.x;
                    u_xlat25.x = u_xlat2.x * u_xlat25.y + u_xlat25.x;
                    u_xlat37 = (-u_xlat1.x) * u_xlat36 + 1.0;
                    u_xlat2.xyz = (-u_xlat25.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat37) * u_xlat2.xyz + u_xlat25.xxx;
                    u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat4.xyz = u_xlat25.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat36 = u_xlat1.x * u_xlat36 + -4.0;
                    u_xlat36 = exp2(u_xlat36);
                    u_xlat36 = u_xlat36 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
                    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.zyy + u_xlat25.xxx;
                    u_xlat1.xzw = (u_xlatb13.z) ? u_xlat4.xyz : u_xlat2.xyz;
                    u_xlat0.xyz = (u_xlatb13.x) ? u_xlat3.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 1.0;
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0 = vs_TEXCOORD0.zzzz * vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target0 = u_xlat0;
        return;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD0.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    if(u_xlatb1.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_1_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_1_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_1_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_1_Normal_Power;
            u_xlat2.x = vs_TEXCOORD1.w;
            u_xlat2.y = vs_TEXCOORD3.w;
            u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD5.xx;
            u_xlat10_2.xy = texture(_Texture_1_Normal, u_xlat2.xy, -1.0).xy;
            u_xlat16_2.xy = u_xlat10_2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_2.xy = u_xlat16_10.xx * u_xlat16_2.xy;
            u_xlat16_10.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.xx * u_xlat16_2.xy;
            u_xlat16_11.z = u_xlat0.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat16_11.xyz;
        } else {
            u_xlat16_2.xyz = u_xlat0.xxx * vec3(0.0, 0.0, 1.0);
            u_xlat2.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    } else {
        u_xlat2.x = float(0.0);
        u_xlat2.y = float(0.0);
        u_xlat2.z = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_2_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_2_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_2_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_2_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.yy;
            u_xlat10_1.xy = texture(_Texture_2_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.yy * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_3_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_3_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_3_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_3_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.zz;
            u_xlat10_1.xy = texture(_Texture_3_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.zz * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb1.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(-1.0<_Texture_4_Normal_Index);
#else
        u_xlatb1.x = -1.0<_Texture_4_Normal_Index;
#endif
        if(u_xlatb1.x){
            u_xlat16_10.x = _Texture_4_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_4_Normal_Power;
            u_xlat1.x = vs_TEXCOORD1.w;
            u_xlat1.y = vs_TEXCOORD3.w;
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD5.ww;
            u_xlat10_1.xy = texture(_Texture_4_Normal, u_xlat1.xy, -1.0).xy;
            u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_1.xy = u_xlat16_10.xx * u_xlat16_1.xy;
            u_xlat16_10.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat0.ww * u_xlat16_1.xy;
            u_xlat16_11.z = u_xlat0.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat0.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    u_xlat1 = textureLod(_Texture_Splat_2, vs_TEXCOORD0.xy, 0.0);
    u_xlatb3 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat1);
    if(u_xlatb3.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_5_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_5_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_5_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_5_Normal_Power;
            u_xlat4.x = vs_TEXCOORD1.w;
            u_xlat4.y = vs_TEXCOORD3.w;
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD6.xx;
            u_xlat10_4.xy = texture(_Texture_5_Normal, u_xlat4.xy, -1.0).xy;
            u_xlat16_4.xy = u_xlat10_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_4.xy = u_xlat16_10.xx * u_xlat16_4.xy;
            u_xlat16_10.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.xx * u_xlat16_4.xy;
            u_xlat16_11.z = u_xlat1.x * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.xxx * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_6_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_6_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_6_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_6_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.yy;
            u_xlat10_3.xy = texture(_Texture_6_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.yy * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.y * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.yyy * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_7_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_7_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_7_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_7_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.zz;
            u_xlat10_3.xy = texture(_Texture_7_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.zz * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.z * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.zzz * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.w){
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(-1.0<_Texture_8_Normal_Index);
#else
        u_xlatb38 = -1.0<_Texture_8_Normal_Index;
#endif
        if(u_xlatb38){
            u_xlat16_10.x = _Texture_8_RainParams.x + -1.0;
            u_xlat16_10.x = _mhyRainNoiseParam1.z * u_xlat16_10.x + 1.0;
            u_xlat16_10.x = u_xlat16_10.x * _Texture_8_Normal_Power;
            u_xlat3.x = vs_TEXCOORD1.w;
            u_xlat3.y = vs_TEXCOORD3.w;
            u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD6.ww;
            u_xlat10_3.xy = texture(_Texture_8_Normal, u_xlat3.xy, -1.0).xy;
            u_xlat16_3.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
            u_xlat16_3.xy = u_xlat16_10.xx * u_xlat16_3.xy;
            u_xlat16_10.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
            u_xlat16_10.x = min(u_xlat16_10.x, 1.0);
            u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
            u_xlat16_10.x = sqrt(u_xlat16_10.x);
            u_xlat16_11.xy = u_xlat1.ww * u_xlat16_3.xy;
            u_xlat16_11.z = u_xlat1.w * u_xlat16_10.x;
            u_xlat2.xyz = u_xlat2.xyz + u_xlat16_11.xyz;
        } else {
            u_xlat2.xyz = u_xlat1.www * vec3(0.0, 0.0, 1.0) + u_xlat2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(-1.0<_Texture_Perlin_Normal_Index);
#else
    u_xlatb38 = -1.0<_Texture_Perlin_Normal_Index;
#endif
    if(u_xlatb38){
        u_xlat3.x = vs_TEXCOORD1.w;
        u_xlat3.y = vs_TEXCOORD2.w;
        u_xlat3.z = vs_TEXCOORD3.w;
        u_xlat4.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
        u_xlat38 = max(abs(u_xlat4.z), abs(u_xlat4.y));
        u_xlat38 = max(u_xlat38, abs(u_xlat4.x));
        u_xlat38 = u_xlat38 + (-_UV_Mix_Start_Distance);
        u_xlat38 = max(u_xlat38, 0.0);
        u_xlat38 = u_xlat38 / _UV_Mix_Range;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * _UV_Mix_Power;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = min(u_xlat38, 1.0);
        u_xlat16_4.xyz = vec3(_Texture_1_Perlin_Power, _Texture_2_Perlin_Power, _Texture_3_Perlin_Power);
        u_xlat16_4.w = _Texture_4_Perlin_Power;
        u_xlat16_10.x = dot(u_xlat16_4, u_xlat0);
        u_xlat16_0.xyz = vec3(_Texture_5_Perlin_Power, _Texture_6_Perlin_Power, _Texture_7_Perlin_Power);
        u_xlat16_0.w = _Texture_8_Perlin_Power;
        u_xlat16_22 = dot(u_xlat16_0, u_xlat1);
        u_xlat16_10.x = u_xlat16_22 + u_xlat16_10.x;
        u_xlat1.xy = u_xlat3.xz / vec2(vec2(_Perlin_Normal_Tiling_Close, _Perlin_Normal_Tiling_Close));
        u_xlat10_1.xy = texture(_Perlin_Normal_Tex, u_xlat1.xy, -1.0).xy;
        u_xlat16_22 = _Perlin_Normal_Power + (-_Perlin_Normal_Power_Close);
        u_xlat16_22 = u_xlat38 * u_xlat16_22 + _Perlin_Normal_Power_Close;
        u_xlat16_1.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
        u_xlat16_1.xy = vec2(u_xlat16_22) * u_xlat16_1.xy;
        u_xlat16_22 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
        u_xlat16_22 = min(u_xlat16_22, 1.0);
        u_xlat16_22 = (-u_xlat16_22) + 1.0;
        u_xlat16_22 = sqrt(u_xlat16_22);
        u_xlat16_1.xy = u_xlat16_1.xy;
        u_xlat16_1.z = u_xlat16_22 + -1.0;
        u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_1.xyz + vec3(0.0, 0.0, 1.0);
        u_xlat16_11.xy = u_xlat2.xy + u_xlat16_10.xy;
        u_xlat16_11.z = u_xlat2.z * u_xlat16_10.z;
        u_xlat16_10.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
        u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
        u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_11.xyz;
        u_xlat2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
}
}
 Pass {
  LOD 100
  Tags { "LIGHTMODE" = "DEPTHBLENDOUTPUT" "QUEUE" = "AlphaTest+1" "RenderType" = "Opaque" "TerrainHeight" = "VertexFetch" }
  GpuProgramID 210242
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD3.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec3 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec2 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump float u_xlat16_6;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD1.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.xy = vs_TEXCOORD0.xz * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.xy = vs_TEXCOORD0.xz * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.xy = vs_TEXCOORD0.xz * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.xy = vs_TEXCOORD0.xz * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD1.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat4.xz = vs_TEXCOORD0.xz * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.xy = vs_TEXCOORD0.xz * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.xy = vs_TEXCOORD0.xz * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.xy = vs_TEXCOORD0.xz * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_6 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_6 = u_xlat16_6 * _Terrain_Smoothness;
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    SV_Target0.w = min(u_xlat16_6, 0.5);
    u_xlat0.xyz = vs_TEXCOORD3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(0u);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec3 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec2 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump float u_xlat16_6;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD1.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.xy = vs_TEXCOORD0.xz * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.xy = vs_TEXCOORD0.xz * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.xy = vs_TEXCOORD0.xz * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.xy = vs_TEXCOORD0.xz * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD1.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat4.xz = vs_TEXCOORD0.xz * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.xy = vs_TEXCOORD0.xz * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.xy = vs_TEXCOORD0.xz * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.xy = vs_TEXCOORD0.xz * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_6 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_6 = u_xlat16_6 * _Terrain_Smoothness;
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    SV_Target0.w = min(u_xlat16_6, 0.5);
    u_xlat0.xyz = vs_TEXCOORD3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
vec2 u_xlat6;
float u_xlat9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat6.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat6.xy = vec2(u_xlat6.x / _BlockParam1.z, u_xlat6.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat6.xy, 0.0).x;
    u_xlat6.xy = textureLod(_VertexNormalMap, u_xlat6.xy, 0.0).xy;
    u_xlat6.xy = u_xlat6.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat2.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD1.xy = u_xlat0.xy / u_xlat2.xy;
    u_xlat0.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat2.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat2.z);
    u_xlat2.xy = u_xlat0.xx * u_xlat6.xy;
    u_xlat0.x = dot(u_xlat2.xyw, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyw, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyw, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec3 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec2 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump float u_xlat16_6;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD1.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.xy = vs_TEXCOORD0.xz * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.xy = vs_TEXCOORD0.xz * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.xy = vs_TEXCOORD0.xz * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.xy = vs_TEXCOORD0.xz * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD1.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat4.xz = vs_TEXCOORD0.xz * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.xy = vs_TEXCOORD0.xz * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.xy = vs_TEXCOORD0.xz * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.xy = vs_TEXCOORD0.xz * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_6 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_6 = u_xlat16_6 * _Terrain_Smoothness;
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    SV_Target0.w = min(u_xlat16_6, 0.5);
    u_xlat0.xyz = vs_TEXCOORD3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4terrain_WorldToObject[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	mediump float _Texture_1_Tiling;
uniform 	mediump float _Texture_2_Tiling;
uniform 	mediump float _Texture_3_Tiling;
uniform 	mediump float _Texture_4_Tiling;
uniform 	mediump float _Texture_5_Tiling;
uniform 	mediump float _Texture_6_Tiling;
uniform 	mediump float _Texture_7_Tiling;
uniform 	mediump float _Texture_8_Tiling;
uniform 	mediump float _Texture_1_Far_Multiplier;
uniform 	mediump float _Texture_2_Far_Multiplier;
uniform 	mediump float _Texture_3_Far_Multiplier;
uniform 	mediump float _Texture_4_Far_Multiplier;
uniform 	mediump float _Texture_5_Far_Multiplier;
uniform 	mediump float _Texture_6_Far_Multiplier;
uniform 	mediump float _Texture_7_Far_Multiplier;
uniform 	mediump float _Texture_8_Far_Multiplier;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
uniform lowp sampler2D _VertexNormalMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
vec2 u_xlat6;
float u_xlat9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati3 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati3 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati3 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati3 / 2]._InstanceParam0.zz;
    u_xlat6.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat1.x = textureLod(_HeightMap, u_xlat6.xy, 0.0).x;
    u_xlat6.xy = textureLod(_VertexNormalMap, u_xlat6.xy, 0.0).xy;
    u_xlat6.xy = u_xlat6.xy * vec2(4.0, 4.0) + vec2(-2.0, -2.0);
    u_xlat1 = u_xlat1.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat2.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat2.yyyy + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    vs_TEXCOORD0.xyz = hlslcc_mtx4x4terrain_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat2.xy = _BlockParam0.xy + vec2(-1.0, -1.0);
    vs_TEXCOORD1.xy = u_xlat0.xy / u_xlat2.xy;
    u_xlat0.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat2.zw = (-u_xlat0.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat0.x = sqrt(u_xlat2.z);
    u_xlat2.xy = u_xlat0.xx * u_xlat6.xy;
    u_xlat0.x = dot(u_xlat2.xyw, hlslcc_mtx4x4terrain_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyw, hlslcc_mtx4x4terrain_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyw, hlslcc_mtx4x4terrain_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.xyz = vec3(float(1.0) / float(_Texture_1_Tiling), float(1.0) / float(_Texture_2_Tiling), float(1.0) / float(_Texture_3_Tiling));
    vs_TEXCOORD5.w = float(1.0) / _Texture_4_Tiling;
    vs_TEXCOORD6.xyz = vec3(float(1.0) / float(_Texture_5_Tiling), float(1.0) / float(_Texture_6_Tiling), float(1.0) / float(_Texture_7_Tiling));
    vs_TEXCOORD6.w = float(1.0) / _Texture_8_Tiling;
    vs_TEXCOORD7.xyz = vec3(float(1.0) / float(_Texture_1_Far_Multiplier), float(1.0) / float(_Texture_2_Far_Multiplier), float(1.0) / float(_Texture_3_Far_Multiplier));
    vs_TEXCOORD7.w = float(1.0) / _Texture_4_Far_Multiplier;
    vs_TEXCOORD8.xyz = vec3(float(1.0) / float(_Texture_5_Far_Multiplier), float(1.0) / float(_Texture_6_Far_Multiplier), float(1.0) / float(_Texture_7_Far_Multiplier));
    vs_TEXCOORD8.w = float(1.0) / _Texture_8_Far_Multiplier;
    vs_SV_InstanceID0 = uint(0u);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _Terrain_Smoothness;
uniform 	mediump vec4 _Texture_1_Color;
uniform 	mediump vec4 _Texture_2_Color;
uniform 	mediump vec4 _Texture_3_Color;
uniform 	mediump vec4 _Texture_4_Color;
uniform 	mediump vec4 _Texture_5_Color;
uniform 	mediump vec4 _Texture_6_Color;
uniform 	mediump vec4 _Texture_7_Color;
uniform 	mediump vec4 _Texture_8_Color;
uniform 	mediump float _Texture_1_Albedo_Index;
uniform 	mediump float _Texture_2_Albedo_Index;
uniform 	mediump float _Texture_3_Albedo_Index;
uniform 	mediump float _Texture_4_Albedo_Index;
uniform 	mediump float _Texture_5_Albedo_Index;
uniform 	mediump float _Texture_6_Albedo_Index;
uniform 	mediump float _Texture_7_Albedo_Index;
uniform 	mediump float _Texture_8_Albedo_Index;
uniform lowp sampler2D _Texture_Splat_1;
uniform lowp sampler2D _Texture_1_Albedo;
uniform lowp sampler2D _Texture_2_Albedo;
uniform lowp sampler2D _Texture_3_Albedo;
uniform lowp sampler2D _Texture_4_Albedo;
uniform lowp sampler2D _Texture_Splat_2;
uniform lowp sampler2D _Texture_5_Albedo;
uniform lowp sampler2D _Texture_6_Albedo;
uniform lowp sampler2D _Texture_7_Albedo;
uniform lowp sampler2D _Texture_8_Albedo;
in highp vec3 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec2 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump float u_xlat16_6;
void main()
{
    u_xlat0 = textureLod(_Texture_Splat_1, vs_TEXCOORD1.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb2.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_1_Albedo_Index, _Texture_2_Albedo_Index, _Texture_1_Albedo_Index, _Texture_1_Albedo_Index)).xy;
    u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
    u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
    if(u_xlatb1.x){
        u_xlat2.xy = vs_TEXCOORD0.xz * vs_TEXCOORD5.xx;
        u_xlat10_2 = texture(_Texture_1_Albedo, u_xlat2.xy);
        u_xlat16_2 = u_xlat10_2 * _Texture_1_Color;
        u_xlat16_2 = u_xlat0.xxxx * u_xlat16_2;
    } else {
        u_xlat16_2.x = float(0.0);
        u_xlat16_2.y = float(0.0);
        u_xlat16_2.z = float(0.0);
        u_xlat16_2.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb1.y){
        u_xlat1.xy = vs_TEXCOORD0.xz * vs_TEXCOORD5.yy;
        u_xlat10_3 = texture(_Texture_2_Albedo, u_xlat1.xy);
        u_xlat16_3 = u_xlat10_3 * _Texture_2_Color;
        u_xlat16_2 = u_xlat16_3 * u_xlat0.yyyy + u_xlat16_2;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_3_Albedo_Index, _Texture_4_Albedo_Index, _Texture_3_Albedo_Index, _Texture_3_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat1.xy = vs_TEXCOORD0.xz * vs_TEXCOORD5.zz;
        u_xlat10_1 = texture(_Texture_3_Albedo, u_xlat1.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_3_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_2;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.xy = vs_TEXCOORD0.xz * vs_TEXCOORD5.ww;
        u_xlat10_1 = texture(_Texture_4_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_4_Color;
        u_xlat16_2 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_2;
    //ENDIF
    }
    u_xlat0 = textureLod(_Texture_Splat_2, vs_TEXCOORD1.xy, 0.0);
    u_xlatb1 = lessThan(vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005), u_xlat0);
    u_xlatb4.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_5_Albedo_Index, _Texture_6_Albedo_Index, _Texture_5_Albedo_Index, _Texture_5_Albedo_Index)).xy;
    u_xlatb4.x = u_xlatb1.x && u_xlatb4.x;
    u_xlatb4.y = u_xlatb1.y && u_xlatb4.y;
    if(u_xlatb4.x){
        u_xlat4.xz = vs_TEXCOORD0.xz * vs_TEXCOORD6.xx;
        u_xlat10_3 = texture(_Texture_5_Albedo, u_xlat4.xz);
        u_xlat16_3 = u_xlat10_3 * _Texture_5_Color;
        u_xlat16_3 = u_xlat0.xxxx * u_xlat16_3;
    } else {
        u_xlat16_3.x = float(0.0);
        u_xlat16_3.y = float(0.0);
        u_xlat16_3.z = float(0.0);
        u_xlat16_3.w = float(0.0);
    //ENDIF
    }
    if(u_xlatb4.y){
        u_xlat4.xy = vs_TEXCOORD0.xz * vs_TEXCOORD6.yy;
        u_xlat10_4 = texture(_Texture_6_Albedo, u_xlat4.xy);
        u_xlat16_4 = u_xlat10_4 * _Texture_6_Color;
        u_xlat16_3 = u_xlat16_4 * u_xlat0.yyyy + u_xlat16_3;
    //ENDIF
    }
    u_xlatb0.xy = lessThan(vec4(-1.0, -1.0, 0.0, 0.0), vec4(_Texture_7_Albedo_Index, _Texture_8_Albedo_Index, _Texture_7_Albedo_Index, _Texture_7_Albedo_Index)).xy;
    u_xlatb0.x = u_xlatb0.x && u_xlatb1.z;
    u_xlatb0.y = u_xlatb0.y && u_xlatb1.w;
    if(u_xlatb0.x){
        u_xlat5.xy = vs_TEXCOORD0.xz * vs_TEXCOORD6.zz;
        u_xlat10_1 = texture(_Texture_7_Albedo, u_xlat5.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_7_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.zzzz + u_xlat16_3;
    //ENDIF
    }
    if(u_xlatb0.y){
        u_xlat0.xy = vs_TEXCOORD0.xz * vs_TEXCOORD6.ww;
        u_xlat10_1 = texture(_Texture_8_Albedo, u_xlat0.xy);
        u_xlat16_1 = u_xlat10_1 * _Texture_8_Color;
        u_xlat16_3 = u_xlat16_1 * u_xlat0.wwww + u_xlat16_3;
    //ENDIF
    }
    SV_Target0.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_6 = u_xlat16_2.w + u_xlat16_3.w;
    u_xlat16_6 = u_xlat16_6 * _Terrain_Smoothness;
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    SV_Target0.w = min(u_xlat16_6, 0.5);
    u_xlat0.xyz = vs_TEXCOORD3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
}
}
 Pass {
  Name "CTSTERRAIN"
  LOD 100
  Tags { "LIGHTMODE" = "DepthOnly" "QUEUE" = "AlphaTest+1" "RenderType" = "Opaque" "TerrainHeight" = "VertexFetch" }
  GpuProgramID 290816
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_SV_InstanceID0 = uint(0u);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_SV_InstanceID0 = uint(0u);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform highp sampler2D _HeightMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec2 u_xlat4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat4.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat0.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat4.xy = vec2(u_xlat4.x / _BlockParam1.z, u_xlat4.y / _BlockParam1.w);
    u_xlat4.x = textureLod(_HeightMap, u_xlat4.xy, 0.0).x;
    u_xlat1 = u_xlat4.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.yyyy + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
int u_xlati2;
vec2 u_xlat4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati2 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati2 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati2 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati2 / 2]._InstanceParam0.zz;
    u_xlat0.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat4.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat4.x = textureLod(_HeightMap, u_xlat4.xy, 0.0).x;
    u_xlat1 = u_xlat4.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat0.yyyy + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_SV_InstanceID0 = uint(0u);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es

vec4 ImmCB_0_0_0[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
uniform 	vec4 _InstanceParam0;
uniform 	vec4 _InstanceParam1;
uniform highp sampler2D _HeightMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec2 u_xlat4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlat0.x = dot(_InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xy = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xy = u_xlat0.xy + _InstanceParam0.xy;
    u_xlat4.xy = u_xlat0.xy * _InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xy * _InstanceParam0.zz;
    u_xlat0.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat4.xy = vec2(u_xlat4.x / _BlockParam1.z, u_xlat4.y / _BlockParam1.w);
    u_xlat4.x = textureLod(_HeightMap, u_xlat4.xy, 0.0).x;
    u_xlat1 = u_xlat4.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.yyyy + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

vec4 ImmCB_0_0_0[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4terrain_ObjectToWorld[4];
uniform 	vec4 _BlockParam0;
uniform 	vec4 _BlockParam1;
struct BuiltinTerrain_PropsArray_Type {
	vec4 _InstanceParam0;
	vec4 _InstanceParam1;
};
layout(std140) uniform UnityInstancing_BuiltinTerrain_Props {
	BuiltinTerrain_PropsArray_Type BuiltinTerrain_PropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _HeightMap;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
int u_xlati2;
vec2 u_xlat4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlatu0 = uint(in_TEXCOORD0.z);
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 1;
    u_xlat0.x = dot(BuiltinTerrain_PropsArray[u_xlati2 / 2]._InstanceParam1, ImmCB_0_0_0[int(u_xlatu0)]);
    u_xlat0.xz = in_TEXCOORD0.xy * u_xlat0.xx + in_POSITION0.xz;
    u_xlat0.xz = u_xlat0.xz + BuiltinTerrain_PropsArray[u_xlati2 / 2]._InstanceParam0.xy;
    u_xlat1.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati2 / 2]._InstanceParam0.zz + (-_BlockParam1.xy);
    u_xlat0.xy = u_xlat0.xz * BuiltinTerrain_PropsArray[u_xlati2 / 2]._InstanceParam0.zz;
    u_xlat0.xy = vec2(u_xlat0.x * _BlockParam0.z, u_xlat0.y * _BlockParam0.w);
    u_xlat4.xy = vec2(u_xlat1.x / _BlockParam1.z, u_xlat1.y / _BlockParam1.w);
    u_xlat4.x = textureLod(_HeightMap, u_xlat4.xy, 0.0).x;
    u_xlat1 = u_xlat4.xxxx * hlslcc_mtx4x4terrain_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4terrain_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4terrain_ObjectToWorld[2] * u_xlat0.yyyy + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4terrain_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_SV_InstanceID0 = uint(0u);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_USE_TERRAIN_VERTEXTEXTURE" }
""
}
}
}
}
}