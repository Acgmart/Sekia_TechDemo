//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/Particles/Decal_DetailAndDissolve" {
Properties {
[Toggle(ANNULAR_UV_ON)] _TurnOnAnnularUV ("Turn On Annular UV", Float) = 0
_MaxClampAngleCos ("Cos of the Max Clamp Angle (-1: not clamp)", Range(-1, 1)) = 0.5
_VerticalFadeExp ("Vertical Fade Exponent", Range(0, 100)) = 5
_VerticalFadeStart ("Vertical Fade Start Offset", Range(0.01, 1)) = 0.5
_ColorBrightness ("ColorBrightness", Float) = 1
_AlphaBrightness ("AlphaBrightness", Float) = 1
[Toggle(_2COLORLERPTOGGLE_ON)] _2ColorLerpToggle ("2ColorLerp[Toggle]", Float) = 0
_LerpColorDark ("LerpColorDark", Color) = (1,0.2689655,0,0)
_LerpColorLight ("LerpColorLight", Color) = (1,0.9326572,0.3897059,0)
_LerpAlphaScaler ("LerpAlphaScaler", Range(0, 20)) = 1
_BaseColor ("BaseColor", Color) = (1,1,1,0)
_BaseTex ("BaseTex", 2D) = "black" { }
[Enum(RGB,0,R,1,G,2,B,3,A,4,WhiteColor,5)] _BaseTexColorChannelSwitch ("BaseTexColorChannelSwitch", Float) = 0
_DetailColor ("DetailColor", Color) = (1,1,1,0)
_DetailTex ("DetailTex", 2D) = "white" { }
[Enum(R,0,G,1,B,2,A,3)] _DetailTexColorChannelSwitch ("DetailTexColorChannelSwitch", Float) = 0
[Enum(R,0,G,1,B,2,A,3)] _DetailTexAlphaChannelSwitch ("DetailTexAlphaChannelSwitch", Float) = 3
[MHYToggle] _DetailAnnularUVToggle ("DetailAnnularUVToggle", Float) = 0
_DetailTexAnnularUV_TilingU ("DetailTexAnnularUV_TilingU", Float) = 1
_MeshParticleColorArray ("MeshParticleColorArray", Vector) = (1,1,1,1)
_DetailTexAnnularUV_TilingV ("DetailTexAnnularUV_TilingV", Float) = 1
_DetailTexAnnularUV_OffsetU ("DetailTexAnnularUV_OffsetU", Float) = 0
_DetailTexAnnularUV_OffsetV ("DetailTexAnnularUV_OffsetV", Float) = 0
_DetailTex_Uspeed ("DetailTex_Uspeed", Float) = 0
_DetailTex_Vspeed ("DetailTex_Vspeed", Float) = 0
_MaskTex ("MaskTex", 2D) = "white" { }
[Enum(R,0,G,1,B,2,A,3)] _MaskTexChannelSwitch ("MaskTexChannelSwitch", Float) = 0
[MHYToggle] _MaskAnnularUVToggle ("MaskAnnularUVToggle", Float) = 0
_MaskTexAnnularUV_TilingU ("MaskTexAnnularUV_TilingU", Float) = 1
_MaskTexAnnularUV_TilingV ("MaskTexAnnularUV_TilingV", Float) = 1
_MaskTexAnnularUV_OffsetU ("MaskTexAnnularUV_OffsetU", Float) = 0
_MaskTexAnnularUV_OffsetV ("MaskTexAnnularUV_OffsetV", Float) = 0
_MaskTex_Uspeed ("MaskTex_Uspeed", Float) = 0
_MaskTex_Vspeed ("MaskTex_Vspeed", Float) = 0
[Toggle(_NOISETEXTOGGLEONDETAIL_ON)] _NoiseTexToggleOnDetail ("NoiseTex[Toggle](OnDetail)", Float) = 0
_NoiseTex ("NoiseTex", 2D) = "black" { }
[Enum(R,0,G,1,B,2,A,3)] _NoiseTexChannelSwitch ("NoiseTexChannelSwitch", Float) = 0
[MHYToggle] _NoiseAnnularUVToggle ("NoiseAnnularUVToggle", Float) = 0
_NoiseTexAnnularUV_TilingU ("NoiseTexAnnularUV_TilingU", Float) = 1
_NoiseTexAnnularUV_TilingV ("NoiseTexAnnularUV_TilingV", Float) = 1
_NoiseTexAnnularUV_OffsetU ("NoiseTexAnnularUV_OffsetU", Float) = 0
_NoiseTexAnnularUV_OffsetV ("NoiseTexAnnularUV_OffsetV", Float) = 0
_NoiseTex_Uspeed ("NoiseTex_Uspeed", Float) = 0.1
_NoiseTex_Vspeed ("NoiseTex_Vspeed", Float) = 0.1
_Noise_Brightness ("Noise_Brightness", Float) = 1
_Noise_Offset ("Noise_Offset", Float) = 0
[Enum(SoftDissolve,0,HardDissolve,1)] _AlphaModeToggle ("AlphaModeToggle", Float) = 0
_AlphaEdgeFade ("AlphaEdgeFade", Float) = 4
_DayColor ("DayColor", Color) = (1,1,1,1)
}
SubShader {
 Tags { "QUEUE" = "Transparent-3" "RenderType" = "DeferredDecal" }
 Pass {
  Tags { "QUEUE" = "Transparent-3" "RenderType" = "DeferredDecal" }
  ZTest GEqual
  ZWrite Off
  Cull Front
  GpuProgramID 43771
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
mediump vec3 u_xlat16_6;
bvec4 u_xlatb6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_12;
vec2 u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bvec2 u_xlatb16;
vec2 u_xlat18;
mediump float u_xlat16_20;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat2.x = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat2.x = u_xlat24 * u_xlat2.x + 0.180141002;
    u_xlat2.x = u_xlat24 * u_xlat2.x + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat2.x + 0.999866009;
    u_xlat2.x = u_xlat24 * u_xlat16.x;
    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat2.x : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16.x = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16.x ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16.x = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16.x = u_xlatb24 && u_xlatb16.x;
    u_xlat0.x = (u_xlatb16.x) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _Time.y * _DetailTex_Uspeed;
    u_xlat16.x = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat16.x;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat3.x = u_xlat16.x + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xz = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat18.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat16.x = _Time.y * _DetailTex_Vspeed;
    u_xlat16.x = u_xlat0.x * _DetailTexAnnularUV_TilingV + u_xlat16.x;
    u_xlat3.y = u_xlat16.x + _DetailTexAnnularUV_OffsetV;
    u_xlat16.xy = u_xlat18.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_4.x = _Time.y * _DetailTex_Uspeed + u_xlat16.x;
    u_xlat16_4.y = _Time.y * _DetailTex_Vspeed + u_xlat16.y;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_4.xy;
    u_xlat3 = texture(_DetailTex, u_xlat16.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb16.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb16.x) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * _DetailColor.xyz;
    u_xlat16.xy = u_xlat18.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18.xy = u_xlat18.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat18.xy;
    u_xlat1 = texture(_BaseTex, u_xlat16.xy);
    u_xlatb16.xy = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 5.0, 4.0, 5.0)).xy;
    u_xlat16_28 = (u_xlatb16.y) ? 1.0 : 0.0;
    u_xlat16_28 = (u_xlatb16.x) ? u_xlat1.w : u_xlat16_28;
    u_xlatb6 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_28 = (u_xlatb6.w) ? u_xlat1.z : u_xlat16_28;
    u_xlat16_28 = (u_xlatb6.z) ? u_xlat1.y : u_xlat16_28;
    u_xlat16_28 = (u_xlatb6.y) ? u_xlat1.x : u_xlat16_28;
    u_xlat16_7.xyz = (u_xlatb6.x) ? u_xlat1.xyz : vec3(u_xlat16_28);
    u_xlat16_6.xyz = u_xlat16_7.xyz * _BaseColor.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorBrightness);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vs_COLOR0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlat16.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat0.x * _MaskTexAnnularUV_TilingV + u_xlat16.x;
    u_xlat2.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_4.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_12;
    u_xlat16_20 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_4.x + (-u_xlat16_20);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16_20>=u_xlat16_4.x);
#else
    u_xlatb16.x = u_xlat16_20>=u_xlat16_4.x;
#endif
    u_xlati16 = (u_xlatb16.x) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb2.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb2.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_2COLORLERPTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec2 u_xlat16_4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
mediump vec2 u_xlat16_11;
vec2 u_xlat14;
lowp float u_xlat10_14;
int u_xlati14;
bvec2 u_xlatb14;
vec2 u_xlat16;
mediump float u_xlat16_18;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_14 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_1 = u_xlat10_14 * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat14.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat14.x = float(1.0) / u_xlat14.x;
    u_xlat21 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat14.x = u_xlat14.x * u_xlat21;
    u_xlat21 = u_xlat14.x * u_xlat14.x;
    u_xlat2.x = u_xlat21 * 0.0208350997 + -0.0851330012;
    u_xlat2.x = u_xlat21 * u_xlat2.x + 0.180141002;
    u_xlat2.x = u_xlat21 * u_xlat2.x + -0.330299497;
    u_xlat21 = u_xlat21 * u_xlat2.x + 0.999866009;
    u_xlat2.x = u_xlat21 * u_xlat14.x;
    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat2.x : float(0.0);
    u_xlat0.x = u_xlat14.x * u_xlat21 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb14.x = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat14.x = u_xlatb14.x ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14.x = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlat21 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
    u_xlatb14.x = u_xlatb21 && u_xlatb14.x;
    u_xlat0.x = (u_xlatb14.x) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat14.x = _Time.y * _DetailTex_Uspeed;
    u_xlat14.x = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat14.x;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat3.x = u_xlat14.x + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xz = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat16.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat14.x = _Time.y * _DetailTex_Vspeed;
    u_xlat14.x = u_xlat0.x * _DetailTexAnnularUV_TilingV + u_xlat14.x;
    u_xlat3.y = u_xlat14.x + _DetailTexAnnularUV_OffsetV;
    u_xlat14.xy = u_xlat16.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_4.x = _Time.y * _DetailTex_Uspeed + u_xlat14.x;
    u_xlat16_4.y = _Time.y * _DetailTex_Vspeed + u_xlat14.y;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat14.xy = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_4.xy;
    u_xlat3 = texture(_DetailTex, u_xlat14.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb14.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb14.x) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat14.xy = u_xlat16.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat16.xy = u_xlat16.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_11.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat16.xy;
    u_xlat1 = texture(_BaseTex, u_xlat14.xy);
    u_xlatb14.xy = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 5.0, 4.0, 5.0)).xy;
    u_xlat16_25 = (u_xlatb14.y) ? 1.0 : 0.0;
    u_xlat16_25 = (u_xlatb14.x) ? u_xlat1.w : u_xlat16_25;
    u_xlatb5 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_25 = (u_xlatb5.w) ? u_xlat1.z : u_xlat16_25;
    u_xlat16_25 = (u_xlatb5.z) ? u_xlat1.y : u_xlat16_25;
    u_xlatb14.x = u_xlatb5.x || u_xlatb5.y;
    u_xlat16_25 = (u_xlatb14.x) ? u_xlat1.x : u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = _DetailColor.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorBrightness);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vs_COLOR0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    u_xlat14.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat0.x * _MaskTexAnnularUV_TilingV + u_xlat14.x;
    u_xlat2.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_11.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_4.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_11.x = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_11.x = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_11.x;
    u_xlat16_11.x = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_11.x;
    u_xlat16_11.x = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_11.x;
    u_xlat16_18 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_11.x * u_xlat16_4.x + (-u_xlat16_18);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat16_18>=u_xlat16_4.x);
#else
    u_xlatb14.x = u_xlat16_18>=u_xlat16_4.x;
#endif
    u_xlati14 = (u_xlatb14.x) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb2.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb2.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
mediump vec3 u_xlat16_6;
bvec4 u_xlatb6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_12;
vec2 u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
vec2 u_xlat18;
mediump float u_xlat16_20;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat2.x = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat2.x = u_xlat24 * u_xlat2.x + 0.180141002;
    u_xlat2.x = u_xlat24 * u_xlat2.x + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat2.x + 0.999866009;
    u_xlat2.x = u_xlat24 * u_xlat16.x;
    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat2.x : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16 = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16 = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat16.x;
    u_xlat16.xy = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat18.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat16.x = dot(u_xlat16.xy, u_xlat16.xy);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlat3.xy = u_xlat18.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_4.x = _Time.y * _NoiseTex_Uspeed + u_xlat3.x;
    u_xlat16_4.y = _Time.y * _NoiseTex_Vspeed + u_xlat3.y;
    u_xlatb1 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.xy = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_4.xy;
    u_xlat3 = texture(_NoiseTex, u_xlat2.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat3.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat3.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlat0.xw = u_xlat18.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_5.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_5.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_5.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat16_4.xx + u_xlat0.xw;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * _DetailColor.xyz;
    u_xlat0.xw = u_xlat18.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18.xy = u_xlat18.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat18.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xw);
    u_xlatb0.xw = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 0.0, 5.0)).xw;
    u_xlat16_28 = (u_xlatb0.w) ? 1.0 : 0.0;
    u_xlat16_28 = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_28;
    u_xlatb6 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_28 = (u_xlatb6.w) ? u_xlat1.z : u_xlat16_28;
    u_xlat16_28 = (u_xlatb6.z) ? u_xlat1.y : u_xlat16_28;
    u_xlat16_28 = (u_xlatb6.y) ? u_xlat1.x : u_xlat16_28;
    u_xlat16_7.xyz = (u_xlatb6.x) ? u_xlat1.xyz : vec3(u_xlat16_28);
    u_xlat16_6.xyz = u_xlat16_7.xyz * _BaseColor.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorBrightness);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vs_COLOR0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat2.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_4.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_12;
    u_xlat16_20 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_4.x + (-u_xlat16_20);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_20>=u_xlat16_4.x);
#else
    u_xlatb16 = u_xlat16_20>=u_xlat16_4.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb2.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb2.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec2 u_xlat16_4;
mediump vec2 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec2 u_xlat16_12;
vec2 u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
vec2 u_xlat18;
mediump float u_xlat16_20;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat2.x = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat2.x = u_xlat24 * u_xlat2.x + 0.180141002;
    u_xlat2.x = u_xlat24 * u_xlat2.x + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat2.x + 0.999866009;
    u_xlat2.x = u_xlat24 * u_xlat16.x;
    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat2.x : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16 = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16 = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat16.x;
    u_xlat16.xy = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat18.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat16.x = dot(u_xlat16.xy, u_xlat16.xy);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlat3.xy = u_xlat18.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_4.x = _Time.y * _NoiseTex_Uspeed + u_xlat3.x;
    u_xlat16_4.y = _Time.y * _NoiseTex_Vspeed + u_xlat3.y;
    u_xlatb1 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.xy = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_4.xy;
    u_xlat3 = texture(_NoiseTex, u_xlat2.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat3.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat3.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlat0.xw = u_xlat18.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_5.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_5.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_5.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat16_4.xx + u_xlat0.xw;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat0.xw = u_xlat18.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18.xy = u_xlat18.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_12.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat18.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xw);
    u_xlatb0.xw = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 0.0, 5.0)).xw;
    u_xlat16_28 = (u_xlatb0.w) ? 1.0 : 0.0;
    u_xlat16_28 = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_28;
    u_xlatb5 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_28 = (u_xlatb5.w) ? u_xlat1.z : u_xlat16_28;
    u_xlat16_28 = (u_xlatb5.z) ? u_xlat1.y : u_xlat16_28;
    u_xlatb0.x = u_xlatb5.x || u_xlatb5.y;
    u_xlat16_28 = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + _LerpColorDark.xyz;
    u_xlat16_7.xyz = _DetailColor.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_ColorBrightness);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat2.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_12.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_4.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12.x = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_12.x = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_12.x;
    u_xlat16_12.x = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_12.x;
    u_xlat16_12.x = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_12.x;
    u_xlat16_20 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12.x * u_xlat16_4.x + (-u_xlat16_20);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_20>=u_xlat16_4.x);
#else
    u_xlatb16 = u_xlat16_20>=u_xlat16_4.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb2.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb2.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
mediump vec3 u_xlat16_6;
bvec4 u_xlatb6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_12;
vec2 u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bvec2 u_xlatb16;
vec2 u_xlat18;
mediump float u_xlat16_20;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat2.x = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat2.x = u_xlat24 * u_xlat2.x + 0.180141002;
    u_xlat2.x = u_xlat24 * u_xlat2.x + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat2.x + 0.999866009;
    u_xlat2.x = u_xlat24 * u_xlat16.x;
    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat2.x : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16.x = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16.x ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16.x = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16.x = u_xlatb24 && u_xlatb16.x;
    u_xlat0.x = (u_xlatb16.x) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _Time.y * _DetailTex_Uspeed;
    u_xlat16.x = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat16.x;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat3.x = u_xlat16.x + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xz = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat18.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat16.x = _Time.y * _DetailTex_Vspeed;
    u_xlat16.x = u_xlat0.x * _DetailTexAnnularUV_TilingV + u_xlat16.x;
    u_xlat3.y = u_xlat16.x + _DetailTexAnnularUV_OffsetV;
    u_xlat16.xy = u_xlat18.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_4.x = _Time.y * _DetailTex_Uspeed + u_xlat16.x;
    u_xlat16_4.y = _Time.y * _DetailTex_Vspeed + u_xlat16.y;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_4.xy;
    u_xlat3 = texture(_DetailTex, u_xlat16.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb16.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb16.x) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * _DetailColor.xyz;
    u_xlat16.xy = u_xlat18.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18.xy = u_xlat18.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat18.xy;
    u_xlat1 = texture(_BaseTex, u_xlat16.xy);
    u_xlatb16.xy = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 5.0, 4.0, 5.0)).xy;
    u_xlat16_28 = (u_xlatb16.y) ? 1.0 : 0.0;
    u_xlat16_28 = (u_xlatb16.x) ? u_xlat1.w : u_xlat16_28;
    u_xlatb6 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_28 = (u_xlatb6.w) ? u_xlat1.z : u_xlat16_28;
    u_xlat16_28 = (u_xlatb6.z) ? u_xlat1.y : u_xlat16_28;
    u_xlat16_28 = (u_xlatb6.y) ? u_xlat1.x : u_xlat16_28;
    u_xlat16_7.xyz = (u_xlatb6.x) ? u_xlat1.xyz : vec3(u_xlat16_28);
    u_xlat16_6.xyz = u_xlat16_7.xyz * _BaseColor.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorBrightness);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vs_COLOR0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlat16.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat0.x * _MaskTexAnnularUV_TilingV + u_xlat16.x;
    u_xlat2.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_4.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_12;
    u_xlat16_20 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_4.x + (-u_xlat16_20);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16_20>=u_xlat16_4.x);
#else
    u_xlatb16.x = u_xlat16_20>=u_xlat16_4.x;
#endif
    u_xlati16 = (u_xlatb16.x) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb2.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb2.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_2COLORLERPTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec2 u_xlat16_4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
mediump vec2 u_xlat16_11;
vec2 u_xlat14;
lowp float u_xlat10_14;
int u_xlati14;
bvec2 u_xlatb14;
vec2 u_xlat16;
mediump float u_xlat16_18;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_14 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_1 = u_xlat10_14 * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat14.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat14.x = float(1.0) / u_xlat14.x;
    u_xlat21 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat14.x = u_xlat14.x * u_xlat21;
    u_xlat21 = u_xlat14.x * u_xlat14.x;
    u_xlat2.x = u_xlat21 * 0.0208350997 + -0.0851330012;
    u_xlat2.x = u_xlat21 * u_xlat2.x + 0.180141002;
    u_xlat2.x = u_xlat21 * u_xlat2.x + -0.330299497;
    u_xlat21 = u_xlat21 * u_xlat2.x + 0.999866009;
    u_xlat2.x = u_xlat21 * u_xlat14.x;
    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat2.x : float(0.0);
    u_xlat0.x = u_xlat14.x * u_xlat21 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb14.x = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat14.x = u_xlatb14.x ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14.x = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlat21 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
    u_xlatb14.x = u_xlatb21 && u_xlatb14.x;
    u_xlat0.x = (u_xlatb14.x) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat14.x = _Time.y * _DetailTex_Uspeed;
    u_xlat14.x = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat14.x;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat3.x = u_xlat14.x + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xz = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat16.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat14.x = _Time.y * _DetailTex_Vspeed;
    u_xlat14.x = u_xlat0.x * _DetailTexAnnularUV_TilingV + u_xlat14.x;
    u_xlat3.y = u_xlat14.x + _DetailTexAnnularUV_OffsetV;
    u_xlat14.xy = u_xlat16.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_4.x = _Time.y * _DetailTex_Uspeed + u_xlat14.x;
    u_xlat16_4.y = _Time.y * _DetailTex_Vspeed + u_xlat14.y;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat14.xy = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_4.xy;
    u_xlat3 = texture(_DetailTex, u_xlat14.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb14.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb14.x) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat14.xy = u_xlat16.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat16.xy = u_xlat16.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_11.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat16.xy;
    u_xlat1 = texture(_BaseTex, u_xlat14.xy);
    u_xlatb14.xy = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 5.0, 4.0, 5.0)).xy;
    u_xlat16_25 = (u_xlatb14.y) ? 1.0 : 0.0;
    u_xlat16_25 = (u_xlatb14.x) ? u_xlat1.w : u_xlat16_25;
    u_xlatb5 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_25 = (u_xlatb5.w) ? u_xlat1.z : u_xlat16_25;
    u_xlat16_25 = (u_xlatb5.z) ? u_xlat1.y : u_xlat16_25;
    u_xlatb14.x = u_xlatb5.x || u_xlatb5.y;
    u_xlat16_25 = (u_xlatb14.x) ? u_xlat1.x : u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = _DetailColor.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorBrightness);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vs_COLOR0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    u_xlat14.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat0.x * _MaskTexAnnularUV_TilingV + u_xlat14.x;
    u_xlat2.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_11.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_4.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_11.x = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_11.x = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_11.x;
    u_xlat16_11.x = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_11.x;
    u_xlat16_11.x = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_11.x;
    u_xlat16_18 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_11.x * u_xlat16_4.x + (-u_xlat16_18);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat16_18>=u_xlat16_4.x);
#else
    u_xlatb14.x = u_xlat16_18>=u_xlat16_4.x;
#endif
    u_xlati14 = (u_xlatb14.x) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb2.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb2.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
mediump vec3 u_xlat16_6;
bvec4 u_xlatb6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_12;
vec2 u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
vec2 u_xlat18;
mediump float u_xlat16_20;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat2.x = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat2.x = u_xlat24 * u_xlat2.x + 0.180141002;
    u_xlat2.x = u_xlat24 * u_xlat2.x + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat2.x + 0.999866009;
    u_xlat2.x = u_xlat24 * u_xlat16.x;
    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat2.x : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16 = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16 = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat16.x;
    u_xlat16.xy = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat18.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat16.x = dot(u_xlat16.xy, u_xlat16.xy);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlat3.xy = u_xlat18.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_4.x = _Time.y * _NoiseTex_Uspeed + u_xlat3.x;
    u_xlat16_4.y = _Time.y * _NoiseTex_Vspeed + u_xlat3.y;
    u_xlatb1 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.xy = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_4.xy;
    u_xlat3 = texture(_NoiseTex, u_xlat2.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat3.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat3.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlat0.xw = u_xlat18.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_5.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_5.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_5.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat16_4.xx + u_xlat0.xw;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * _DetailColor.xyz;
    u_xlat0.xw = u_xlat18.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18.xy = u_xlat18.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat18.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xw);
    u_xlatb0.xw = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 0.0, 5.0)).xw;
    u_xlat16_28 = (u_xlatb0.w) ? 1.0 : 0.0;
    u_xlat16_28 = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_28;
    u_xlatb6 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_28 = (u_xlatb6.w) ? u_xlat1.z : u_xlat16_28;
    u_xlat16_28 = (u_xlatb6.z) ? u_xlat1.y : u_xlat16_28;
    u_xlat16_28 = (u_xlatb6.y) ? u_xlat1.x : u_xlat16_28;
    u_xlat16_7.xyz = (u_xlatb6.x) ? u_xlat1.xyz : vec3(u_xlat16_28);
    u_xlat16_6.xyz = u_xlat16_7.xyz * _BaseColor.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorBrightness);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vs_COLOR0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat2.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_4.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_12;
    u_xlat16_20 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_4.x + (-u_xlat16_20);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_20>=u_xlat16_4.x);
#else
    u_xlatb16 = u_xlat16_20>=u_xlat16_4.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb2.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb2.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec2 u_xlat16_4;
mediump vec2 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec2 u_xlat16_12;
vec2 u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
vec2 u_xlat18;
mediump float u_xlat16_20;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat2.x = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat2.x = u_xlat24 * u_xlat2.x + 0.180141002;
    u_xlat2.x = u_xlat24 * u_xlat2.x + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat2.x + 0.999866009;
    u_xlat2.x = u_xlat24 * u_xlat16.x;
    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat2.x : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16 = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16 = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat16.x;
    u_xlat16.xy = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat18.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat16.x = dot(u_xlat16.xy, u_xlat16.xy);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlat3.xy = u_xlat18.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_4.x = _Time.y * _NoiseTex_Uspeed + u_xlat3.x;
    u_xlat16_4.y = _Time.y * _NoiseTex_Vspeed + u_xlat3.y;
    u_xlatb1 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.xy = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_4.xy;
    u_xlat3 = texture(_NoiseTex, u_xlat2.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat3.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat3.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlat0.xw = u_xlat18.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_5.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_5.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_5.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat16_4.xx + u_xlat0.xw;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat0.xw = u_xlat18.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18.xy = u_xlat18.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_12.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat18.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xw);
    u_xlatb0.xw = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 0.0, 5.0)).xw;
    u_xlat16_28 = (u_xlatb0.w) ? 1.0 : 0.0;
    u_xlat16_28 = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_28;
    u_xlatb5 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_28 = (u_xlatb5.w) ? u_xlat1.z : u_xlat16_28;
    u_xlat16_28 = (u_xlatb5.z) ? u_xlat1.y : u_xlat16_28;
    u_xlatb0.x = u_xlatb5.x || u_xlatb5.y;
    u_xlat16_28 = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + _LerpColorDark.xyz;
    u_xlat16_7.xyz = _DetailColor.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_ColorBrightness);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat2.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_12.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_4.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12.x = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_12.x = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_12.x;
    u_xlat16_12.x = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_12.x;
    u_xlat16_12.x = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_12.x;
    u_xlat16_20 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12.x * u_xlat16_4.x + (-u_xlat16_20);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_20>=u_xlat16_4.x);
#else
    u_xlatb16 = u_xlat16_20>=u_xlat16_4.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb2.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb2.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
vec4 u_xlat3;
vec2 u_xlat4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat18;
int u_xlati18;
bvec2 u_xlatb18;
mediump float u_xlat16_24;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_33;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat9.xy = floor(u_xlat18.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat9.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat9.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat9.x * 2.0 + -1.0;
    u_xlat9.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<0.0);
#else
    u_xlatb9 = u_xlat9.x<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat9.xyz = u_xlat9.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat9.x = u_xlat0.y + u_xlat0.y;
    u_xlat9.x = u_xlat9.x / _VerticalFadeStart;
    u_xlat9.x = max(u_xlat9.x, 0.00999999978);
    u_xlat9.x = log2(u_xlat9.x);
    u_xlat9.x = u_xlat9.x * _VerticalFadeExp;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = min(u_xlat9.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat18.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat18.x = float(1.0) / u_xlat18.x;
    u_xlat27 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat18.x = u_xlat18.x * u_xlat27;
    u_xlat27 = u_xlat18.x * u_xlat18.x;
    u_xlat10 = u_xlat27 * 0.0208350997 + -0.0851330012;
    u_xlat10 = u_xlat27 * u_xlat10 + 0.180141002;
    u_xlat10 = u_xlat27 * u_xlat10 + -0.330299497;
    u_xlat27 = u_xlat27 * u_xlat10 + 0.999866009;
    u_xlat10 = u_xlat27 * u_xlat18.x;
    u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat10 : float(0.0);
    u_xlat0.x = u_xlat18.x * u_xlat27 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb18.x = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat18.x = u_xlatb18.x ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat18.x + u_xlat0.x;
    u_xlat18.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat18.x<(-u_xlat18.x));
#else
    u_xlatb18.x = u_xlat18.x<(-u_xlat18.x);
#endif
    u_xlat27 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat27>=(-u_xlat27));
#else
    u_xlatb27 = u_xlat27>=(-u_xlat27);
#endif
    u_xlatb18.x = u_xlatb27 && u_xlatb18.x;
    u_xlat0.x = (u_xlatb18.x) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat18.x = _Time.y * _DetailTex_Uspeed;
    u_xlat18.x = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat18.x;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat18.x + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xz = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat18.x = _Time.y * _DetailTex_Vspeed;
    u_xlat18.x = u_xlat0.x * _DetailTexAnnularUV_TilingV + u_xlat18.x;
    u_xlat4.y = u_xlat18.x + _DetailTexAnnularUV_OffsetV;
    u_xlat18.xy = u_xlat1.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_2.x = _Time.y * _DetailTex_Uspeed + u_xlat18.x;
    u_xlat16_2.y = _Time.y * _DetailTex_Vspeed + u_xlat18.y;
    u_xlatb5 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat18.xy = (u_xlatb5.x) ? u_xlat4.xy : u_xlat16_2.xy;
    u_xlat2 = texture(_DetailTex, u_xlat18.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb18.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_6.x = (u_xlatb18.x) ? u_xlat2.w : 0.0;
    u_xlat16_6.x = (u_xlatb5.w) ? u_xlat2.z : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb5.z) ? u_xlat2.y : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb5.y) ? u_xlat2.x : u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_6.xxx * _DetailColor.xyz;
    u_xlat18.xy = u_xlat1.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.xy = u_xlat1.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_7.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat18.xy);
    u_xlatb18.xy = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 5.0, 4.0, 5.0)).xy;
    u_xlat16_33 = (u_xlatb18.y) ? 1.0 : 0.0;
    u_xlat16_33 = (u_xlatb18.x) ? u_xlat1.w : u_xlat16_33;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_33 = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_33;
    u_xlat16_33 = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_33;
    u_xlat16_33 = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_33;
    u_xlat16_8.xyz = (u_xlatb4.x) ? u_xlat1.xyz : vec3(u_xlat16_33);
    u_xlat16_1.xyz = u_xlat16_8.xyz * _BaseColor.xyz + u_xlat16_6.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorBrightness);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz;
    u_xlat18.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat0.x * _MaskTexAnnularUV_TilingV + u_xlat18.x;
    u_xlat3.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_7.xy;
    u_xlat3 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_6.x = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_6.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_6.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_15 = (u_xlatb1.w) ? u_xlat2.w : 0.0;
    u_xlat16_15 = (u_xlatb1.z) ? u_xlat2.z : u_xlat16_15;
    u_xlat16_15 = (u_xlatb1.y) ? u_xlat2.y : u_xlat16_15;
    u_xlat16_15 = (u_xlatb1.x) ? u_xlat2.x : u_xlat16_15;
    u_xlat16_24 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_15 * u_xlat16_6.x + (-u_xlat16_24);
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat16_24>=u_xlat16_6.x);
#else
    u_xlatb18.x = u_xlat16_24>=u_xlat16_6.x;
#endif
    u_xlati18 = (u_xlatb18.x) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat18.x = u_xlatb1.y ? intBitsToFloat(u_xlati18) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat18.x;
    u_xlat16_6.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat9.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_2COLORLERPTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
vec4 u_xlat3;
vec2 u_xlat4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat9;
mediump vec2 u_xlat16_14;
vec2 u_xlat16;
int u_xlati16;
bvec2 u_xlatb16;
mediump float u_xlat16_22;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_30;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat8.xy = floor(u_xlat16.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat8.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat8.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat8.x * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat9 = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat9 = u_xlat24 * u_xlat9 + 0.180141002;
    u_xlat9 = u_xlat24 * u_xlat9 + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat9 + 0.999866009;
    u_xlat9 = u_xlat24 * u_xlat16.x;
    u_xlat9 = u_xlat9 * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat9 : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16.x = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16.x ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16.x = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16.x = u_xlatb24 && u_xlatb16.x;
    u_xlat0.x = (u_xlatb16.x) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _Time.y * _DetailTex_Uspeed;
    u_xlat16.x = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat16.x;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat16.x + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xz = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat16.x = _Time.y * _DetailTex_Vspeed;
    u_xlat16.x = u_xlat0.x * _DetailTexAnnularUV_TilingV + u_xlat16.x;
    u_xlat4.y = u_xlat16.x + _DetailTexAnnularUV_OffsetV;
    u_xlat16.xy = u_xlat1.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_2.x = _Time.y * _DetailTex_Uspeed + u_xlat16.x;
    u_xlat16_2.y = _Time.y * _DetailTex_Vspeed + u_xlat16.y;
    u_xlatb5 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = (u_xlatb5.x) ? u_xlat4.xy : u_xlat16_2.xy;
    u_xlat2 = texture(_DetailTex, u_xlat16.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb16.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_6 = (u_xlatb16.x) ? u_xlat2.w : 0.0;
    u_xlat16_6 = (u_xlatb5.w) ? u_xlat2.z : u_xlat16_6;
    u_xlat16_6 = (u_xlatb5.z) ? u_xlat2.y : u_xlat16_6;
    u_xlat16_6 = (u_xlatb5.y) ? u_xlat2.x : u_xlat16_6;
    u_xlat16.xy = u_xlat1.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.xy = u_xlat1.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_14.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat16.xy);
    u_xlatb16.xy = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 5.0, 4.0, 5.0)).xy;
    u_xlat16_30 = (u_xlatb16.y) ? 1.0 : 0.0;
    u_xlat16_30 = (u_xlatb16.x) ? u_xlat1.w : u_xlat16_30;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_30 = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_30;
    u_xlat16_30 = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_30;
    u_xlatb16.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_30 = (u_xlatb16.x) ? u_xlat1.x : u_xlat16_30;
    u_xlat16_30 = u_xlat16_30 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_7.xyz + _LerpColorDark.xyz;
    u_xlat16_1.xyz = _DetailColor.xyz * vec3(u_xlat16_6) + u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorBrightness);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz;
    u_xlat16.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat0.x * _MaskTexAnnularUV_TilingV + u_xlat16.x;
    u_xlat3.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_14.xy;
    u_xlat3 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_6 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_6 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_6;
    u_xlat16_6 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_6;
    u_xlat16_6 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_6;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_14.x = (u_xlatb1.w) ? u_xlat2.w : 0.0;
    u_xlat16_14.x = (u_xlatb1.z) ? u_xlat2.z : u_xlat16_14.x;
    u_xlat16_14.x = (u_xlatb1.y) ? u_xlat2.y : u_xlat16_14.x;
    u_xlat16_14.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat16_14.x;
    u_xlat16_22 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_14.x * u_xlat16_6 + (-u_xlat16_22);
    u_xlat16_6 = u_xlat16_6 * u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16_22>=u_xlat16_6);
#else
    u_xlatb16.x = u_xlat16_22>=u_xlat16_6;
#endif
    u_xlati16 = (u_xlatb16.x) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb1.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_6 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bvec4 u_xlatb2;
vec2 u_xlat3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat9;
mediump float u_xlat16_13;
vec2 u_xlat16;
int u_xlati16;
bool u_xlatb16;
vec2 u_xlat17;
mediump float u_xlat16_21;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat8.xy = floor(u_xlat16.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat8.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat8.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat8.x * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat9 = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat9 = u_xlat24 * u_xlat9 + 0.180141002;
    u_xlat9 = u_xlat24 * u_xlat9 + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat9 + 0.999866009;
    u_xlat9 = u_xlat24 * u_xlat16.x;
    u_xlat9 = u_xlat9 * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat9 : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16 = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16 = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat16.x;
    u_xlat16.xy = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat16.x = dot(u_xlat16.xy, u_xlat16.xy);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlat17.xy = u_xlat1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_2.x = _Time.y * _NoiseTex_Uspeed + u_xlat17.x;
    u_xlat16_2.y = _Time.y * _NoiseTex_Vspeed + u_xlat17.y;
    u_xlatb4 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat17.xy = (u_xlatb4.x) ? u_xlat3.xy : u_xlat16_2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat17.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb24) ? u_xlat2.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat2.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat2.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat2.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlat0.xw = u_xlat1.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlatb2 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb2.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat16_5.xx + u_xlat0.xw;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _DetailColor.xyz;
    u_xlat0.xw = u_xlat1.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.xy = u_xlat1.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xw);
    u_xlatb0.xw = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 0.0, 5.0)).xw;
    u_xlat16_29 = (u_xlatb0.w) ? 1.0 : 0.0;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_29;
    u_xlatb2 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_29 = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_29;
    u_xlat16_29 = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_29;
    u_xlat16_29 = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_29;
    u_xlat16_7.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat16_29);
    u_xlat16_1.xyz = u_xlat16_7.xyz * _BaseColor.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorBrightness);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat3.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_6.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_5.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_13 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_13 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_13;
    u_xlat16_21 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_13 * u_xlat16_5.x + (-u_xlat16_21);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_21>=u_xlat16_5.x);
#else
    u_xlatb16 = u_xlat16_21>=u_xlat16_5.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb1.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bvec4 u_xlatb2;
vec2 u_xlat3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
mediump vec2 u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat14.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat14.x = float(1.0) / u_xlat14.x;
    u_xlat21 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat14.x = u_xlat14.x * u_xlat21;
    u_xlat21 = u_xlat14.x * u_xlat14.x;
    u_xlat8 = u_xlat21 * 0.0208350997 + -0.0851330012;
    u_xlat8 = u_xlat21 * u_xlat8 + 0.180141002;
    u_xlat8 = u_xlat21 * u_xlat8 + -0.330299497;
    u_xlat21 = u_xlat21 * u_xlat8 + 0.999866009;
    u_xlat8 = u_xlat21 * u_xlat14.x;
    u_xlat8 = u_xlat8 * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat8 : float(0.0);
    u_xlat0.x = u_xlat14.x * u_xlat21 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb14 = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlat21 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat14.x = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat14.x;
    u_xlat14.xy = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat14.x = dot(u_xlat14.xy, u_xlat14.xy);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat21 = u_xlat14.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_2.x = _Time.y * _NoiseTex_Uspeed + u_xlat15.x;
    u_xlat16_2.y = _Time.y * _NoiseTex_Vspeed + u_xlat15.y;
    u_xlatb4 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15.xy = (u_xlatb4.x) ? u_xlat3.xy : u_xlat16_2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat15.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_5 = (u_xlatb21) ? u_xlat2.w : 0.0;
    u_xlat16_5 = (u_xlatb4.w) ? u_xlat2.z : u_xlat16_5;
    u_xlat16_5 = (u_xlatb4.z) ? u_xlat2.y : u_xlat16_5;
    u_xlat16_5 = (u_xlatb4.y) ? u_xlat2.x : u_xlat16_5;
    u_xlat16_5 = u_xlat16_5 + _Noise_Offset;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlat0.xw = u_xlat1.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlatb2 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb2.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_5) + u_xlat0.xw;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_5 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_5 = (u_xlatb2.w) ? u_xlat4.z : u_xlat16_5;
    u_xlat16_5 = (u_xlatb2.z) ? u_xlat4.y : u_xlat16_5;
    u_xlat16_5 = (u_xlatb2.y) ? u_xlat4.x : u_xlat16_5;
    u_xlat0.xw = u_xlat1.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.xy = u_xlat1.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_12.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xw);
    u_xlatb0.xw = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 0.0, 5.0)).xw;
    u_xlat16_26 = (u_xlatb0.w) ? 1.0 : 0.0;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_26;
    u_xlatb2 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_26 = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_26;
    u_xlatb0.x = u_xlatb2.x || u_xlatb2.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_26;
    u_xlat16_26 = u_xlat16_26 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + _LerpColorDark.xyz;
    u_xlat16_1.xyz = _DetailColor.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorBrightness);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat3.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_12.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5 = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_5 = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_5;
    u_xlat16_5 = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_5;
    u_xlat16_5 = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_5;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12.x = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12.x = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12.x;
    u_xlat16_12.x = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12.x;
    u_xlat16_12.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12.x;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12.x * u_xlat16_5 + (-u_xlat16_19);
    u_xlat16_5 = u_xlat16_5 * u_xlat16_12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
vec4 u_xlat3;
vec2 u_xlat4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat18;
int u_xlati18;
bvec2 u_xlatb18;
mediump float u_xlat16_24;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_33;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat9.xy = floor(u_xlat18.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat9.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat9.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat9.x * 2.0 + -1.0;
    u_xlat9.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<0.0);
#else
    u_xlatb9 = u_xlat9.x<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat9.xyz = u_xlat9.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat9.x = u_xlat0.y + u_xlat0.y;
    u_xlat9.x = u_xlat9.x / _VerticalFadeStart;
    u_xlat9.x = max(u_xlat9.x, 0.00999999978);
    u_xlat9.x = log2(u_xlat9.x);
    u_xlat9.x = u_xlat9.x * _VerticalFadeExp;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = min(u_xlat9.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat18.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat18.x = float(1.0) / u_xlat18.x;
    u_xlat27 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat18.x = u_xlat18.x * u_xlat27;
    u_xlat27 = u_xlat18.x * u_xlat18.x;
    u_xlat10 = u_xlat27 * 0.0208350997 + -0.0851330012;
    u_xlat10 = u_xlat27 * u_xlat10 + 0.180141002;
    u_xlat10 = u_xlat27 * u_xlat10 + -0.330299497;
    u_xlat27 = u_xlat27 * u_xlat10 + 0.999866009;
    u_xlat10 = u_xlat27 * u_xlat18.x;
    u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat10 : float(0.0);
    u_xlat0.x = u_xlat18.x * u_xlat27 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb18.x = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat18.x = u_xlatb18.x ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat18.x + u_xlat0.x;
    u_xlat18.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat18.x<(-u_xlat18.x));
#else
    u_xlatb18.x = u_xlat18.x<(-u_xlat18.x);
#endif
    u_xlat27 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat27>=(-u_xlat27));
#else
    u_xlatb27 = u_xlat27>=(-u_xlat27);
#endif
    u_xlatb18.x = u_xlatb27 && u_xlatb18.x;
    u_xlat0.x = (u_xlatb18.x) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat18.x = _Time.y * _DetailTex_Uspeed;
    u_xlat18.x = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat18.x;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat18.x + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xz = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat18.x = _Time.y * _DetailTex_Vspeed;
    u_xlat18.x = u_xlat0.x * _DetailTexAnnularUV_TilingV + u_xlat18.x;
    u_xlat4.y = u_xlat18.x + _DetailTexAnnularUV_OffsetV;
    u_xlat18.xy = u_xlat1.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_2.x = _Time.y * _DetailTex_Uspeed + u_xlat18.x;
    u_xlat16_2.y = _Time.y * _DetailTex_Vspeed + u_xlat18.y;
    u_xlatb5 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat18.xy = (u_xlatb5.x) ? u_xlat4.xy : u_xlat16_2.xy;
    u_xlat2 = texture(_DetailTex, u_xlat18.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb18.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_6.x = (u_xlatb18.x) ? u_xlat2.w : 0.0;
    u_xlat16_6.x = (u_xlatb5.w) ? u_xlat2.z : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb5.z) ? u_xlat2.y : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb5.y) ? u_xlat2.x : u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_6.xxx * _DetailColor.xyz;
    u_xlat18.xy = u_xlat1.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.xy = u_xlat1.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_7.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat18.xy);
    u_xlatb18.xy = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 5.0, 4.0, 5.0)).xy;
    u_xlat16_33 = (u_xlatb18.y) ? 1.0 : 0.0;
    u_xlat16_33 = (u_xlatb18.x) ? u_xlat1.w : u_xlat16_33;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_33 = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_33;
    u_xlat16_33 = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_33;
    u_xlat16_33 = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_33;
    u_xlat16_8.xyz = (u_xlatb4.x) ? u_xlat1.xyz : vec3(u_xlat16_33);
    u_xlat16_1.xyz = u_xlat16_8.xyz * _BaseColor.xyz + u_xlat16_6.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorBrightness);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz;
    u_xlat18.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat0.x * _MaskTexAnnularUV_TilingV + u_xlat18.x;
    u_xlat3.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_7.xy;
    u_xlat3 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_6.x = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_6.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_6.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_15 = (u_xlatb1.w) ? u_xlat2.w : 0.0;
    u_xlat16_15 = (u_xlatb1.z) ? u_xlat2.z : u_xlat16_15;
    u_xlat16_15 = (u_xlatb1.y) ? u_xlat2.y : u_xlat16_15;
    u_xlat16_15 = (u_xlatb1.x) ? u_xlat2.x : u_xlat16_15;
    u_xlat16_24 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_15 * u_xlat16_6.x + (-u_xlat16_24);
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat16_24>=u_xlat16_6.x);
#else
    u_xlatb18.x = u_xlat16_24>=u_xlat16_6.x;
#endif
    u_xlati18 = (u_xlatb18.x) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat18.x = u_xlatb1.y ? intBitsToFloat(u_xlati18) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat18.x;
    u_xlat16_6.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat9.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_2COLORLERPTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
vec4 u_xlat3;
vec2 u_xlat4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat9;
mediump vec2 u_xlat16_14;
vec2 u_xlat16;
int u_xlati16;
bvec2 u_xlatb16;
mediump float u_xlat16_22;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_30;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat8.xy = floor(u_xlat16.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat8.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat8.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat8.x * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat9 = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat9 = u_xlat24 * u_xlat9 + 0.180141002;
    u_xlat9 = u_xlat24 * u_xlat9 + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat9 + 0.999866009;
    u_xlat9 = u_xlat24 * u_xlat16.x;
    u_xlat9 = u_xlat9 * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat9 : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16.x = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16.x ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16.x = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16.x = u_xlatb24 && u_xlatb16.x;
    u_xlat0.x = (u_xlatb16.x) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _Time.y * _DetailTex_Uspeed;
    u_xlat16.x = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat16.x;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat16.x + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xz = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat16.x = _Time.y * _DetailTex_Vspeed;
    u_xlat16.x = u_xlat0.x * _DetailTexAnnularUV_TilingV + u_xlat16.x;
    u_xlat4.y = u_xlat16.x + _DetailTexAnnularUV_OffsetV;
    u_xlat16.xy = u_xlat1.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_2.x = _Time.y * _DetailTex_Uspeed + u_xlat16.x;
    u_xlat16_2.y = _Time.y * _DetailTex_Vspeed + u_xlat16.y;
    u_xlatb5 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = (u_xlatb5.x) ? u_xlat4.xy : u_xlat16_2.xy;
    u_xlat2 = texture(_DetailTex, u_xlat16.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb16.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_6 = (u_xlatb16.x) ? u_xlat2.w : 0.0;
    u_xlat16_6 = (u_xlatb5.w) ? u_xlat2.z : u_xlat16_6;
    u_xlat16_6 = (u_xlatb5.z) ? u_xlat2.y : u_xlat16_6;
    u_xlat16_6 = (u_xlatb5.y) ? u_xlat2.x : u_xlat16_6;
    u_xlat16.xy = u_xlat1.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.xy = u_xlat1.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_14.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat16.xy);
    u_xlatb16.xy = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 5.0, 4.0, 5.0)).xy;
    u_xlat16_30 = (u_xlatb16.y) ? 1.0 : 0.0;
    u_xlat16_30 = (u_xlatb16.x) ? u_xlat1.w : u_xlat16_30;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_30 = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_30;
    u_xlat16_30 = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_30;
    u_xlatb16.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_30 = (u_xlatb16.x) ? u_xlat1.x : u_xlat16_30;
    u_xlat16_30 = u_xlat16_30 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_7.xyz + _LerpColorDark.xyz;
    u_xlat16_1.xyz = _DetailColor.xyz * vec3(u_xlat16_6) + u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorBrightness);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz;
    u_xlat16.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat0.x * _MaskTexAnnularUV_TilingV + u_xlat16.x;
    u_xlat3.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_14.xy;
    u_xlat3 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_6 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_6 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_6;
    u_xlat16_6 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_6;
    u_xlat16_6 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_6;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_14.x = (u_xlatb1.w) ? u_xlat2.w : 0.0;
    u_xlat16_14.x = (u_xlatb1.z) ? u_xlat2.z : u_xlat16_14.x;
    u_xlat16_14.x = (u_xlatb1.y) ? u_xlat2.y : u_xlat16_14.x;
    u_xlat16_14.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat16_14.x;
    u_xlat16_22 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_14.x * u_xlat16_6 + (-u_xlat16_22);
    u_xlat16_6 = u_xlat16_6 * u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16_22>=u_xlat16_6);
#else
    u_xlatb16.x = u_xlat16_22>=u_xlat16_6;
#endif
    u_xlati16 = (u_xlatb16.x) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb1.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_6 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bvec4 u_xlatb2;
vec2 u_xlat3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat9;
mediump float u_xlat16_13;
vec2 u_xlat16;
int u_xlati16;
bool u_xlatb16;
vec2 u_xlat17;
mediump float u_xlat16_21;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat8.xy = floor(u_xlat16.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat8.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat8.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat8.x * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat9 = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat9 = u_xlat24 * u_xlat9 + 0.180141002;
    u_xlat9 = u_xlat24 * u_xlat9 + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat9 + 0.999866009;
    u_xlat9 = u_xlat24 * u_xlat16.x;
    u_xlat9 = u_xlat9 * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat9 : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16 = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16 = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat16.x;
    u_xlat16.xy = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat16.x = dot(u_xlat16.xy, u_xlat16.xy);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlat17.xy = u_xlat1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_2.x = _Time.y * _NoiseTex_Uspeed + u_xlat17.x;
    u_xlat16_2.y = _Time.y * _NoiseTex_Vspeed + u_xlat17.y;
    u_xlatb4 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat17.xy = (u_xlatb4.x) ? u_xlat3.xy : u_xlat16_2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat17.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb24) ? u_xlat2.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat2.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat2.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat2.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlat0.xw = u_xlat1.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlatb2 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb2.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat16_5.xx + u_xlat0.xw;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _DetailColor.xyz;
    u_xlat0.xw = u_xlat1.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.xy = u_xlat1.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xw);
    u_xlatb0.xw = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 0.0, 5.0)).xw;
    u_xlat16_29 = (u_xlatb0.w) ? 1.0 : 0.0;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_29;
    u_xlatb2 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_29 = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_29;
    u_xlat16_29 = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_29;
    u_xlat16_29 = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_29;
    u_xlat16_7.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat16_29);
    u_xlat16_1.xyz = u_xlat16_7.xyz * _BaseColor.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorBrightness);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat3.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_6.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_5.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_13 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_13 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_13;
    u_xlat16_21 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_13 * u_xlat16_5.x + (-u_xlat16_21);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_21>=u_xlat16_5.x);
#else
    u_xlatb16 = u_xlat16_21>=u_xlat16_5.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb1.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bvec4 u_xlatb2;
vec2 u_xlat3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
mediump vec2 u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat14.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat14.x = float(1.0) / u_xlat14.x;
    u_xlat21 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat14.x = u_xlat14.x * u_xlat21;
    u_xlat21 = u_xlat14.x * u_xlat14.x;
    u_xlat8 = u_xlat21 * 0.0208350997 + -0.0851330012;
    u_xlat8 = u_xlat21 * u_xlat8 + 0.180141002;
    u_xlat8 = u_xlat21 * u_xlat8 + -0.330299497;
    u_xlat21 = u_xlat21 * u_xlat8 + 0.999866009;
    u_xlat8 = u_xlat21 * u_xlat14.x;
    u_xlat8 = u_xlat8 * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat8 : float(0.0);
    u_xlat0.x = u_xlat14.x * u_xlat21 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb14 = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlat21 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat14.x = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat14.x;
    u_xlat14.xy = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat14.x = dot(u_xlat14.xy, u_xlat14.xy);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat21 = u_xlat14.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_2.x = _Time.y * _NoiseTex_Uspeed + u_xlat15.x;
    u_xlat16_2.y = _Time.y * _NoiseTex_Vspeed + u_xlat15.y;
    u_xlatb4 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15.xy = (u_xlatb4.x) ? u_xlat3.xy : u_xlat16_2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat15.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_5 = (u_xlatb21) ? u_xlat2.w : 0.0;
    u_xlat16_5 = (u_xlatb4.w) ? u_xlat2.z : u_xlat16_5;
    u_xlat16_5 = (u_xlatb4.z) ? u_xlat2.y : u_xlat16_5;
    u_xlat16_5 = (u_xlatb4.y) ? u_xlat2.x : u_xlat16_5;
    u_xlat16_5 = u_xlat16_5 + _Noise_Offset;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlat0.xw = u_xlat1.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlatb2 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb2.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_5) + u_xlat0.xw;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_5 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_5 = (u_xlatb2.w) ? u_xlat4.z : u_xlat16_5;
    u_xlat16_5 = (u_xlatb2.z) ? u_xlat4.y : u_xlat16_5;
    u_xlat16_5 = (u_xlatb2.y) ? u_xlat4.x : u_xlat16_5;
    u_xlat0.xw = u_xlat1.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.xy = u_xlat1.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_12.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xw);
    u_xlatb0.xw = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 0.0, 5.0)).xw;
    u_xlat16_26 = (u_xlatb0.w) ? 1.0 : 0.0;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_26;
    u_xlatb2 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_26 = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_26;
    u_xlatb0.x = u_xlatb2.x || u_xlatb2.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_26;
    u_xlat16_26 = u_xlat16_26 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + _LerpColorDark.xyz;
    u_xlat16_1.xyz = _DetailColor.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorBrightness);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat3.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_12.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5 = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_5 = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_5;
    u_xlat16_5 = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_5;
    u_xlat16_5 = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_5;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12.x = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12.x = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12.x;
    u_xlat16_12.x = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12.x;
    u_xlat16_12.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12.x;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12.x * u_xlat16_5 + (-u_xlat16_19);
    u_xlat16_5 = u_xlat16_5 * u_xlat16_12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "ANNULAR_UV_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat12;
mediump float u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
bool u_xlatb20;
mediump float u_xlat16_22;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16 = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat16 = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat16 * 0.0208350997 + -0.0851330012;
    u_xlat24 = u_xlat16 * u_xlat24 + 0.180141002;
    u_xlat24 = u_xlat16 * u_xlat24 + -0.330299497;
    u_xlat16 = u_xlat16 * u_xlat24 + 0.999866009;
    u_xlat24 = u_xlat16 * u_xlat0.x;
    u_xlat24 = u_xlat24 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb27 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat24 = u_xlatb27 ? u_xlat24 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat16 + u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb16 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat16 = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16 + u_xlat0.x;
    u_xlat16 = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat24 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<(-u_xlat16));
#else
    u_xlatb16 = u_xlat16<(-u_xlat16);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.xyz = (u_xlatb4.x) ? u_xlat1.xyz : u_xlat16_2.xxx;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat27 = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat4.x = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat4.x = u_xlat27 * u_xlat27;
    u_xlat12 = u_xlat4.x * 0.0208350997 + -0.0851330012;
    u_xlat12 = u_xlat4.x * u_xlat12 + 0.180141002;
    u_xlat12 = u_xlat4.x * u_xlat12 + -0.330299497;
    u_xlat4.x = u_xlat4.x * u_xlat12 + 0.999866009;
    u_xlat12 = u_xlat27 * u_xlat4.x;
    u_xlat12 = u_xlat12 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb20 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat12 = u_xlatb20 ? u_xlat12 : float(0.0);
    u_xlat27 = u_xlat27 * u_xlat4.x + u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb4.x = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat4.x = u_xlatb4.x ? -3.14159274 : float(0.0);
    u_xlat27 = u_xlat27 + u_xlat4.x;
    u_xlat4.x = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat16 = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat16 + u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat4.x<(-u_xlat4.x));
#else
    u_xlatb24 = u_xlat4.x<(-u_xlat4.x);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb24;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat27) : u_xlat27;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat5.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat3.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat16_7.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_7.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16 * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat5.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat5.xy : u_xlat16_7.xy;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_26;
    u_xlat16_7.xyz = vec3(u_xlat16_26) * _DetailColor.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorBrightness);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vs_COLOR0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16 * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_6.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_6.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_6.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_14 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_14 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_14;
    u_xlat16_14 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_14;
    u_xlat16_14 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_14;
    u_xlat16_22 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_14 * u_xlat16_6.x + (-u_xlat16_22);
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_22>=u_xlat16_6.x);
#else
    u_xlatb16 = u_xlat16_22>=u_xlat16_6.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb3.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16 = u_xlatb3.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : u_xlat16;
    u_xlat16_6.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
bool u_xlatb20;
mediump float u_xlat16_22;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16 = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat16 = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat16 * 0.0208350997 + -0.0851330012;
    u_xlat24 = u_xlat16 * u_xlat24 + 0.180141002;
    u_xlat24 = u_xlat16 * u_xlat24 + -0.330299497;
    u_xlat16 = u_xlat16 * u_xlat24 + 0.999866009;
    u_xlat24 = u_xlat16 * u_xlat0.x;
    u_xlat24 = u_xlat24 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb27 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat24 = u_xlatb27 ? u_xlat24 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat16 + u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb16 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat16 = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16 + u_xlat0.x;
    u_xlat16 = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat24 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<(-u_xlat16));
#else
    u_xlatb16 = u_xlat16<(-u_xlat16);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlatb0.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + _LerpColorDark.xyz;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat27 = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat4.x = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat4.x = u_xlat27 * u_xlat27;
    u_xlat12 = u_xlat4.x * 0.0208350997 + -0.0851330012;
    u_xlat12 = u_xlat4.x * u_xlat12 + 0.180141002;
    u_xlat12 = u_xlat4.x * u_xlat12 + -0.330299497;
    u_xlat4.x = u_xlat4.x * u_xlat12 + 0.999866009;
    u_xlat12 = u_xlat27 * u_xlat4.x;
    u_xlat12 = u_xlat12 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb20 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat12 = u_xlatb20 ? u_xlat12 : float(0.0);
    u_xlat27 = u_xlat27 * u_xlat4.x + u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb4.x = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat4.x = u_xlatb4.x ? -3.14159274 : float(0.0);
    u_xlat27 = u_xlat27 + u_xlat4.x;
    u_xlat4.x = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat16 = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat16 + u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat4.x<(-u_xlat4.x));
#else
    u_xlatb24 = u_xlat4.x<(-u_xlat4.x);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb24;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat27) : u_xlat27;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat5.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat3.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat16_7.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_7.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16 * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat5.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat5.xy : u_xlat16_7.xy;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_26;
    u_xlat16_5.xyz = _DetailColor.xyz * vec3(u_xlat16_26) + u_xlat16_2.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorBrightness);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vs_COLOR0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16 * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_6.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_6.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_6.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_14 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_14 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_14;
    u_xlat16_14 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_14;
    u_xlat16_14 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_14;
    u_xlat16_22 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_14 * u_xlat16_6.x + (-u_xlat16_22);
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_22>=u_xlat16_6.x);
#else
    u_xlatb16 = u_xlat16_22>=u_xlat16_6.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb3.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16 = u_xlatb3.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : u_xlat16;
    u_xlat16_6.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "ANNULAR_UV_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat12;
mediump float u_xlat16_13;
float u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
bool u_xlatb20;
mediump float u_xlat16_21;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16 = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat16 = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat16 * 0.0208350997 + -0.0851330012;
    u_xlat24 = u_xlat16 * u_xlat24 + 0.180141002;
    u_xlat24 = u_xlat16 * u_xlat24 + -0.330299497;
    u_xlat16 = u_xlat16 * u_xlat24 + 0.999866009;
    u_xlat24 = u_xlat16 * u_xlat0.x;
    u_xlat24 = u_xlat24 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb27 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat24 = u_xlatb27 ? u_xlat24 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat16 + u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb16 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat16 = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16 + u_xlat0.x;
    u_xlat16 = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat24 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<(-u_xlat16));
#else
    u_xlatb16 = u_xlat16<(-u_xlat16);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.xyz = (u_xlatb4.x) ? u_xlat1.xyz : u_xlat16_2.xxx;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat27 = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat4.x = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat4.x = u_xlat27 * u_xlat27;
    u_xlat12 = u_xlat4.x * 0.0208350997 + -0.0851330012;
    u_xlat12 = u_xlat4.x * u_xlat12 + 0.180141002;
    u_xlat12 = u_xlat4.x * u_xlat12 + -0.330299497;
    u_xlat4.x = u_xlat4.x * u_xlat12 + 0.999866009;
    u_xlat12 = u_xlat27 * u_xlat4.x;
    u_xlat12 = u_xlat12 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb20 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat12 = u_xlatb20 ? u_xlat12 : float(0.0);
    u_xlat27 = u_xlat27 * u_xlat4.x + u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb4.x = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat4.x = u_xlatb4.x ? -3.14159274 : float(0.0);
    u_xlat27 = u_xlat27 + u_xlat4.x;
    u_xlat4.x = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat16 = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat16 + u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat4.x<(-u_xlat4.x));
#else
    u_xlatb24 = u_xlat4.x<(-u_xlat4.x);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb24;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat27) : u_xlat27;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat24 = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _NoiseTex_Uspeed + u_xlat24;
    u_xlat3.xw = u_xlat3.yz * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_5.x = _Time.y * _NoiseTex_Uspeed + u_xlat3.x;
    u_xlat16_5.y = _Time.y * _NoiseTex_Vspeed + u_xlat3.w;
    u_xlat24 = u_xlat16 * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat4.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlatb1 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xw = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_5.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat3.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb24) ? u_xlat4.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat4.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat4.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat4.x : u_xlat16_26;
    u_xlat16_26 = u_xlat16_26 + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat6.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat3.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat16_7.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_7.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16 * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat6.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat6.xy : u_xlat16_7.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_26) + u_xlat0.xw;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_26;
    u_xlat16_7.xyz = vec3(u_xlat16_26) * _DetailColor.xyz;
    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorBrightness);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vs_COLOR0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16 * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_5.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_13 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_13 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_13;
    u_xlat16_21 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_13 * u_xlat16_5.x + (-u_xlat16_21);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_21>=u_xlat16_5.x);
#else
    u_xlatb16 = u_xlat16_21>=u_xlat16_5.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb3.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16 = u_xlatb3.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : u_xlat16;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_13;
float u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
bool u_xlatb20;
mediump float u_xlat16_21;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16 = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat16 = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat16 * 0.0208350997 + -0.0851330012;
    u_xlat24 = u_xlat16 * u_xlat24 + 0.180141002;
    u_xlat24 = u_xlat16 * u_xlat24 + -0.330299497;
    u_xlat16 = u_xlat16 * u_xlat24 + 0.999866009;
    u_xlat24 = u_xlat16 * u_xlat0.x;
    u_xlat24 = u_xlat24 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb27 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat24 = u_xlatb27 ? u_xlat24 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat16 + u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb16 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat16 = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16 + u_xlat0.x;
    u_xlat16 = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat24 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<(-u_xlat16));
#else
    u_xlatb16 = u_xlat16<(-u_xlat16);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlatb0.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + _LerpColorDark.xyz;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat27 = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat4.x = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat4.x = u_xlat27 * u_xlat27;
    u_xlat12 = u_xlat4.x * 0.0208350997 + -0.0851330012;
    u_xlat12 = u_xlat4.x * u_xlat12 + 0.180141002;
    u_xlat12 = u_xlat4.x * u_xlat12 + -0.330299497;
    u_xlat4.x = u_xlat4.x * u_xlat12 + 0.999866009;
    u_xlat12 = u_xlat27 * u_xlat4.x;
    u_xlat12 = u_xlat12 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb20 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat12 = u_xlatb20 ? u_xlat12 : float(0.0);
    u_xlat27 = u_xlat27 * u_xlat4.x + u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb4.x = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat4.x = u_xlatb4.x ? -3.14159274 : float(0.0);
    u_xlat27 = u_xlat27 + u_xlat4.x;
    u_xlat4.x = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat16 = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat16 + u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat4.x<(-u_xlat4.x));
#else
    u_xlatb24 = u_xlat4.x<(-u_xlat4.x);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb24;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat27) : u_xlat27;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat24 = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _NoiseTex_Uspeed + u_xlat24;
    u_xlat3.xw = u_xlat3.yz * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_5.x = _Time.y * _NoiseTex_Uspeed + u_xlat3.x;
    u_xlat16_5.y = _Time.y * _NoiseTex_Vspeed + u_xlat3.w;
    u_xlat24 = u_xlat16 * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat4.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlatb1 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xw = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_5.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat3.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb24) ? u_xlat4.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat4.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat4.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat4.x : u_xlat16_26;
    u_xlat16_26 = u_xlat16_26 + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat6.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat3.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat16_7.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_7.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16 * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat6.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat6.xy : u_xlat16_7.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_26) + u_xlat0.xw;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_26;
    u_xlat16_6.xyz = _DetailColor.xyz * vec3(u_xlat16_26) + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorBrightness);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vs_COLOR0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16 * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_5.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_13 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_13 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_13;
    u_xlat16_21 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_13 * u_xlat16_5.x + (-u_xlat16_21);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_21>=u_xlat16_5.x);
#else
    u_xlatb16 = u_xlat16_21>=u_xlat16_5.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb3.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16 = u_xlatb3.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : u_xlat16;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ANNULAR_UV_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat12;
mediump float u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
bool u_xlatb20;
mediump float u_xlat16_22;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16 = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat16 = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat16 * 0.0208350997 + -0.0851330012;
    u_xlat24 = u_xlat16 * u_xlat24 + 0.180141002;
    u_xlat24 = u_xlat16 * u_xlat24 + -0.330299497;
    u_xlat16 = u_xlat16 * u_xlat24 + 0.999866009;
    u_xlat24 = u_xlat16 * u_xlat0.x;
    u_xlat24 = u_xlat24 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb27 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat24 = u_xlatb27 ? u_xlat24 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat16 + u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb16 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat16 = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16 + u_xlat0.x;
    u_xlat16 = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat24 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<(-u_xlat16));
#else
    u_xlatb16 = u_xlat16<(-u_xlat16);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.xyz = (u_xlatb4.x) ? u_xlat1.xyz : u_xlat16_2.xxx;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat27 = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat4.x = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat4.x = u_xlat27 * u_xlat27;
    u_xlat12 = u_xlat4.x * 0.0208350997 + -0.0851330012;
    u_xlat12 = u_xlat4.x * u_xlat12 + 0.180141002;
    u_xlat12 = u_xlat4.x * u_xlat12 + -0.330299497;
    u_xlat4.x = u_xlat4.x * u_xlat12 + 0.999866009;
    u_xlat12 = u_xlat27 * u_xlat4.x;
    u_xlat12 = u_xlat12 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb20 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat12 = u_xlatb20 ? u_xlat12 : float(0.0);
    u_xlat27 = u_xlat27 * u_xlat4.x + u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb4.x = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat4.x = u_xlatb4.x ? -3.14159274 : float(0.0);
    u_xlat27 = u_xlat27 + u_xlat4.x;
    u_xlat4.x = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat16 = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat16 + u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat4.x<(-u_xlat4.x));
#else
    u_xlatb24 = u_xlat4.x<(-u_xlat4.x);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb24;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat27) : u_xlat27;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat5.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat3.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat16_7.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_7.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16 * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat5.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat5.xy : u_xlat16_7.xy;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_26;
    u_xlat16_7.xyz = vec3(u_xlat16_26) * _DetailColor.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorBrightness);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vs_COLOR0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16 * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_6.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_6.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_6.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_14 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_14 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_14;
    u_xlat16_14 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_14;
    u_xlat16_14 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_14;
    u_xlat16_22 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_14 * u_xlat16_6.x + (-u_xlat16_22);
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_22>=u_xlat16_6.x);
#else
    u_xlatb16 = u_xlat16_22>=u_xlat16_6.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb3.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16 = u_xlatb3.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : u_xlat16;
    u_xlat16_6.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
bool u_xlatb20;
mediump float u_xlat16_22;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16 = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat16 = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat16 * 0.0208350997 + -0.0851330012;
    u_xlat24 = u_xlat16 * u_xlat24 + 0.180141002;
    u_xlat24 = u_xlat16 * u_xlat24 + -0.330299497;
    u_xlat16 = u_xlat16 * u_xlat24 + 0.999866009;
    u_xlat24 = u_xlat16 * u_xlat0.x;
    u_xlat24 = u_xlat24 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb27 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat24 = u_xlatb27 ? u_xlat24 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat16 + u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb16 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat16 = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16 + u_xlat0.x;
    u_xlat16 = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat24 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<(-u_xlat16));
#else
    u_xlatb16 = u_xlat16<(-u_xlat16);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlatb0.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + _LerpColorDark.xyz;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat27 = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat4.x = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat4.x = u_xlat27 * u_xlat27;
    u_xlat12 = u_xlat4.x * 0.0208350997 + -0.0851330012;
    u_xlat12 = u_xlat4.x * u_xlat12 + 0.180141002;
    u_xlat12 = u_xlat4.x * u_xlat12 + -0.330299497;
    u_xlat4.x = u_xlat4.x * u_xlat12 + 0.999866009;
    u_xlat12 = u_xlat27 * u_xlat4.x;
    u_xlat12 = u_xlat12 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb20 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat12 = u_xlatb20 ? u_xlat12 : float(0.0);
    u_xlat27 = u_xlat27 * u_xlat4.x + u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb4.x = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat4.x = u_xlatb4.x ? -3.14159274 : float(0.0);
    u_xlat27 = u_xlat27 + u_xlat4.x;
    u_xlat4.x = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat16 = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat16 + u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat4.x<(-u_xlat4.x));
#else
    u_xlatb24 = u_xlat4.x<(-u_xlat4.x);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb24;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat27) : u_xlat27;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat5.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat3.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat16_7.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_7.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16 * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat5.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat5.xy : u_xlat16_7.xy;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_26;
    u_xlat16_5.xyz = _DetailColor.xyz * vec3(u_xlat16_26) + u_xlat16_2.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorBrightness);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vs_COLOR0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16 * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_6.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_6.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_6.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_14 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_14 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_14;
    u_xlat16_14 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_14;
    u_xlat16_14 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_14;
    u_xlat16_22 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_14 * u_xlat16_6.x + (-u_xlat16_22);
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_22>=u_xlat16_6.x);
#else
    u_xlatb16 = u_xlat16_22>=u_xlat16_6.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb3.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16 = u_xlatb3.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : u_xlat16;
    u_xlat16_6.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ANNULAR_UV_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat12;
mediump float u_xlat16_13;
float u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
bool u_xlatb20;
mediump float u_xlat16_21;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16 = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat16 = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat16 * 0.0208350997 + -0.0851330012;
    u_xlat24 = u_xlat16 * u_xlat24 + 0.180141002;
    u_xlat24 = u_xlat16 * u_xlat24 + -0.330299497;
    u_xlat16 = u_xlat16 * u_xlat24 + 0.999866009;
    u_xlat24 = u_xlat16 * u_xlat0.x;
    u_xlat24 = u_xlat24 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb27 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat24 = u_xlatb27 ? u_xlat24 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat16 + u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb16 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat16 = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16 + u_xlat0.x;
    u_xlat16 = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat24 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<(-u_xlat16));
#else
    u_xlatb16 = u_xlat16<(-u_xlat16);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.xyz = (u_xlatb4.x) ? u_xlat1.xyz : u_xlat16_2.xxx;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat27 = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat4.x = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat4.x = u_xlat27 * u_xlat27;
    u_xlat12 = u_xlat4.x * 0.0208350997 + -0.0851330012;
    u_xlat12 = u_xlat4.x * u_xlat12 + 0.180141002;
    u_xlat12 = u_xlat4.x * u_xlat12 + -0.330299497;
    u_xlat4.x = u_xlat4.x * u_xlat12 + 0.999866009;
    u_xlat12 = u_xlat27 * u_xlat4.x;
    u_xlat12 = u_xlat12 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb20 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat12 = u_xlatb20 ? u_xlat12 : float(0.0);
    u_xlat27 = u_xlat27 * u_xlat4.x + u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb4.x = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat4.x = u_xlatb4.x ? -3.14159274 : float(0.0);
    u_xlat27 = u_xlat27 + u_xlat4.x;
    u_xlat4.x = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat16 = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat16 + u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat4.x<(-u_xlat4.x));
#else
    u_xlatb24 = u_xlat4.x<(-u_xlat4.x);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb24;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat27) : u_xlat27;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat24 = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _NoiseTex_Uspeed + u_xlat24;
    u_xlat3.xw = u_xlat3.yz * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_5.x = _Time.y * _NoiseTex_Uspeed + u_xlat3.x;
    u_xlat16_5.y = _Time.y * _NoiseTex_Vspeed + u_xlat3.w;
    u_xlat24 = u_xlat16 * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat4.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlatb1 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xw = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_5.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat3.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb24) ? u_xlat4.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat4.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat4.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat4.x : u_xlat16_26;
    u_xlat16_26 = u_xlat16_26 + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat6.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat3.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat16_7.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_7.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16 * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat6.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat6.xy : u_xlat16_7.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_26) + u_xlat0.xw;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_26;
    u_xlat16_7.xyz = vec3(u_xlat16_26) * _DetailColor.xyz;
    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorBrightness);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vs_COLOR0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16 * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_5.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_13 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_13 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_13;
    u_xlat16_21 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_13 * u_xlat16_5.x + (-u_xlat16_21);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_21>=u_xlat16_5.x);
#else
    u_xlatb16 = u_xlat16_21>=u_xlat16_5.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb3.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16 = u_xlatb3.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : u_xlat16;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_13;
float u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
bool u_xlatb20;
mediump float u_xlat16_21;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16 = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat16 = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat16 * 0.0208350997 + -0.0851330012;
    u_xlat24 = u_xlat16 * u_xlat24 + 0.180141002;
    u_xlat24 = u_xlat16 * u_xlat24 + -0.330299497;
    u_xlat16 = u_xlat16 * u_xlat24 + 0.999866009;
    u_xlat24 = u_xlat16 * u_xlat0.x;
    u_xlat24 = u_xlat24 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb27 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat24 = u_xlatb27 ? u_xlat24 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat16 + u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb16 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat16 = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16 + u_xlat0.x;
    u_xlat16 = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat24 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<(-u_xlat16));
#else
    u_xlatb16 = u_xlat16<(-u_xlat16);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlatb0.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + _LerpColorDark.xyz;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat27 = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat4.x = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat4.x = u_xlat27 * u_xlat27;
    u_xlat12 = u_xlat4.x * 0.0208350997 + -0.0851330012;
    u_xlat12 = u_xlat4.x * u_xlat12 + 0.180141002;
    u_xlat12 = u_xlat4.x * u_xlat12 + -0.330299497;
    u_xlat4.x = u_xlat4.x * u_xlat12 + 0.999866009;
    u_xlat12 = u_xlat27 * u_xlat4.x;
    u_xlat12 = u_xlat12 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb20 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat12 = u_xlatb20 ? u_xlat12 : float(0.0);
    u_xlat27 = u_xlat27 * u_xlat4.x + u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb4.x = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat4.x = u_xlatb4.x ? -3.14159274 : float(0.0);
    u_xlat27 = u_xlat27 + u_xlat4.x;
    u_xlat4.x = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat16 = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat16 + u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat4.x<(-u_xlat4.x));
#else
    u_xlatb24 = u_xlat4.x<(-u_xlat4.x);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb24;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat27) : u_xlat27;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat24 = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _NoiseTex_Uspeed + u_xlat24;
    u_xlat3.xw = u_xlat3.yz * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_5.x = _Time.y * _NoiseTex_Uspeed + u_xlat3.x;
    u_xlat16_5.y = _Time.y * _NoiseTex_Vspeed + u_xlat3.w;
    u_xlat24 = u_xlat16 * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat4.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlatb1 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xw = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_5.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat3.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb24) ? u_xlat4.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat4.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat4.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat4.x : u_xlat16_26;
    u_xlat16_26 = u_xlat16_26 + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat6.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat3.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat16_7.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_7.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16 * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat6.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat6.xy : u_xlat16_7.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_26) + u_xlat0.xw;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_26;
    u_xlat16_6.xyz = _DetailColor.xyz * vec3(u_xlat16_26) + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorBrightness);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vs_COLOR0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16 * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_5.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_13 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_13 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_13;
    u_xlat16_21 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_13 * u_xlat16_5.x + (-u_xlat16_21);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_21>=u_xlat16_5.x);
#else
    u_xlatb16 = u_xlat16_21>=u_xlat16_5.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb3.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16 = u_xlatb3.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : u_xlat16;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "ANNULAR_UV_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat14.x = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat21 = u_xlat14.x * 0.0208350997 + -0.0851330012;
    u_xlat21 = u_xlat14.x * u_xlat21 + 0.180141002;
    u_xlat21 = u_xlat14.x * u_xlat21 + -0.330299497;
    u_xlat14.x = u_xlat14.x * u_xlat21 + 0.999866009;
    u_xlat21 = u_xlat14.x * u_xlat0.x;
    u_xlat21 = u_xlat21 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb15 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat21 = u_xlatb15 ? u_xlat21 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat14.x + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb14 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat21 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.xyz = (u_xlatb4.x) ? u_xlat1.xyz : u_xlat16_2.xxx;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat1.x = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat8 = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15.x = u_xlat8 * 0.0208350997 + -0.0851330012;
    u_xlat15.x = u_xlat8 * u_xlat15.x + 0.180141002;
    u_xlat15.x = u_xlat8 * u_xlat15.x + -0.330299497;
    u_xlat8 = u_xlat8 * u_xlat15.x + 0.999866009;
    u_xlat15.x = u_xlat8 * u_xlat1.x;
    u_xlat15.x = u_xlat15.x * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb22 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat15.x = u_xlatb22 ? u_xlat15.x : float(0.0);
    u_xlat1.x = u_xlat1.x * u_xlat8 + u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb8 = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat8 = u_xlatb8 ? -3.14159274 : float(0.0);
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat8 = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat14.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat8<(-u_xlat8));
#else
    u_xlatb21 = u_xlat8<(-u_xlat8);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb21;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat1.x) : u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat15.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat15.xy;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb3 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb3.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_23 = (u_xlatb3.w) ? u_xlat4.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.z) ? u_xlat4.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.y) ? u_xlat4.x : u_xlat16_23;
    u_xlat16_6.xyz = vec3(u_xlat16_23) * _DetailColor.xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat1.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb2 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat1.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_5.x + (-u_xlat16_19);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5.x);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5.x;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
mediump vec2 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat14.x = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat21 = u_xlat14.x * 0.0208350997 + -0.0851330012;
    u_xlat21 = u_xlat14.x * u_xlat21 + 0.180141002;
    u_xlat21 = u_xlat14.x * u_xlat21 + -0.330299497;
    u_xlat14.x = u_xlat14.x * u_xlat21 + 0.999866009;
    u_xlat21 = u_xlat14.x * u_xlat0.x;
    u_xlat21 = u_xlat21 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb15 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat21 = u_xlatb15 ? u_xlat21 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat14.x + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb14 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat21 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlatb0.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_9.xyz + _LerpColorDark.xyz;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat1.x = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat8 = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15.x = u_xlat8 * 0.0208350997 + -0.0851330012;
    u_xlat15.x = u_xlat8 * u_xlat15.x + 0.180141002;
    u_xlat15.x = u_xlat8 * u_xlat15.x + -0.330299497;
    u_xlat8 = u_xlat8 * u_xlat15.x + 0.999866009;
    u_xlat15.x = u_xlat8 * u_xlat1.x;
    u_xlat15.x = u_xlat15.x * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb22 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat15.x = u_xlatb22 ? u_xlat15.x : float(0.0);
    u_xlat1.x = u_xlat1.x * u_xlat8 + u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb8 = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat8 = u_xlatb8 ? -3.14159274 : float(0.0);
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat8 = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat14.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat8<(-u_xlat8));
#else
    u_xlatb21 = u_xlat8<(-u_xlat8);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb21;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat1.x) : u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat15.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat15.xy;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb3 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb3.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_23 = (u_xlatb3.w) ? u_xlat4.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.z) ? u_xlat4.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.y) ? u_xlat4.x : u_xlat16_23;
    u_xlat16_3.xyz = _DetailColor.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat1.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb2 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat1.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_5.x + (-u_xlat16_19);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5.x);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5.x;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat14.x = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat21 = u_xlat14.x * 0.0208350997 + -0.0851330012;
    u_xlat21 = u_xlat14.x * u_xlat21 + 0.180141002;
    u_xlat21 = u_xlat14.x * u_xlat21 + -0.330299497;
    u_xlat14.x = u_xlat14.x * u_xlat21 + 0.999866009;
    u_xlat21 = u_xlat14.x * u_xlat0.x;
    u_xlat21 = u_xlat21 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb15 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat21 = u_xlatb15 ? u_xlat21 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat14.x + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb14 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat21 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.xyz = (u_xlatb4.x) ? u_xlat1.xyz : u_xlat16_2.xxx;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat1.x = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat8 = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15.x = u_xlat8 * 0.0208350997 + -0.0851330012;
    u_xlat15.x = u_xlat8 * u_xlat15.x + 0.180141002;
    u_xlat15.x = u_xlat8 * u_xlat15.x + -0.330299497;
    u_xlat8 = u_xlat8 * u_xlat15.x + 0.999866009;
    u_xlat15.x = u_xlat8 * u_xlat1.x;
    u_xlat15.x = u_xlat15.x * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb22 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat15.x = u_xlatb22 ? u_xlat15.x : float(0.0);
    u_xlat1.x = u_xlat1.x * u_xlat8 + u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb8 = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat8 = u_xlatb8 ? -3.14159274 : float(0.0);
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat8 = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat14.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat8<(-u_xlat8));
#else
    u_xlatb21 = u_xlat8<(-u_xlat8);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb21;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat1.x) : u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat21 = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat21;
    u_xlat15.xy = u_xlat3.yz * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_5.x = _Time.y * _NoiseTex_Uspeed + u_xlat15.x;
    u_xlat16_5.y = _Time.y * _NoiseTex_Vspeed + u_xlat15.y;
    u_xlat21 = u_xlat14.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat21;
    u_xlatb4 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb4.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb21) ? u_xlat1.w : 0.0;
    u_xlat16_23 = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_23;
    u_xlat16_23 = u_xlat16_23 + _Noise_Offset;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat15.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat15.xy;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb3 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb3.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_23) + u_xlat0.xw;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_23 = (u_xlatb3.w) ? u_xlat4.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.z) ? u_xlat4.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.y) ? u_xlat4.x : u_xlat16_23;
    u_xlat16_6.xyz = vec3(u_xlat16_23) * _DetailColor.xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat1.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb2 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat1.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_5.x + (-u_xlat16_19);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5.x);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5.x;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
mediump vec2 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat14.x = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat21 = u_xlat14.x * 0.0208350997 + -0.0851330012;
    u_xlat21 = u_xlat14.x * u_xlat21 + 0.180141002;
    u_xlat21 = u_xlat14.x * u_xlat21 + -0.330299497;
    u_xlat14.x = u_xlat14.x * u_xlat21 + 0.999866009;
    u_xlat21 = u_xlat14.x * u_xlat0.x;
    u_xlat21 = u_xlat21 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb15 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat21 = u_xlatb15 ? u_xlat21 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat14.x + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb14 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat21 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlatb0.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_9.xyz + _LerpColorDark.xyz;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat1.x = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat8 = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15.x = u_xlat8 * 0.0208350997 + -0.0851330012;
    u_xlat15.x = u_xlat8 * u_xlat15.x + 0.180141002;
    u_xlat15.x = u_xlat8 * u_xlat15.x + -0.330299497;
    u_xlat8 = u_xlat8 * u_xlat15.x + 0.999866009;
    u_xlat15.x = u_xlat8 * u_xlat1.x;
    u_xlat15.x = u_xlat15.x * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb22 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat15.x = u_xlatb22 ? u_xlat15.x : float(0.0);
    u_xlat1.x = u_xlat1.x * u_xlat8 + u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb8 = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat8 = u_xlatb8 ? -3.14159274 : float(0.0);
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat8 = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat14.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat8<(-u_xlat8));
#else
    u_xlatb21 = u_xlat8<(-u_xlat8);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb21;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat1.x) : u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat21 = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat21;
    u_xlat15.xy = u_xlat3.yz * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_5.x = _Time.y * _NoiseTex_Uspeed + u_xlat15.x;
    u_xlat16_5.y = _Time.y * _NoiseTex_Vspeed + u_xlat15.y;
    u_xlat21 = u_xlat14.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat21;
    u_xlatb4 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb4.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb21) ? u_xlat1.w : 0.0;
    u_xlat16_23 = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_23;
    u_xlat16_23 = u_xlat16_23 + _Noise_Offset;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat15.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat15.xy;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb3 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb3.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_23) + u_xlat0.xw;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_23 = (u_xlatb3.w) ? u_xlat4.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.z) ? u_xlat4.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.y) ? u_xlat4.x : u_xlat16_23;
    u_xlat16_3.xyz = _DetailColor.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat1.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb2 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat1.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_5.x + (-u_xlat16_19);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5.x);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5.x;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat14.x = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat21 = u_xlat14.x * 0.0208350997 + -0.0851330012;
    u_xlat21 = u_xlat14.x * u_xlat21 + 0.180141002;
    u_xlat21 = u_xlat14.x * u_xlat21 + -0.330299497;
    u_xlat14.x = u_xlat14.x * u_xlat21 + 0.999866009;
    u_xlat21 = u_xlat14.x * u_xlat0.x;
    u_xlat21 = u_xlat21 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb15 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat21 = u_xlatb15 ? u_xlat21 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat14.x + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb14 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat21 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.xyz = (u_xlatb4.x) ? u_xlat1.xyz : u_xlat16_2.xxx;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat1.x = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat8 = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15.x = u_xlat8 * 0.0208350997 + -0.0851330012;
    u_xlat15.x = u_xlat8 * u_xlat15.x + 0.180141002;
    u_xlat15.x = u_xlat8 * u_xlat15.x + -0.330299497;
    u_xlat8 = u_xlat8 * u_xlat15.x + 0.999866009;
    u_xlat15.x = u_xlat8 * u_xlat1.x;
    u_xlat15.x = u_xlat15.x * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb22 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat15.x = u_xlatb22 ? u_xlat15.x : float(0.0);
    u_xlat1.x = u_xlat1.x * u_xlat8 + u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb8 = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat8 = u_xlatb8 ? -3.14159274 : float(0.0);
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat8 = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat14.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat8<(-u_xlat8));
#else
    u_xlatb21 = u_xlat8<(-u_xlat8);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb21;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat1.x) : u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat15.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat15.xy;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb3 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb3.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_23 = (u_xlatb3.w) ? u_xlat4.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.z) ? u_xlat4.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.y) ? u_xlat4.x : u_xlat16_23;
    u_xlat16_6.xyz = vec3(u_xlat16_23) * _DetailColor.xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat1.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb2 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat1.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_5.x + (-u_xlat16_19);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5.x);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5.x;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
mediump vec2 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat14.x = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat21 = u_xlat14.x * 0.0208350997 + -0.0851330012;
    u_xlat21 = u_xlat14.x * u_xlat21 + 0.180141002;
    u_xlat21 = u_xlat14.x * u_xlat21 + -0.330299497;
    u_xlat14.x = u_xlat14.x * u_xlat21 + 0.999866009;
    u_xlat21 = u_xlat14.x * u_xlat0.x;
    u_xlat21 = u_xlat21 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb15 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat21 = u_xlatb15 ? u_xlat21 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat14.x + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb14 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat21 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlatb0.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_9.xyz + _LerpColorDark.xyz;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat1.x = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat8 = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15.x = u_xlat8 * 0.0208350997 + -0.0851330012;
    u_xlat15.x = u_xlat8 * u_xlat15.x + 0.180141002;
    u_xlat15.x = u_xlat8 * u_xlat15.x + -0.330299497;
    u_xlat8 = u_xlat8 * u_xlat15.x + 0.999866009;
    u_xlat15.x = u_xlat8 * u_xlat1.x;
    u_xlat15.x = u_xlat15.x * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb22 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat15.x = u_xlatb22 ? u_xlat15.x : float(0.0);
    u_xlat1.x = u_xlat1.x * u_xlat8 + u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb8 = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat8 = u_xlatb8 ? -3.14159274 : float(0.0);
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat8 = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat14.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat8<(-u_xlat8));
#else
    u_xlatb21 = u_xlat8<(-u_xlat8);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb21;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat1.x) : u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat15.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat15.xy;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb3 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb3.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_23 = (u_xlatb3.w) ? u_xlat4.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.z) ? u_xlat4.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.y) ? u_xlat4.x : u_xlat16_23;
    u_xlat16_3.xyz = _DetailColor.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat1.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb2 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat1.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_5.x + (-u_xlat16_19);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5.x);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5.x;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat14.x = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat21 = u_xlat14.x * 0.0208350997 + -0.0851330012;
    u_xlat21 = u_xlat14.x * u_xlat21 + 0.180141002;
    u_xlat21 = u_xlat14.x * u_xlat21 + -0.330299497;
    u_xlat14.x = u_xlat14.x * u_xlat21 + 0.999866009;
    u_xlat21 = u_xlat14.x * u_xlat0.x;
    u_xlat21 = u_xlat21 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb15 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat21 = u_xlatb15 ? u_xlat21 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat14.x + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb14 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat21 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.xyz = (u_xlatb4.x) ? u_xlat1.xyz : u_xlat16_2.xxx;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat1.x = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat8 = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15.x = u_xlat8 * 0.0208350997 + -0.0851330012;
    u_xlat15.x = u_xlat8 * u_xlat15.x + 0.180141002;
    u_xlat15.x = u_xlat8 * u_xlat15.x + -0.330299497;
    u_xlat8 = u_xlat8 * u_xlat15.x + 0.999866009;
    u_xlat15.x = u_xlat8 * u_xlat1.x;
    u_xlat15.x = u_xlat15.x * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb22 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat15.x = u_xlatb22 ? u_xlat15.x : float(0.0);
    u_xlat1.x = u_xlat1.x * u_xlat8 + u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb8 = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat8 = u_xlatb8 ? -3.14159274 : float(0.0);
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat8 = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat14.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat8<(-u_xlat8));
#else
    u_xlatb21 = u_xlat8<(-u_xlat8);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb21;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat1.x) : u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat21 = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat21;
    u_xlat15.xy = u_xlat3.yz * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_5.x = _Time.y * _NoiseTex_Uspeed + u_xlat15.x;
    u_xlat16_5.y = _Time.y * _NoiseTex_Vspeed + u_xlat15.y;
    u_xlat21 = u_xlat14.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat21;
    u_xlatb4 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb4.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb21) ? u_xlat1.w : 0.0;
    u_xlat16_23 = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_23;
    u_xlat16_23 = u_xlat16_23 + _Noise_Offset;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat15.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat15.xy;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb3 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb3.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_23) + u_xlat0.xw;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_23 = (u_xlatb3.w) ? u_xlat4.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.z) ? u_xlat4.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.y) ? u_xlat4.x : u_xlat16_23;
    u_xlat16_6.xyz = vec3(u_xlat16_23) * _DetailColor.xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat1.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb2 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat1.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_5.x + (-u_xlat16_19);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5.x);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5.x;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
mediump vec2 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat14.x = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat21 = u_xlat14.x * 0.0208350997 + -0.0851330012;
    u_xlat21 = u_xlat14.x * u_xlat21 + 0.180141002;
    u_xlat21 = u_xlat14.x * u_xlat21 + -0.330299497;
    u_xlat14.x = u_xlat14.x * u_xlat21 + 0.999866009;
    u_xlat21 = u_xlat14.x * u_xlat0.x;
    u_xlat21 = u_xlat21 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb15 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat21 = u_xlatb15 ? u_xlat21 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat14.x + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb14 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat21 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlatb0.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_9.xyz + _LerpColorDark.xyz;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat1.x = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat8 = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15.x = u_xlat8 * 0.0208350997 + -0.0851330012;
    u_xlat15.x = u_xlat8 * u_xlat15.x + 0.180141002;
    u_xlat15.x = u_xlat8 * u_xlat15.x + -0.330299497;
    u_xlat8 = u_xlat8 * u_xlat15.x + 0.999866009;
    u_xlat15.x = u_xlat8 * u_xlat1.x;
    u_xlat15.x = u_xlat15.x * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb22 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat15.x = u_xlatb22 ? u_xlat15.x : float(0.0);
    u_xlat1.x = u_xlat1.x * u_xlat8 + u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb8 = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat8 = u_xlatb8 ? -3.14159274 : float(0.0);
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat8 = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat14.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat8<(-u_xlat8));
#else
    u_xlatb21 = u_xlat8<(-u_xlat8);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb21;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat1.x) : u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat21 = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat21;
    u_xlat15.xy = u_xlat3.yz * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_5.x = _Time.y * _NoiseTex_Uspeed + u_xlat15.x;
    u_xlat16_5.y = _Time.y * _NoiseTex_Vspeed + u_xlat15.y;
    u_xlat21 = u_xlat14.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat21;
    u_xlatb4 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb4.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb21) ? u_xlat1.w : 0.0;
    u_xlat16_23 = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_23;
    u_xlat16_23 = u_xlat16_23 + _Noise_Offset;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat15.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat15.xy;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb3 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb3.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_23) + u_xlat0.xw;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_23 = (u_xlatb3.w) ? u_xlat4.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.z) ? u_xlat4.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.y) ? u_xlat4.x : u_xlat16_23;
    u_xlat16_3.xyz = _DetailColor.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat1.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb2 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat1.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_5.x + (-u_xlat16_19);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5.x);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5.x;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
mediump vec3 u_xlat16_6;
bvec4 u_xlatb6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_12;
vec2 u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bvec2 u_xlatb16;
vec2 u_xlat18;
mediump float u_xlat16_20;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat2.x = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat2.x = u_xlat24 * u_xlat2.x + 0.180141002;
    u_xlat2.x = u_xlat24 * u_xlat2.x + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat2.x + 0.999866009;
    u_xlat2.x = u_xlat24 * u_xlat16.x;
    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat2.x : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16.x = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16.x ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16.x = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16.x = u_xlatb24 && u_xlatb16.x;
    u_xlat0.x = (u_xlatb16.x) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _Time.y * _DetailTex_Uspeed;
    u_xlat16.x = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat16.x;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat3.x = u_xlat16.x + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xz = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat18.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat16.x = _Time.y * _DetailTex_Vspeed;
    u_xlat16.x = u_xlat0.x * _DetailTexAnnularUV_TilingV + u_xlat16.x;
    u_xlat3.y = u_xlat16.x + _DetailTexAnnularUV_OffsetV;
    u_xlat16.xy = u_xlat18.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_4.x = _Time.y * _DetailTex_Uspeed + u_xlat16.x;
    u_xlat16_4.y = _Time.y * _DetailTex_Vspeed + u_xlat16.y;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_4.xy;
    u_xlat3 = texture(_DetailTex, u_xlat16.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb16.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb16.x) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * _DetailColor.xyz;
    u_xlat16.xy = u_xlat18.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18.xy = u_xlat18.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat18.xy;
    u_xlat1 = texture(_BaseTex, u_xlat16.xy);
    u_xlatb16.xy = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 5.0, 4.0, 5.0)).xy;
    u_xlat16_28 = (u_xlatb16.y) ? 1.0 : 0.0;
    u_xlat16_28 = (u_xlatb16.x) ? u_xlat1.w : u_xlat16_28;
    u_xlatb6 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_28 = (u_xlatb6.w) ? u_xlat1.z : u_xlat16_28;
    u_xlat16_28 = (u_xlatb6.z) ? u_xlat1.y : u_xlat16_28;
    u_xlat16_28 = (u_xlatb6.y) ? u_xlat1.x : u_xlat16_28;
    u_xlat16_7.xyz = (u_xlatb6.x) ? u_xlat1.xyz : vec3(u_xlat16_28);
    u_xlat16_6.xyz = u_xlat16_7.xyz * _BaseColor.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorBrightness);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vs_COLOR0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlat16.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat0.x * _MaskTexAnnularUV_TilingV + u_xlat16.x;
    u_xlat2.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_4.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_12;
    u_xlat16_20 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_4.x + (-u_xlat16_20);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16_20>=u_xlat16_4.x);
#else
    u_xlatb16.x = u_xlat16_20>=u_xlat16_4.x;
#endif
    u_xlati16 = (u_xlatb16.x) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb2.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb2.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_2COLORLERPTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec2 u_xlat16_4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
mediump vec2 u_xlat16_11;
vec2 u_xlat14;
lowp float u_xlat10_14;
int u_xlati14;
bvec2 u_xlatb14;
vec2 u_xlat16;
mediump float u_xlat16_18;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_14 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat16_1 = u_xlat10_14 * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat14.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat14.x = float(1.0) / u_xlat14.x;
    u_xlat21 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat14.x = u_xlat14.x * u_xlat21;
    u_xlat21 = u_xlat14.x * u_xlat14.x;
    u_xlat2.x = u_xlat21 * 0.0208350997 + -0.0851330012;
    u_xlat2.x = u_xlat21 * u_xlat2.x + 0.180141002;
    u_xlat2.x = u_xlat21 * u_xlat2.x + -0.330299497;
    u_xlat21 = u_xlat21 * u_xlat2.x + 0.999866009;
    u_xlat2.x = u_xlat21 * u_xlat14.x;
    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat2.x : float(0.0);
    u_xlat0.x = u_xlat14.x * u_xlat21 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb14.x = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat14.x = u_xlatb14.x ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14.x = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlat21 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
    u_xlatb14.x = u_xlatb21 && u_xlatb14.x;
    u_xlat0.x = (u_xlatb14.x) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat14.x = _Time.y * _DetailTex_Uspeed;
    u_xlat14.x = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat14.x;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat3.x = u_xlat14.x + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xz = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat16.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat14.x = _Time.y * _DetailTex_Vspeed;
    u_xlat14.x = u_xlat0.x * _DetailTexAnnularUV_TilingV + u_xlat14.x;
    u_xlat3.y = u_xlat14.x + _DetailTexAnnularUV_OffsetV;
    u_xlat14.xy = u_xlat16.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_4.x = _Time.y * _DetailTex_Uspeed + u_xlat14.x;
    u_xlat16_4.y = _Time.y * _DetailTex_Vspeed + u_xlat14.y;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat14.xy = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_4.xy;
    u_xlat3 = texture(_DetailTex, u_xlat14.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb14.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb14.x) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat14.xy = u_xlat16.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat16.xy = u_xlat16.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_11.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat16.xy;
    u_xlat1 = texture(_BaseTex, u_xlat14.xy);
    u_xlatb14.xy = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 5.0, 4.0, 5.0)).xy;
    u_xlat16_25 = (u_xlatb14.y) ? 1.0 : 0.0;
    u_xlat16_25 = (u_xlatb14.x) ? u_xlat1.w : u_xlat16_25;
    u_xlatb5 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_25 = (u_xlatb5.w) ? u_xlat1.z : u_xlat16_25;
    u_xlat16_25 = (u_xlatb5.z) ? u_xlat1.y : u_xlat16_25;
    u_xlatb14.x = u_xlatb5.x || u_xlatb5.y;
    u_xlat16_25 = (u_xlatb14.x) ? u_xlat1.x : u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = _DetailColor.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorBrightness);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vs_COLOR0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    u_xlat14.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat0.x * _MaskTexAnnularUV_TilingV + u_xlat14.x;
    u_xlat2.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_11.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_4.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_11.x = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_11.x = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_11.x;
    u_xlat16_11.x = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_11.x;
    u_xlat16_11.x = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_11.x;
    u_xlat16_18 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_11.x * u_xlat16_4.x + (-u_xlat16_18);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat16_18>=u_xlat16_4.x);
#else
    u_xlatb14.x = u_xlat16_18>=u_xlat16_4.x;
#endif
    u_xlati14 = (u_xlatb14.x) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb2.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb2.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
mediump vec3 u_xlat16_6;
bvec4 u_xlatb6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_12;
vec2 u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
vec2 u_xlat18;
mediump float u_xlat16_20;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat2.x = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat2.x = u_xlat24 * u_xlat2.x + 0.180141002;
    u_xlat2.x = u_xlat24 * u_xlat2.x + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat2.x + 0.999866009;
    u_xlat2.x = u_xlat24 * u_xlat16.x;
    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat2.x : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16 = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16 = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat16.x;
    u_xlat16.xy = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat18.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat16.x = dot(u_xlat16.xy, u_xlat16.xy);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlat3.xy = u_xlat18.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_4.x = _Time.y * _NoiseTex_Uspeed + u_xlat3.x;
    u_xlat16_4.y = _Time.y * _NoiseTex_Vspeed + u_xlat3.y;
    u_xlatb1 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.xy = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_4.xy;
    u_xlat3 = texture(_NoiseTex, u_xlat2.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat3.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat3.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlat0.xw = u_xlat18.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_5.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_5.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_5.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat16_4.xx + u_xlat0.xw;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * _DetailColor.xyz;
    u_xlat0.xw = u_xlat18.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18.xy = u_xlat18.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat18.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xw);
    u_xlatb0.xw = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 0.0, 5.0)).xw;
    u_xlat16_28 = (u_xlatb0.w) ? 1.0 : 0.0;
    u_xlat16_28 = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_28;
    u_xlatb6 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_28 = (u_xlatb6.w) ? u_xlat1.z : u_xlat16_28;
    u_xlat16_28 = (u_xlatb6.z) ? u_xlat1.y : u_xlat16_28;
    u_xlat16_28 = (u_xlatb6.y) ? u_xlat1.x : u_xlat16_28;
    u_xlat16_7.xyz = (u_xlatb6.x) ? u_xlat1.xyz : vec3(u_xlat16_28);
    u_xlat16_6.xyz = u_xlat16_7.xyz * _BaseColor.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorBrightness);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vs_COLOR0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat2.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_4.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_12;
    u_xlat16_20 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_4.x + (-u_xlat16_20);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_20>=u_xlat16_4.x);
#else
    u_xlatb16 = u_xlat16_20>=u_xlat16_4.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb2.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb2.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec2 u_xlat16_4;
mediump vec2 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec2 u_xlat16_12;
vec2 u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
vec2 u_xlat18;
mediump float u_xlat16_20;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat2.x = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat2.x = u_xlat24 * u_xlat2.x + 0.180141002;
    u_xlat2.x = u_xlat24 * u_xlat2.x + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat2.x + 0.999866009;
    u_xlat2.x = u_xlat24 * u_xlat16.x;
    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat2.x : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16 = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16 = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat16.x;
    u_xlat16.xy = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat18.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat16.x = dot(u_xlat16.xy, u_xlat16.xy);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlat3.xy = u_xlat18.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_4.x = _Time.y * _NoiseTex_Uspeed + u_xlat3.x;
    u_xlat16_4.y = _Time.y * _NoiseTex_Vspeed + u_xlat3.y;
    u_xlatb1 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.xy = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_4.xy;
    u_xlat3 = texture(_NoiseTex, u_xlat2.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat3.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat3.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlat0.xw = u_xlat18.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_5.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_5.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_5.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat16_4.xx + u_xlat0.xw;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat0.xw = u_xlat18.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18.xy = u_xlat18.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_12.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat18.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xw);
    u_xlatb0.xw = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 0.0, 5.0)).xw;
    u_xlat16_28 = (u_xlatb0.w) ? 1.0 : 0.0;
    u_xlat16_28 = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_28;
    u_xlatb5 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_28 = (u_xlatb5.w) ? u_xlat1.z : u_xlat16_28;
    u_xlat16_28 = (u_xlatb5.z) ? u_xlat1.y : u_xlat16_28;
    u_xlatb0.x = u_xlatb5.x || u_xlatb5.y;
    u_xlat16_28 = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + _LerpColorDark.xyz;
    u_xlat16_7.xyz = _DetailColor.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_ColorBrightness);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat2.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_12.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_4.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12.x = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_12.x = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_12.x;
    u_xlat16_12.x = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_12.x;
    u_xlat16_12.x = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_12.x;
    u_xlat16_20 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12.x * u_xlat16_4.x + (-u_xlat16_20);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_20>=u_xlat16_4.x);
#else
    u_xlatb16 = u_xlat16_20>=u_xlat16_4.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb2.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb2.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
mediump vec3 u_xlat16_6;
bvec4 u_xlatb6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_12;
vec2 u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bvec2 u_xlatb16;
vec2 u_xlat18;
mediump float u_xlat16_20;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat2.x = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat2.x = u_xlat24 * u_xlat2.x + 0.180141002;
    u_xlat2.x = u_xlat24 * u_xlat2.x + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat2.x + 0.999866009;
    u_xlat2.x = u_xlat24 * u_xlat16.x;
    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat2.x : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16.x = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16.x ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16.x = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16.x = u_xlatb24 && u_xlatb16.x;
    u_xlat0.x = (u_xlatb16.x) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _Time.y * _DetailTex_Uspeed;
    u_xlat16.x = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat16.x;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat3.x = u_xlat16.x + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xz = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat18.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat16.x = _Time.y * _DetailTex_Vspeed;
    u_xlat16.x = u_xlat0.x * _DetailTexAnnularUV_TilingV + u_xlat16.x;
    u_xlat3.y = u_xlat16.x + _DetailTexAnnularUV_OffsetV;
    u_xlat16.xy = u_xlat18.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_4.x = _Time.y * _DetailTex_Uspeed + u_xlat16.x;
    u_xlat16_4.y = _Time.y * _DetailTex_Vspeed + u_xlat16.y;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_4.xy;
    u_xlat3 = texture(_DetailTex, u_xlat16.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb16.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb16.x) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * _DetailColor.xyz;
    u_xlat16.xy = u_xlat18.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18.xy = u_xlat18.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat18.xy;
    u_xlat1 = texture(_BaseTex, u_xlat16.xy);
    u_xlatb16.xy = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 5.0, 4.0, 5.0)).xy;
    u_xlat16_28 = (u_xlatb16.y) ? 1.0 : 0.0;
    u_xlat16_28 = (u_xlatb16.x) ? u_xlat1.w : u_xlat16_28;
    u_xlatb6 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_28 = (u_xlatb6.w) ? u_xlat1.z : u_xlat16_28;
    u_xlat16_28 = (u_xlatb6.z) ? u_xlat1.y : u_xlat16_28;
    u_xlat16_28 = (u_xlatb6.y) ? u_xlat1.x : u_xlat16_28;
    u_xlat16_7.xyz = (u_xlatb6.x) ? u_xlat1.xyz : vec3(u_xlat16_28);
    u_xlat16_6.xyz = u_xlat16_7.xyz * _BaseColor.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorBrightness);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vs_COLOR0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlat16.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat0.x * _MaskTexAnnularUV_TilingV + u_xlat16.x;
    u_xlat2.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_4.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_12;
    u_xlat16_20 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_4.x + (-u_xlat16_20);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16_20>=u_xlat16_4.x);
#else
    u_xlatb16.x = u_xlat16_20>=u_xlat16_4.x;
#endif
    u_xlati16 = (u_xlatb16.x) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb2.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb2.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_2COLORLERPTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec2 u_xlat16_4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
mediump vec2 u_xlat16_11;
vec2 u_xlat14;
lowp float u_xlat10_14;
int u_xlati14;
bvec2 u_xlatb14;
vec2 u_xlat16;
mediump float u_xlat16_18;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_14 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat16_1 = u_xlat10_14 * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat14.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat14.x = float(1.0) / u_xlat14.x;
    u_xlat21 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat14.x = u_xlat14.x * u_xlat21;
    u_xlat21 = u_xlat14.x * u_xlat14.x;
    u_xlat2.x = u_xlat21 * 0.0208350997 + -0.0851330012;
    u_xlat2.x = u_xlat21 * u_xlat2.x + 0.180141002;
    u_xlat2.x = u_xlat21 * u_xlat2.x + -0.330299497;
    u_xlat21 = u_xlat21 * u_xlat2.x + 0.999866009;
    u_xlat2.x = u_xlat21 * u_xlat14.x;
    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat2.x : float(0.0);
    u_xlat0.x = u_xlat14.x * u_xlat21 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb14.x = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat14.x = u_xlatb14.x ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14.x = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlat21 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
    u_xlatb14.x = u_xlatb21 && u_xlatb14.x;
    u_xlat0.x = (u_xlatb14.x) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat14.x = _Time.y * _DetailTex_Uspeed;
    u_xlat14.x = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat14.x;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat3.x = u_xlat14.x + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xz = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat16.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat14.x = _Time.y * _DetailTex_Vspeed;
    u_xlat14.x = u_xlat0.x * _DetailTexAnnularUV_TilingV + u_xlat14.x;
    u_xlat3.y = u_xlat14.x + _DetailTexAnnularUV_OffsetV;
    u_xlat14.xy = u_xlat16.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_4.x = _Time.y * _DetailTex_Uspeed + u_xlat14.x;
    u_xlat16_4.y = _Time.y * _DetailTex_Vspeed + u_xlat14.y;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat14.xy = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_4.xy;
    u_xlat3 = texture(_DetailTex, u_xlat14.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb14.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb14.x) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat14.xy = u_xlat16.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat16.xy = u_xlat16.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_11.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat16.xy;
    u_xlat1 = texture(_BaseTex, u_xlat14.xy);
    u_xlatb14.xy = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 5.0, 4.0, 5.0)).xy;
    u_xlat16_25 = (u_xlatb14.y) ? 1.0 : 0.0;
    u_xlat16_25 = (u_xlatb14.x) ? u_xlat1.w : u_xlat16_25;
    u_xlatb5 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_25 = (u_xlatb5.w) ? u_xlat1.z : u_xlat16_25;
    u_xlat16_25 = (u_xlatb5.z) ? u_xlat1.y : u_xlat16_25;
    u_xlatb14.x = u_xlatb5.x || u_xlatb5.y;
    u_xlat16_25 = (u_xlatb14.x) ? u_xlat1.x : u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = _DetailColor.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorBrightness);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vs_COLOR0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    u_xlat14.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat0.x * _MaskTexAnnularUV_TilingV + u_xlat14.x;
    u_xlat2.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_11.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_4.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_11.x = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_11.x = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_11.x;
    u_xlat16_11.x = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_11.x;
    u_xlat16_11.x = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_11.x;
    u_xlat16_18 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_11.x * u_xlat16_4.x + (-u_xlat16_18);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat16_18>=u_xlat16_4.x);
#else
    u_xlatb14.x = u_xlat16_18>=u_xlat16_4.x;
#endif
    u_xlati14 = (u_xlatb14.x) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb2.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb2.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
mediump vec3 u_xlat16_6;
bvec4 u_xlatb6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_12;
vec2 u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
vec2 u_xlat18;
mediump float u_xlat16_20;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat2.x = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat2.x = u_xlat24 * u_xlat2.x + 0.180141002;
    u_xlat2.x = u_xlat24 * u_xlat2.x + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat2.x + 0.999866009;
    u_xlat2.x = u_xlat24 * u_xlat16.x;
    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat2.x : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16 = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16 = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat16.x;
    u_xlat16.xy = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat18.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat16.x = dot(u_xlat16.xy, u_xlat16.xy);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlat3.xy = u_xlat18.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_4.x = _Time.y * _NoiseTex_Uspeed + u_xlat3.x;
    u_xlat16_4.y = _Time.y * _NoiseTex_Vspeed + u_xlat3.y;
    u_xlatb1 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.xy = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_4.xy;
    u_xlat3 = texture(_NoiseTex, u_xlat2.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat3.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat3.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlat0.xw = u_xlat18.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_5.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_5.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_5.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat16_4.xx + u_xlat0.xw;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * _DetailColor.xyz;
    u_xlat0.xw = u_xlat18.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18.xy = u_xlat18.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat18.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xw);
    u_xlatb0.xw = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 0.0, 5.0)).xw;
    u_xlat16_28 = (u_xlatb0.w) ? 1.0 : 0.0;
    u_xlat16_28 = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_28;
    u_xlatb6 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_28 = (u_xlatb6.w) ? u_xlat1.z : u_xlat16_28;
    u_xlat16_28 = (u_xlatb6.z) ? u_xlat1.y : u_xlat16_28;
    u_xlat16_28 = (u_xlatb6.y) ? u_xlat1.x : u_xlat16_28;
    u_xlat16_7.xyz = (u_xlatb6.x) ? u_xlat1.xyz : vec3(u_xlat16_28);
    u_xlat16_6.xyz = u_xlat16_7.xyz * _BaseColor.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorBrightness);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vs_COLOR0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat2.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_4.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_12;
    u_xlat16_20 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_4.x + (-u_xlat16_20);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_20>=u_xlat16_4.x);
#else
    u_xlatb16 = u_xlat16_20>=u_xlat16_4.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb2.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb2.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
mediump vec2 u_xlat16_4;
mediump vec2 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec2 u_xlat16_12;
vec2 u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
vec2 u_xlat18;
mediump float u_xlat16_20;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat2.x = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat2.x = u_xlat24 * u_xlat2.x + 0.180141002;
    u_xlat2.x = u_xlat24 * u_xlat2.x + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat2.x + 0.999866009;
    u_xlat2.x = u_xlat24 * u_xlat16.x;
    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat2.x : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16 = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16 = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat16.x;
    u_xlat16.xy = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat18.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat16.x = dot(u_xlat16.xy, u_xlat16.xy);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlat3.xy = u_xlat18.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_4.x = _Time.y * _NoiseTex_Uspeed + u_xlat3.x;
    u_xlat16_4.y = _Time.y * _NoiseTex_Vspeed + u_xlat3.y;
    u_xlatb1 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat2.xy = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_4.xy;
    u_xlat3 = texture(_NoiseTex, u_xlat2.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat2.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat3.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat3.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlat0.xw = u_xlat18.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_5.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_5.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_5.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat16_4.xx + u_xlat0.xw;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_4.x;
    u_xlat0.xw = u_xlat18.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat18.xy = u_xlat18.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_12.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat18.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xw);
    u_xlatb0.xw = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 0.0, 5.0)).xw;
    u_xlat16_28 = (u_xlatb0.w) ? 1.0 : 0.0;
    u_xlat16_28 = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_28;
    u_xlatb5 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_28 = (u_xlatb5.w) ? u_xlat1.z : u_xlat16_28;
    u_xlat16_28 = (u_xlatb5.z) ? u_xlat1.y : u_xlat16_28;
    u_xlatb0.x = u_xlatb5.x || u_xlatb5.y;
    u_xlat16_28 = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + _LerpColorDark.xyz;
    u_xlat16_7.xyz = _DetailColor.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_ColorBrightness);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat2.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat2.xy : u_xlat16_12.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_4.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_4.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_4.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12.x = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_12.x = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_12.x;
    u_xlat16_12.x = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_12.x;
    u_xlat16_12.x = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_12.x;
    u_xlat16_20 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12.x * u_xlat16_4.x + (-u_xlat16_20);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_20>=u_xlat16_4.x);
#else
    u_xlatb16 = u_xlat16_20>=u_xlat16_4.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb2.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb2.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_4.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
vec4 u_xlat3;
vec2 u_xlat4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat18;
int u_xlati18;
bvec2 u_xlatb18;
mediump float u_xlat16_24;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_33;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat9.xy = floor(u_xlat18.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat9.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat9.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat9.x * 2.0 + -1.0;
    u_xlat9.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<0.0);
#else
    u_xlatb9 = u_xlat9.x<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat9.xyz = u_xlat9.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat9.x = u_xlat0.y + u_xlat0.y;
    u_xlat9.x = u_xlat9.x / _VerticalFadeStart;
    u_xlat9.x = max(u_xlat9.x, 0.00999999978);
    u_xlat9.x = log2(u_xlat9.x);
    u_xlat9.x = u_xlat9.x * _VerticalFadeExp;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = min(u_xlat9.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat18.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat18.x = float(1.0) / u_xlat18.x;
    u_xlat27 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat18.x = u_xlat18.x * u_xlat27;
    u_xlat27 = u_xlat18.x * u_xlat18.x;
    u_xlat10 = u_xlat27 * 0.0208350997 + -0.0851330012;
    u_xlat10 = u_xlat27 * u_xlat10 + 0.180141002;
    u_xlat10 = u_xlat27 * u_xlat10 + -0.330299497;
    u_xlat27 = u_xlat27 * u_xlat10 + 0.999866009;
    u_xlat10 = u_xlat27 * u_xlat18.x;
    u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat10 : float(0.0);
    u_xlat0.x = u_xlat18.x * u_xlat27 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb18.x = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat18.x = u_xlatb18.x ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat18.x + u_xlat0.x;
    u_xlat18.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat18.x<(-u_xlat18.x));
#else
    u_xlatb18.x = u_xlat18.x<(-u_xlat18.x);
#endif
    u_xlat27 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat27>=(-u_xlat27));
#else
    u_xlatb27 = u_xlat27>=(-u_xlat27);
#endif
    u_xlatb18.x = u_xlatb27 && u_xlatb18.x;
    u_xlat0.x = (u_xlatb18.x) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat18.x = _Time.y * _DetailTex_Uspeed;
    u_xlat18.x = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat18.x;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat18.x + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xz = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat18.x = _Time.y * _DetailTex_Vspeed;
    u_xlat18.x = u_xlat0.x * _DetailTexAnnularUV_TilingV + u_xlat18.x;
    u_xlat4.y = u_xlat18.x + _DetailTexAnnularUV_OffsetV;
    u_xlat18.xy = u_xlat1.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_2.x = _Time.y * _DetailTex_Uspeed + u_xlat18.x;
    u_xlat16_2.y = _Time.y * _DetailTex_Vspeed + u_xlat18.y;
    u_xlatb5 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat18.xy = (u_xlatb5.x) ? u_xlat4.xy : u_xlat16_2.xy;
    u_xlat2 = texture(_DetailTex, u_xlat18.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb18.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_6.x = (u_xlatb18.x) ? u_xlat2.w : 0.0;
    u_xlat16_6.x = (u_xlatb5.w) ? u_xlat2.z : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb5.z) ? u_xlat2.y : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb5.y) ? u_xlat2.x : u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_6.xxx * _DetailColor.xyz;
    u_xlat18.xy = u_xlat1.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.xy = u_xlat1.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_7.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat18.xy);
    u_xlatb18.xy = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 5.0, 4.0, 5.0)).xy;
    u_xlat16_33 = (u_xlatb18.y) ? 1.0 : 0.0;
    u_xlat16_33 = (u_xlatb18.x) ? u_xlat1.w : u_xlat16_33;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_33 = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_33;
    u_xlat16_33 = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_33;
    u_xlat16_33 = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_33;
    u_xlat16_8.xyz = (u_xlatb4.x) ? u_xlat1.xyz : vec3(u_xlat16_33);
    u_xlat16_1.xyz = u_xlat16_8.xyz * _BaseColor.xyz + u_xlat16_6.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorBrightness);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz;
    u_xlat18.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat0.x * _MaskTexAnnularUV_TilingV + u_xlat18.x;
    u_xlat3.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_7.xy;
    u_xlat3 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_6.x = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_6.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_6.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_15 = (u_xlatb1.w) ? u_xlat2.w : 0.0;
    u_xlat16_15 = (u_xlatb1.z) ? u_xlat2.z : u_xlat16_15;
    u_xlat16_15 = (u_xlatb1.y) ? u_xlat2.y : u_xlat16_15;
    u_xlat16_15 = (u_xlatb1.x) ? u_xlat2.x : u_xlat16_15;
    u_xlat16_24 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_15 * u_xlat16_6.x + (-u_xlat16_24);
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat16_24>=u_xlat16_6.x);
#else
    u_xlatb18.x = u_xlat16_24>=u_xlat16_6.x;
#endif
    u_xlati18 = (u_xlatb18.x) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat18.x = u_xlatb1.y ? intBitsToFloat(u_xlati18) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat18.x;
    u_xlat16_6.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat9.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_2COLORLERPTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
vec4 u_xlat3;
vec2 u_xlat4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat9;
mediump vec2 u_xlat16_14;
vec2 u_xlat16;
int u_xlati16;
bvec2 u_xlatb16;
mediump float u_xlat16_22;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_30;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat8.xy = floor(u_xlat16.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat8.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat8.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat8.x * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat9 = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat9 = u_xlat24 * u_xlat9 + 0.180141002;
    u_xlat9 = u_xlat24 * u_xlat9 + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat9 + 0.999866009;
    u_xlat9 = u_xlat24 * u_xlat16.x;
    u_xlat9 = u_xlat9 * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat9 : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16.x = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16.x ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16.x = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16.x = u_xlatb24 && u_xlatb16.x;
    u_xlat0.x = (u_xlatb16.x) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _Time.y * _DetailTex_Uspeed;
    u_xlat16.x = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat16.x;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat16.x + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xz = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat16.x = _Time.y * _DetailTex_Vspeed;
    u_xlat16.x = u_xlat0.x * _DetailTexAnnularUV_TilingV + u_xlat16.x;
    u_xlat4.y = u_xlat16.x + _DetailTexAnnularUV_OffsetV;
    u_xlat16.xy = u_xlat1.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_2.x = _Time.y * _DetailTex_Uspeed + u_xlat16.x;
    u_xlat16_2.y = _Time.y * _DetailTex_Vspeed + u_xlat16.y;
    u_xlatb5 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = (u_xlatb5.x) ? u_xlat4.xy : u_xlat16_2.xy;
    u_xlat2 = texture(_DetailTex, u_xlat16.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb16.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_6 = (u_xlatb16.x) ? u_xlat2.w : 0.0;
    u_xlat16_6 = (u_xlatb5.w) ? u_xlat2.z : u_xlat16_6;
    u_xlat16_6 = (u_xlatb5.z) ? u_xlat2.y : u_xlat16_6;
    u_xlat16_6 = (u_xlatb5.y) ? u_xlat2.x : u_xlat16_6;
    u_xlat16.xy = u_xlat1.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.xy = u_xlat1.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_14.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat16.xy);
    u_xlatb16.xy = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 5.0, 4.0, 5.0)).xy;
    u_xlat16_30 = (u_xlatb16.y) ? 1.0 : 0.0;
    u_xlat16_30 = (u_xlatb16.x) ? u_xlat1.w : u_xlat16_30;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_30 = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_30;
    u_xlat16_30 = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_30;
    u_xlatb16.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_30 = (u_xlatb16.x) ? u_xlat1.x : u_xlat16_30;
    u_xlat16_30 = u_xlat16_30 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_7.xyz + _LerpColorDark.xyz;
    u_xlat16_1.xyz = _DetailColor.xyz * vec3(u_xlat16_6) + u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorBrightness);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz;
    u_xlat16.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat0.x * _MaskTexAnnularUV_TilingV + u_xlat16.x;
    u_xlat3.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_14.xy;
    u_xlat3 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_6 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_6 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_6;
    u_xlat16_6 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_6;
    u_xlat16_6 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_6;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_14.x = (u_xlatb1.w) ? u_xlat2.w : 0.0;
    u_xlat16_14.x = (u_xlatb1.z) ? u_xlat2.z : u_xlat16_14.x;
    u_xlat16_14.x = (u_xlatb1.y) ? u_xlat2.y : u_xlat16_14.x;
    u_xlat16_14.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat16_14.x;
    u_xlat16_22 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_14.x * u_xlat16_6 + (-u_xlat16_22);
    u_xlat16_6 = u_xlat16_6 * u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16_22>=u_xlat16_6);
#else
    u_xlatb16.x = u_xlat16_22>=u_xlat16_6;
#endif
    u_xlati16 = (u_xlatb16.x) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb1.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_6 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bvec4 u_xlatb2;
vec2 u_xlat3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat9;
mediump float u_xlat16_13;
vec2 u_xlat16;
int u_xlati16;
bool u_xlatb16;
vec2 u_xlat17;
mediump float u_xlat16_21;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat8.xy = floor(u_xlat16.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat8.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat8.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat8.x * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat9 = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat9 = u_xlat24 * u_xlat9 + 0.180141002;
    u_xlat9 = u_xlat24 * u_xlat9 + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat9 + 0.999866009;
    u_xlat9 = u_xlat24 * u_xlat16.x;
    u_xlat9 = u_xlat9 * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat9 : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16 = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16 = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat16.x;
    u_xlat16.xy = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat16.x = dot(u_xlat16.xy, u_xlat16.xy);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlat17.xy = u_xlat1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_2.x = _Time.y * _NoiseTex_Uspeed + u_xlat17.x;
    u_xlat16_2.y = _Time.y * _NoiseTex_Vspeed + u_xlat17.y;
    u_xlatb4 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat17.xy = (u_xlatb4.x) ? u_xlat3.xy : u_xlat16_2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat17.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb24) ? u_xlat2.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat2.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat2.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat2.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlat0.xw = u_xlat1.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlatb2 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb2.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat16_5.xx + u_xlat0.xw;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _DetailColor.xyz;
    u_xlat0.xw = u_xlat1.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.xy = u_xlat1.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xw);
    u_xlatb0.xw = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 0.0, 5.0)).xw;
    u_xlat16_29 = (u_xlatb0.w) ? 1.0 : 0.0;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_29;
    u_xlatb2 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_29 = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_29;
    u_xlat16_29 = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_29;
    u_xlat16_29 = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_29;
    u_xlat16_7.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat16_29);
    u_xlat16_1.xyz = u_xlat16_7.xyz * _BaseColor.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorBrightness);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat3.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_6.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_5.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_13 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_13 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_13;
    u_xlat16_21 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_13 * u_xlat16_5.x + (-u_xlat16_21);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_21>=u_xlat16_5.x);
#else
    u_xlatb16 = u_xlat16_21>=u_xlat16_5.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb1.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bvec4 u_xlatb2;
vec2 u_xlat3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
mediump vec2 u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat14.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat14.x = float(1.0) / u_xlat14.x;
    u_xlat21 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat14.x = u_xlat14.x * u_xlat21;
    u_xlat21 = u_xlat14.x * u_xlat14.x;
    u_xlat8 = u_xlat21 * 0.0208350997 + -0.0851330012;
    u_xlat8 = u_xlat21 * u_xlat8 + 0.180141002;
    u_xlat8 = u_xlat21 * u_xlat8 + -0.330299497;
    u_xlat21 = u_xlat21 * u_xlat8 + 0.999866009;
    u_xlat8 = u_xlat21 * u_xlat14.x;
    u_xlat8 = u_xlat8 * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat8 : float(0.0);
    u_xlat0.x = u_xlat14.x * u_xlat21 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb14 = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlat21 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat14.x = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat14.x;
    u_xlat14.xy = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat14.x = dot(u_xlat14.xy, u_xlat14.xy);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat21 = u_xlat14.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_2.x = _Time.y * _NoiseTex_Uspeed + u_xlat15.x;
    u_xlat16_2.y = _Time.y * _NoiseTex_Vspeed + u_xlat15.y;
    u_xlatb4 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15.xy = (u_xlatb4.x) ? u_xlat3.xy : u_xlat16_2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat15.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_5 = (u_xlatb21) ? u_xlat2.w : 0.0;
    u_xlat16_5 = (u_xlatb4.w) ? u_xlat2.z : u_xlat16_5;
    u_xlat16_5 = (u_xlatb4.z) ? u_xlat2.y : u_xlat16_5;
    u_xlat16_5 = (u_xlatb4.y) ? u_xlat2.x : u_xlat16_5;
    u_xlat16_5 = u_xlat16_5 + _Noise_Offset;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlat0.xw = u_xlat1.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlatb2 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb2.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_5) + u_xlat0.xw;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_5 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_5 = (u_xlatb2.w) ? u_xlat4.z : u_xlat16_5;
    u_xlat16_5 = (u_xlatb2.z) ? u_xlat4.y : u_xlat16_5;
    u_xlat16_5 = (u_xlatb2.y) ? u_xlat4.x : u_xlat16_5;
    u_xlat0.xw = u_xlat1.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.xy = u_xlat1.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_12.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xw);
    u_xlatb0.xw = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 0.0, 5.0)).xw;
    u_xlat16_26 = (u_xlatb0.w) ? 1.0 : 0.0;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_26;
    u_xlatb2 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_26 = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_26;
    u_xlatb0.x = u_xlatb2.x || u_xlatb2.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_26;
    u_xlat16_26 = u_xlat16_26 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + _LerpColorDark.xyz;
    u_xlat16_1.xyz = _DetailColor.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorBrightness);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat3.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_12.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5 = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_5 = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_5;
    u_xlat16_5 = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_5;
    u_xlat16_5 = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_5;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12.x = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12.x = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12.x;
    u_xlat16_12.x = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12.x;
    u_xlat16_12.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12.x;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12.x * u_xlat16_5 + (-u_xlat16_19);
    u_xlat16_5 = u_xlat16_5 * u_xlat16_12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
vec4 u_xlat3;
vec2 u_xlat4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat18;
int u_xlati18;
bvec2 u_xlatb18;
mediump float u_xlat16_24;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_33;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat9.xy = floor(u_xlat18.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat9.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat9.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat9.x * 2.0 + -1.0;
    u_xlat9.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<0.0);
#else
    u_xlatb9 = u_xlat9.x<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat9.xyz = u_xlat9.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat9.x = u_xlat0.y + u_xlat0.y;
    u_xlat9.x = u_xlat9.x / _VerticalFadeStart;
    u_xlat9.x = max(u_xlat9.x, 0.00999999978);
    u_xlat9.x = log2(u_xlat9.x);
    u_xlat9.x = u_xlat9.x * _VerticalFadeExp;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = min(u_xlat9.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat18.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat18.x = float(1.0) / u_xlat18.x;
    u_xlat27 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat18.x = u_xlat18.x * u_xlat27;
    u_xlat27 = u_xlat18.x * u_xlat18.x;
    u_xlat10 = u_xlat27 * 0.0208350997 + -0.0851330012;
    u_xlat10 = u_xlat27 * u_xlat10 + 0.180141002;
    u_xlat10 = u_xlat27 * u_xlat10 + -0.330299497;
    u_xlat27 = u_xlat27 * u_xlat10 + 0.999866009;
    u_xlat10 = u_xlat27 * u_xlat18.x;
    u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat10 : float(0.0);
    u_xlat0.x = u_xlat18.x * u_xlat27 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb18.x = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat18.x = u_xlatb18.x ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat18.x + u_xlat0.x;
    u_xlat18.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat18.x<(-u_xlat18.x));
#else
    u_xlatb18.x = u_xlat18.x<(-u_xlat18.x);
#endif
    u_xlat27 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat27>=(-u_xlat27));
#else
    u_xlatb27 = u_xlat27>=(-u_xlat27);
#endif
    u_xlatb18.x = u_xlatb27 && u_xlatb18.x;
    u_xlat0.x = (u_xlatb18.x) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat18.x = _Time.y * _DetailTex_Uspeed;
    u_xlat18.x = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat18.x;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat18.x + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xz = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat18.x = _Time.y * _DetailTex_Vspeed;
    u_xlat18.x = u_xlat0.x * _DetailTexAnnularUV_TilingV + u_xlat18.x;
    u_xlat4.y = u_xlat18.x + _DetailTexAnnularUV_OffsetV;
    u_xlat18.xy = u_xlat1.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_2.x = _Time.y * _DetailTex_Uspeed + u_xlat18.x;
    u_xlat16_2.y = _Time.y * _DetailTex_Vspeed + u_xlat18.y;
    u_xlatb5 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat18.xy = (u_xlatb5.x) ? u_xlat4.xy : u_xlat16_2.xy;
    u_xlat2 = texture(_DetailTex, u_xlat18.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb18.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_6.x = (u_xlatb18.x) ? u_xlat2.w : 0.0;
    u_xlat16_6.x = (u_xlatb5.w) ? u_xlat2.z : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb5.z) ? u_xlat2.y : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb5.y) ? u_xlat2.x : u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_6.xxx * _DetailColor.xyz;
    u_xlat18.xy = u_xlat1.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.xy = u_xlat1.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_7.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat18.xy);
    u_xlatb18.xy = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 5.0, 4.0, 5.0)).xy;
    u_xlat16_33 = (u_xlatb18.y) ? 1.0 : 0.0;
    u_xlat16_33 = (u_xlatb18.x) ? u_xlat1.w : u_xlat16_33;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_33 = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_33;
    u_xlat16_33 = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_33;
    u_xlat16_33 = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_33;
    u_xlat16_8.xyz = (u_xlatb4.x) ? u_xlat1.xyz : vec3(u_xlat16_33);
    u_xlat16_1.xyz = u_xlat16_8.xyz * _BaseColor.xyz + u_xlat16_6.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorBrightness);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz;
    u_xlat18.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat0.x * _MaskTexAnnularUV_TilingV + u_xlat18.x;
    u_xlat3.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_7.xy;
    u_xlat3 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_6.x = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_6.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_6.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_15 = (u_xlatb1.w) ? u_xlat2.w : 0.0;
    u_xlat16_15 = (u_xlatb1.z) ? u_xlat2.z : u_xlat16_15;
    u_xlat16_15 = (u_xlatb1.y) ? u_xlat2.y : u_xlat16_15;
    u_xlat16_15 = (u_xlatb1.x) ? u_xlat2.x : u_xlat16_15;
    u_xlat16_24 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_15 * u_xlat16_6.x + (-u_xlat16_24);
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat16_24>=u_xlat16_6.x);
#else
    u_xlatb18.x = u_xlat16_24>=u_xlat16_6.x;
#endif
    u_xlati18 = (u_xlatb18.x) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat18.x = u_xlatb1.y ? intBitsToFloat(u_xlati18) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat18.x;
    u_xlat16_6.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat9.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_2COLORLERPTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
vec4 u_xlat3;
vec2 u_xlat4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat9;
mediump vec2 u_xlat16_14;
vec2 u_xlat16;
int u_xlati16;
bvec2 u_xlatb16;
mediump float u_xlat16_22;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_30;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat8.xy = floor(u_xlat16.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat8.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat8.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat8.x * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat9 = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat9 = u_xlat24 * u_xlat9 + 0.180141002;
    u_xlat9 = u_xlat24 * u_xlat9 + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat9 + 0.999866009;
    u_xlat9 = u_xlat24 * u_xlat16.x;
    u_xlat9 = u_xlat9 * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat9 : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16.x = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16.x ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16.x = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16.x = u_xlatb24 && u_xlatb16.x;
    u_xlat0.x = (u_xlatb16.x) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _Time.y * _DetailTex_Uspeed;
    u_xlat16.x = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat16.x;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat16.x + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xz = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat16.x = _Time.y * _DetailTex_Vspeed;
    u_xlat16.x = u_xlat0.x * _DetailTexAnnularUV_TilingV + u_xlat16.x;
    u_xlat4.y = u_xlat16.x + _DetailTexAnnularUV_OffsetV;
    u_xlat16.xy = u_xlat1.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_2.x = _Time.y * _DetailTex_Uspeed + u_xlat16.x;
    u_xlat16_2.y = _Time.y * _DetailTex_Vspeed + u_xlat16.y;
    u_xlatb5 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = (u_xlatb5.x) ? u_xlat4.xy : u_xlat16_2.xy;
    u_xlat2 = texture(_DetailTex, u_xlat16.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb16.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_6 = (u_xlatb16.x) ? u_xlat2.w : 0.0;
    u_xlat16_6 = (u_xlatb5.w) ? u_xlat2.z : u_xlat16_6;
    u_xlat16_6 = (u_xlatb5.z) ? u_xlat2.y : u_xlat16_6;
    u_xlat16_6 = (u_xlatb5.y) ? u_xlat2.x : u_xlat16_6;
    u_xlat16.xy = u_xlat1.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.xy = u_xlat1.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_14.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat16.xy);
    u_xlatb16.xy = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 5.0, 4.0, 5.0)).xy;
    u_xlat16_30 = (u_xlatb16.y) ? 1.0 : 0.0;
    u_xlat16_30 = (u_xlatb16.x) ? u_xlat1.w : u_xlat16_30;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_30 = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_30;
    u_xlat16_30 = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_30;
    u_xlatb16.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_30 = (u_xlatb16.x) ? u_xlat1.x : u_xlat16_30;
    u_xlat16_30 = u_xlat16_30 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_7.xyz + _LerpColorDark.xyz;
    u_xlat16_1.xyz = _DetailColor.xyz * vec3(u_xlat16_6) + u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorBrightness);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz;
    u_xlat16.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat0.x * _MaskTexAnnularUV_TilingV + u_xlat16.x;
    u_xlat3.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_14.xy;
    u_xlat3 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_6 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_6 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_6;
    u_xlat16_6 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_6;
    u_xlat16_6 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_6;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_14.x = (u_xlatb1.w) ? u_xlat2.w : 0.0;
    u_xlat16_14.x = (u_xlatb1.z) ? u_xlat2.z : u_xlat16_14.x;
    u_xlat16_14.x = (u_xlatb1.y) ? u_xlat2.y : u_xlat16_14.x;
    u_xlat16_14.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat16_14.x;
    u_xlat16_22 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_14.x * u_xlat16_6 + (-u_xlat16_22);
    u_xlat16_6 = u_xlat16_6 * u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16_22>=u_xlat16_6);
#else
    u_xlatb16.x = u_xlat16_22>=u_xlat16_6;
#endif
    u_xlati16 = (u_xlatb16.x) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb1.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_6 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bvec4 u_xlatb2;
vec2 u_xlat3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat9;
mediump float u_xlat16_13;
vec2 u_xlat16;
int u_xlati16;
bool u_xlatb16;
vec2 u_xlat17;
mediump float u_xlat16_21;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat8.xy = floor(u_xlat16.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat8.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat8.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat8.x * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat16.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat16.x = float(1.0) / u_xlat16.x;
    u_xlat24 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat16.x = u_xlat16.x * u_xlat24;
    u_xlat24 = u_xlat16.x * u_xlat16.x;
    u_xlat9 = u_xlat24 * 0.0208350997 + -0.0851330012;
    u_xlat9 = u_xlat24 * u_xlat9 + 0.180141002;
    u_xlat9 = u_xlat24 * u_xlat9 + -0.330299497;
    u_xlat24 = u_xlat24 * u_xlat9 + 0.999866009;
    u_xlat9 = u_xlat24 * u_xlat16.x;
    u_xlat9 = u_xlat9 * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat9 : float(0.0);
    u_xlat0.x = u_xlat16.x * u_xlat24 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb16 = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat16.x = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16.x + u_xlat0.x;
    u_xlat16.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16.x<(-u_xlat16.x));
#else
    u_xlatb16 = u_xlat16.x<(-u_xlat16.x);
#endif
    u_xlat24 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat16.x = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat16.x;
    u_xlat16.xy = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat16.x = dot(u_xlat16.xy, u_xlat16.xy);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlat17.xy = u_xlat1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_2.x = _Time.y * _NoiseTex_Uspeed + u_xlat17.x;
    u_xlat16_2.y = _Time.y * _NoiseTex_Vspeed + u_xlat17.y;
    u_xlatb4 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat17.xy = (u_xlatb4.x) ? u_xlat3.xy : u_xlat16_2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat17.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb24) ? u_xlat2.w : 0.0;
    u_xlat16_5.x = (u_xlatb4.w) ? u_xlat2.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.z) ? u_xlat2.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat2.x : u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlat0.xw = u_xlat1.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlatb2 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb2.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat16_5.xx + u_xlat0.xw;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _DetailColor.xyz;
    u_xlat0.xw = u_xlat1.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.xy = u_xlat1.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xw);
    u_xlatb0.xw = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 0.0, 5.0)).xw;
    u_xlat16_29 = (u_xlatb0.w) ? 1.0 : 0.0;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_29;
    u_xlatb2 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_29 = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_29;
    u_xlat16_29 = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_29;
    u_xlat16_29 = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_29;
    u_xlat16_7.xyz = (u_xlatb2.x) ? u_xlat1.xyz : vec3(u_xlat16_29);
    u_xlat16_1.xyz = u_xlat16_7.xyz * _BaseColor.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorBrightness);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat3.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_6.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_5.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_13 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_13 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_13;
    u_xlat16_21 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_13 * u_xlat16_5.x + (-u_xlat16_21);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_21>=u_xlat16_5.x);
#else
    u_xlatb16 = u_xlat16_21>=u_xlat16_5.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16.x = u_xlatb1.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat16.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bvec4 u_xlatb2;
vec2 u_xlat3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
mediump vec2 u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.y = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.z = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = abs(u_xlat1.x);
    u_xlat14.x = max(abs(u_xlat1.z), u_xlat0.x);
    u_xlat14.x = float(1.0) / u_xlat14.x;
    u_xlat21 = min(abs(u_xlat1.z), u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(abs(u_xlat1.z)<u_xlat0.x);
#else
    u_xlatb0.x = abs(u_xlat1.z)<u_xlat0.x;
#endif
    u_xlat14.x = u_xlat14.x * u_xlat21;
    u_xlat21 = u_xlat14.x * u_xlat14.x;
    u_xlat8 = u_xlat21 * 0.0208350997 + -0.0851330012;
    u_xlat8 = u_xlat21 * u_xlat8 + 0.180141002;
    u_xlat8 = u_xlat21 * u_xlat8 + -0.330299497;
    u_xlat21 = u_xlat21 * u_xlat8 + 0.999866009;
    u_xlat8 = u_xlat21 * u_xlat14.x;
    u_xlat8 = u_xlat8 * -2.0 + 1.57079637;
    u_xlat0.x = u_xlatb0.x ? u_xlat8 : float(0.0);
    u_xlat0.x = u_xlat14.x * u_xlat21 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.z<(-u_xlat1.z));
#else
    u_xlatb14 = u_xlat1.z<(-u_xlat1.z);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlat21 = max(u_xlat1.z, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat14.x = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat14.x;
    u_xlat14.xy = u_xlat1.xz * vec2(-1.0, 1.0);
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xy = vec2(u_xlat1.w + float(0.5), u_xlat1.z + float(0.5));
    u_xlat14.x = dot(u_xlat14.xy, u_xlat14.xy);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat21 = u_xlat14.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_2.x = _Time.y * _NoiseTex_Uspeed + u_xlat15.x;
    u_xlat16_2.y = _Time.y * _NoiseTex_Vspeed + u_xlat15.y;
    u_xlatb4 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15.xy = (u_xlatb4.x) ? u_xlat3.xy : u_xlat16_2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat15.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_5 = (u_xlatb21) ? u_xlat2.w : 0.0;
    u_xlat16_5 = (u_xlatb4.w) ? u_xlat2.z : u_xlat16_5;
    u_xlat16_5 = (u_xlatb4.z) ? u_xlat2.y : u_xlat16_5;
    u_xlat16_5 = (u_xlatb4.y) ? u_xlat2.x : u_xlat16_5;
    u_xlat16_5 = u_xlat16_5 + _Noise_Offset;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat3.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlat0.xw = u_xlat1.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlatb2 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb2.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_5) + u_xlat0.xw;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_5 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_5 = (u_xlatb2.w) ? u_xlat4.z : u_xlat16_5;
    u_xlat16_5 = (u_xlatb2.z) ? u_xlat4.y : u_xlat16_5;
    u_xlat16_5 = (u_xlatb2.y) ? u_xlat4.x : u_xlat16_5;
    u_xlat0.xw = u_xlat1.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.xy = u_xlat1.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_12.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat0.xw);
    u_xlatb0.xw = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 0.0, 5.0)).xw;
    u_xlat16_26 = (u_xlatb0.w) ? 1.0 : 0.0;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_26;
    u_xlatb2 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_26 = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_26;
    u_xlatb0.x = u_xlatb2.x || u_xlatb2.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_26;
    u_xlat16_26 = u_xlat16_26 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + _LerpColorDark.xyz;
    u_xlat16_1.xyz = _DetailColor.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_ColorBrightness);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_1.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat3.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat3.xy : u_xlat16_12.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5 = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_5 = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_5;
    u_xlat16_5 = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_5;
    u_xlat16_5 = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_5;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12.x = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12.x = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12.x;
    u_xlat16_12.x = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12.x;
    u_xlat16_12.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12.x;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12.x * u_xlat16_5 + (-u_xlat16_19);
    u_xlat16_5 = u_xlat16_5 * u_xlat16_12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5 = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "ANNULAR_UV_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat12;
mediump float u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
bool u_xlatb20;
mediump float u_xlat16_22;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16 = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat16 = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat16 * 0.0208350997 + -0.0851330012;
    u_xlat24 = u_xlat16 * u_xlat24 + 0.180141002;
    u_xlat24 = u_xlat16 * u_xlat24 + -0.330299497;
    u_xlat16 = u_xlat16 * u_xlat24 + 0.999866009;
    u_xlat24 = u_xlat16 * u_xlat0.x;
    u_xlat24 = u_xlat24 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb27 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat24 = u_xlatb27 ? u_xlat24 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat16 + u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb16 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat16 = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16 + u_xlat0.x;
    u_xlat16 = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat24 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<(-u_xlat16));
#else
    u_xlatb16 = u_xlat16<(-u_xlat16);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.xyz = (u_xlatb4.x) ? u_xlat1.xyz : u_xlat16_2.xxx;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat27 = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat4.x = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat4.x = u_xlat27 * u_xlat27;
    u_xlat12 = u_xlat4.x * 0.0208350997 + -0.0851330012;
    u_xlat12 = u_xlat4.x * u_xlat12 + 0.180141002;
    u_xlat12 = u_xlat4.x * u_xlat12 + -0.330299497;
    u_xlat4.x = u_xlat4.x * u_xlat12 + 0.999866009;
    u_xlat12 = u_xlat27 * u_xlat4.x;
    u_xlat12 = u_xlat12 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb20 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat12 = u_xlatb20 ? u_xlat12 : float(0.0);
    u_xlat27 = u_xlat27 * u_xlat4.x + u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb4.x = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat4.x = u_xlatb4.x ? -3.14159274 : float(0.0);
    u_xlat27 = u_xlat27 + u_xlat4.x;
    u_xlat4.x = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat16 = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat16 + u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat4.x<(-u_xlat4.x));
#else
    u_xlatb24 = u_xlat4.x<(-u_xlat4.x);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb24;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat27) : u_xlat27;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat5.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat3.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat16_7.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_7.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16 * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat5.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat5.xy : u_xlat16_7.xy;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_26;
    u_xlat16_7.xyz = vec3(u_xlat16_26) * _DetailColor.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorBrightness);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vs_COLOR0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16 * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_6.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_6.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_6.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_14 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_14 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_14;
    u_xlat16_14 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_14;
    u_xlat16_14 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_14;
    u_xlat16_22 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_14 * u_xlat16_6.x + (-u_xlat16_22);
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_22>=u_xlat16_6.x);
#else
    u_xlatb16 = u_xlat16_22>=u_xlat16_6.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb3.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16 = u_xlatb3.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : u_xlat16;
    u_xlat16_6.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
bool u_xlatb20;
mediump float u_xlat16_22;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16 = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat16 = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat16 * 0.0208350997 + -0.0851330012;
    u_xlat24 = u_xlat16 * u_xlat24 + 0.180141002;
    u_xlat24 = u_xlat16 * u_xlat24 + -0.330299497;
    u_xlat16 = u_xlat16 * u_xlat24 + 0.999866009;
    u_xlat24 = u_xlat16 * u_xlat0.x;
    u_xlat24 = u_xlat24 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb27 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat24 = u_xlatb27 ? u_xlat24 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat16 + u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb16 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat16 = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16 + u_xlat0.x;
    u_xlat16 = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat24 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<(-u_xlat16));
#else
    u_xlatb16 = u_xlat16<(-u_xlat16);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlatb0.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + _LerpColorDark.xyz;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat27 = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat4.x = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat4.x = u_xlat27 * u_xlat27;
    u_xlat12 = u_xlat4.x * 0.0208350997 + -0.0851330012;
    u_xlat12 = u_xlat4.x * u_xlat12 + 0.180141002;
    u_xlat12 = u_xlat4.x * u_xlat12 + -0.330299497;
    u_xlat4.x = u_xlat4.x * u_xlat12 + 0.999866009;
    u_xlat12 = u_xlat27 * u_xlat4.x;
    u_xlat12 = u_xlat12 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb20 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat12 = u_xlatb20 ? u_xlat12 : float(0.0);
    u_xlat27 = u_xlat27 * u_xlat4.x + u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb4.x = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat4.x = u_xlatb4.x ? -3.14159274 : float(0.0);
    u_xlat27 = u_xlat27 + u_xlat4.x;
    u_xlat4.x = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat16 = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat16 + u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat4.x<(-u_xlat4.x));
#else
    u_xlatb24 = u_xlat4.x<(-u_xlat4.x);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb24;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat27) : u_xlat27;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat5.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat3.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat16_7.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_7.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16 * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat5.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat5.xy : u_xlat16_7.xy;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_26;
    u_xlat16_5.xyz = _DetailColor.xyz * vec3(u_xlat16_26) + u_xlat16_2.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorBrightness);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vs_COLOR0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16 * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_6.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_6.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_6.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_14 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_14 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_14;
    u_xlat16_14 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_14;
    u_xlat16_14 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_14;
    u_xlat16_22 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_14 * u_xlat16_6.x + (-u_xlat16_22);
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_22>=u_xlat16_6.x);
#else
    u_xlatb16 = u_xlat16_22>=u_xlat16_6.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb3.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16 = u_xlatb3.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : u_xlat16;
    u_xlat16_6.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "ANNULAR_UV_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat12;
mediump float u_xlat16_13;
float u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
bool u_xlatb20;
mediump float u_xlat16_21;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16 = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat16 = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat16 * 0.0208350997 + -0.0851330012;
    u_xlat24 = u_xlat16 * u_xlat24 + 0.180141002;
    u_xlat24 = u_xlat16 * u_xlat24 + -0.330299497;
    u_xlat16 = u_xlat16 * u_xlat24 + 0.999866009;
    u_xlat24 = u_xlat16 * u_xlat0.x;
    u_xlat24 = u_xlat24 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb27 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat24 = u_xlatb27 ? u_xlat24 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat16 + u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb16 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat16 = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16 + u_xlat0.x;
    u_xlat16 = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat24 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<(-u_xlat16));
#else
    u_xlatb16 = u_xlat16<(-u_xlat16);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.xyz = (u_xlatb4.x) ? u_xlat1.xyz : u_xlat16_2.xxx;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat27 = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat4.x = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat4.x = u_xlat27 * u_xlat27;
    u_xlat12 = u_xlat4.x * 0.0208350997 + -0.0851330012;
    u_xlat12 = u_xlat4.x * u_xlat12 + 0.180141002;
    u_xlat12 = u_xlat4.x * u_xlat12 + -0.330299497;
    u_xlat4.x = u_xlat4.x * u_xlat12 + 0.999866009;
    u_xlat12 = u_xlat27 * u_xlat4.x;
    u_xlat12 = u_xlat12 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb20 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat12 = u_xlatb20 ? u_xlat12 : float(0.0);
    u_xlat27 = u_xlat27 * u_xlat4.x + u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb4.x = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat4.x = u_xlatb4.x ? -3.14159274 : float(0.0);
    u_xlat27 = u_xlat27 + u_xlat4.x;
    u_xlat4.x = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat16 = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat16 + u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat4.x<(-u_xlat4.x));
#else
    u_xlatb24 = u_xlat4.x<(-u_xlat4.x);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb24;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat27) : u_xlat27;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat24 = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _NoiseTex_Uspeed + u_xlat24;
    u_xlat3.xw = u_xlat3.yz * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_5.x = _Time.y * _NoiseTex_Uspeed + u_xlat3.x;
    u_xlat16_5.y = _Time.y * _NoiseTex_Vspeed + u_xlat3.w;
    u_xlat24 = u_xlat16 * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat4.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlatb1 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xw = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_5.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat3.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb24) ? u_xlat4.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat4.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat4.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat4.x : u_xlat16_26;
    u_xlat16_26 = u_xlat16_26 + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat6.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat3.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat16_7.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_7.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16 * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat6.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat6.xy : u_xlat16_7.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_26) + u_xlat0.xw;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_26;
    u_xlat16_7.xyz = vec3(u_xlat16_26) * _DetailColor.xyz;
    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorBrightness);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vs_COLOR0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16 * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_5.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_13 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_13 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_13;
    u_xlat16_21 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_13 * u_xlat16_5.x + (-u_xlat16_21);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_21>=u_xlat16_5.x);
#else
    u_xlatb16 = u_xlat16_21>=u_xlat16_5.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb3.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16 = u_xlatb3.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : u_xlat16;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_13;
float u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
bool u_xlatb20;
mediump float u_xlat16_21;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16 = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat16 = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat16 * 0.0208350997 + -0.0851330012;
    u_xlat24 = u_xlat16 * u_xlat24 + 0.180141002;
    u_xlat24 = u_xlat16 * u_xlat24 + -0.330299497;
    u_xlat16 = u_xlat16 * u_xlat24 + 0.999866009;
    u_xlat24 = u_xlat16 * u_xlat0.x;
    u_xlat24 = u_xlat24 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb27 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat24 = u_xlatb27 ? u_xlat24 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat16 + u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb16 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat16 = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16 + u_xlat0.x;
    u_xlat16 = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat24 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<(-u_xlat16));
#else
    u_xlatb16 = u_xlat16<(-u_xlat16);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlatb0.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + _LerpColorDark.xyz;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat27 = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat4.x = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat4.x = u_xlat27 * u_xlat27;
    u_xlat12 = u_xlat4.x * 0.0208350997 + -0.0851330012;
    u_xlat12 = u_xlat4.x * u_xlat12 + 0.180141002;
    u_xlat12 = u_xlat4.x * u_xlat12 + -0.330299497;
    u_xlat4.x = u_xlat4.x * u_xlat12 + 0.999866009;
    u_xlat12 = u_xlat27 * u_xlat4.x;
    u_xlat12 = u_xlat12 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb20 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat12 = u_xlatb20 ? u_xlat12 : float(0.0);
    u_xlat27 = u_xlat27 * u_xlat4.x + u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb4.x = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat4.x = u_xlatb4.x ? -3.14159274 : float(0.0);
    u_xlat27 = u_xlat27 + u_xlat4.x;
    u_xlat4.x = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat16 = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat16 + u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat4.x<(-u_xlat4.x));
#else
    u_xlatb24 = u_xlat4.x<(-u_xlat4.x);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb24;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat27) : u_xlat27;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat24 = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _NoiseTex_Uspeed + u_xlat24;
    u_xlat3.xw = u_xlat3.yz * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_5.x = _Time.y * _NoiseTex_Uspeed + u_xlat3.x;
    u_xlat16_5.y = _Time.y * _NoiseTex_Vspeed + u_xlat3.w;
    u_xlat24 = u_xlat16 * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat4.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlatb1 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xw = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_5.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat3.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb24) ? u_xlat4.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat4.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat4.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat4.x : u_xlat16_26;
    u_xlat16_26 = u_xlat16_26 + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat6.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat3.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat16_7.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_7.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16 * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat6.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat6.xy : u_xlat16_7.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_26) + u_xlat0.xw;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_26;
    u_xlat16_6.xyz = _DetailColor.xyz * vec3(u_xlat16_26) + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorBrightness);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vs_COLOR0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16 * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_5.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_13 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_13 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_13;
    u_xlat16_21 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_13 * u_xlat16_5.x + (-u_xlat16_21);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_21>=u_xlat16_5.x);
#else
    u_xlatb16 = u_xlat16_21>=u_xlat16_5.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb3.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16 = u_xlatb3.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : u_xlat16;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "ANNULAR_UV_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat12;
mediump float u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
bool u_xlatb20;
mediump float u_xlat16_22;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16 = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat16 = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat16 * 0.0208350997 + -0.0851330012;
    u_xlat24 = u_xlat16 * u_xlat24 + 0.180141002;
    u_xlat24 = u_xlat16 * u_xlat24 + -0.330299497;
    u_xlat16 = u_xlat16 * u_xlat24 + 0.999866009;
    u_xlat24 = u_xlat16 * u_xlat0.x;
    u_xlat24 = u_xlat24 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb27 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat24 = u_xlatb27 ? u_xlat24 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat16 + u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb16 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat16 = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16 + u_xlat0.x;
    u_xlat16 = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat24 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<(-u_xlat16));
#else
    u_xlatb16 = u_xlat16<(-u_xlat16);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.xyz = (u_xlatb4.x) ? u_xlat1.xyz : u_xlat16_2.xxx;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat27 = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat4.x = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat4.x = u_xlat27 * u_xlat27;
    u_xlat12 = u_xlat4.x * 0.0208350997 + -0.0851330012;
    u_xlat12 = u_xlat4.x * u_xlat12 + 0.180141002;
    u_xlat12 = u_xlat4.x * u_xlat12 + -0.330299497;
    u_xlat4.x = u_xlat4.x * u_xlat12 + 0.999866009;
    u_xlat12 = u_xlat27 * u_xlat4.x;
    u_xlat12 = u_xlat12 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb20 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat12 = u_xlatb20 ? u_xlat12 : float(0.0);
    u_xlat27 = u_xlat27 * u_xlat4.x + u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb4.x = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat4.x = u_xlatb4.x ? -3.14159274 : float(0.0);
    u_xlat27 = u_xlat27 + u_xlat4.x;
    u_xlat4.x = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat16 = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat16 + u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat4.x<(-u_xlat4.x));
#else
    u_xlatb24 = u_xlat4.x<(-u_xlat4.x);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb24;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat27) : u_xlat27;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat5.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat3.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat16_7.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_7.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16 * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat5.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat5.xy : u_xlat16_7.xy;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_26;
    u_xlat16_7.xyz = vec3(u_xlat16_26) * _DetailColor.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorBrightness);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vs_COLOR0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16 * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_6.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_6.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_6.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_14 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_14 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_14;
    u_xlat16_14 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_14;
    u_xlat16_14 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_14;
    u_xlat16_22 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_14 * u_xlat16_6.x + (-u_xlat16_22);
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_22>=u_xlat16_6.x);
#else
    u_xlatb16 = u_xlat16_22>=u_xlat16_6.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb3.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16 = u_xlatb3.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : u_xlat16;
    u_xlat16_6.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
bool u_xlatb20;
mediump float u_xlat16_22;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16 = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat16 = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat16 * 0.0208350997 + -0.0851330012;
    u_xlat24 = u_xlat16 * u_xlat24 + 0.180141002;
    u_xlat24 = u_xlat16 * u_xlat24 + -0.330299497;
    u_xlat16 = u_xlat16 * u_xlat24 + 0.999866009;
    u_xlat24 = u_xlat16 * u_xlat0.x;
    u_xlat24 = u_xlat24 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb27 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat24 = u_xlatb27 ? u_xlat24 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat16 + u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb16 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat16 = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16 + u_xlat0.x;
    u_xlat16 = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat24 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<(-u_xlat16));
#else
    u_xlatb16 = u_xlat16<(-u_xlat16);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlatb0.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + _LerpColorDark.xyz;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat27 = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat4.x = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat4.x = u_xlat27 * u_xlat27;
    u_xlat12 = u_xlat4.x * 0.0208350997 + -0.0851330012;
    u_xlat12 = u_xlat4.x * u_xlat12 + 0.180141002;
    u_xlat12 = u_xlat4.x * u_xlat12 + -0.330299497;
    u_xlat4.x = u_xlat4.x * u_xlat12 + 0.999866009;
    u_xlat12 = u_xlat27 * u_xlat4.x;
    u_xlat12 = u_xlat12 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb20 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat12 = u_xlatb20 ? u_xlat12 : float(0.0);
    u_xlat27 = u_xlat27 * u_xlat4.x + u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb4.x = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat4.x = u_xlatb4.x ? -3.14159274 : float(0.0);
    u_xlat27 = u_xlat27 + u_xlat4.x;
    u_xlat4.x = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat16 = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat16 + u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat4.x<(-u_xlat4.x));
#else
    u_xlatb24 = u_xlat4.x<(-u_xlat4.x);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb24;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat27) : u_xlat27;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat5.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat3.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_6.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat16_7.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_7.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16 * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat5.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat5.xy : u_xlat16_7.xy;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_26;
    u_xlat16_5.xyz = _DetailColor.xyz * vec3(u_xlat16_26) + u_xlat16_2.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_ColorBrightness);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vs_COLOR0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16 * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_6.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_6.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_6.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_14 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_14 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_14;
    u_xlat16_14 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_14;
    u_xlat16_14 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_14;
    u_xlat16_22 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_14 * u_xlat16_6.x + (-u_xlat16_22);
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_22>=u_xlat16_6.x);
#else
    u_xlatb16 = u_xlat16_22>=u_xlat16_6.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb3.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16 = u_xlatb3.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : u_xlat16;
    u_xlat16_6.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "ANNULAR_UV_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat12;
mediump float u_xlat16_13;
float u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
bool u_xlatb20;
mediump float u_xlat16_21;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16 = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat16 = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat16 * 0.0208350997 + -0.0851330012;
    u_xlat24 = u_xlat16 * u_xlat24 + 0.180141002;
    u_xlat24 = u_xlat16 * u_xlat24 + -0.330299497;
    u_xlat16 = u_xlat16 * u_xlat24 + 0.999866009;
    u_xlat24 = u_xlat16 * u_xlat0.x;
    u_xlat24 = u_xlat24 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb27 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat24 = u_xlatb27 ? u_xlat24 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat16 + u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb16 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat16 = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16 + u_xlat0.x;
    u_xlat16 = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat24 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<(-u_xlat16));
#else
    u_xlatb16 = u_xlat16<(-u_xlat16);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.xyz = (u_xlatb4.x) ? u_xlat1.xyz : u_xlat16_2.xxx;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat27 = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat4.x = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat4.x = u_xlat27 * u_xlat27;
    u_xlat12 = u_xlat4.x * 0.0208350997 + -0.0851330012;
    u_xlat12 = u_xlat4.x * u_xlat12 + 0.180141002;
    u_xlat12 = u_xlat4.x * u_xlat12 + -0.330299497;
    u_xlat4.x = u_xlat4.x * u_xlat12 + 0.999866009;
    u_xlat12 = u_xlat27 * u_xlat4.x;
    u_xlat12 = u_xlat12 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb20 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat12 = u_xlatb20 ? u_xlat12 : float(0.0);
    u_xlat27 = u_xlat27 * u_xlat4.x + u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb4.x = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat4.x = u_xlatb4.x ? -3.14159274 : float(0.0);
    u_xlat27 = u_xlat27 + u_xlat4.x;
    u_xlat4.x = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat16 = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat16 + u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat4.x<(-u_xlat4.x));
#else
    u_xlatb24 = u_xlat4.x<(-u_xlat4.x);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb24;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat27) : u_xlat27;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat24 = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _NoiseTex_Uspeed + u_xlat24;
    u_xlat3.xw = u_xlat3.yz * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_5.x = _Time.y * _NoiseTex_Uspeed + u_xlat3.x;
    u_xlat16_5.y = _Time.y * _NoiseTex_Vspeed + u_xlat3.w;
    u_xlat24 = u_xlat16 * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat4.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlatb1 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xw = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_5.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat3.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb24) ? u_xlat4.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat4.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat4.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat4.x : u_xlat16_26;
    u_xlat16_26 = u_xlat16_26 + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat6.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat3.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat16_7.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_7.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16 * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat6.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat6.xy : u_xlat16_7.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_26) + u_xlat0.xw;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_26;
    u_xlat16_7.xyz = vec3(u_xlat16_26) * _DetailColor.xyz;
    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorBrightness);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vs_COLOR0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16 * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_5.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_13 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_13 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_13;
    u_xlat16_21 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_13 * u_xlat16_5.x + (-u_xlat16_21);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_21>=u_xlat16_5.x);
#else
    u_xlatb16 = u_xlat16_21>=u_xlat16_5.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb3.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16 = u_xlatb3.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : u_xlat16;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform lowp sampler2D _CameraNormalsTexture;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_13;
float u_xlat16;
lowp float u_xlat10_16;
int u_xlati16;
bool u_xlatb16;
bool u_xlatb20;
mediump float u_xlat16_21;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_16 = texture(_CameraNormalsTexture, u_xlat0.xy).y;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat16_1 = u_xlat10_16 * 2.0 + -1.0;
    u_xlat8.x = u_xlat16_1 + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<0.0);
#else
    u_xlatb8 = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8) * int(0xffffffffu))!=0){discard;}
    u_xlat8.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat8.x = u_xlat0.y + u_xlat0.y;
    u_xlat8.x = u_xlat8.x / _VerticalFadeStart;
    u_xlat8.x = max(u_xlat8.x, 0.00999999978);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _VerticalFadeExp;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16 = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat16 = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat16 * 0.0208350997 + -0.0851330012;
    u_xlat24 = u_xlat16 * u_xlat24 + 0.180141002;
    u_xlat24 = u_xlat16 * u_xlat24 + -0.330299497;
    u_xlat16 = u_xlat16 * u_xlat24 + 0.999866009;
    u_xlat24 = u_xlat16 * u_xlat0.x;
    u_xlat24 = u_xlat24 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb27 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat24 = u_xlatb27 ? u_xlat24 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat16 + u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb16 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat16 = u_xlatb16 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat16 + u_xlat0.x;
    u_xlat16 = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat24 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat24>=(-u_xlat24));
#else
    u_xlatb24 = u_xlat24>=(-u_xlat24);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<(-u_xlat16));
#else
    u_xlatb16 = u_xlat16<(-u_xlat16);
#endif
    u_xlatb16 = u_xlatb24 && u_xlatb16;
    u_xlat0.x = (u_xlatb16) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlatb0.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + _LerpColorDark.xyz;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat27 = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat4.x = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat4.x = u_xlat27 * u_xlat27;
    u_xlat12 = u_xlat4.x * 0.0208350997 + -0.0851330012;
    u_xlat12 = u_xlat4.x * u_xlat12 + 0.180141002;
    u_xlat12 = u_xlat4.x * u_xlat12 + -0.330299497;
    u_xlat4.x = u_xlat4.x * u_xlat12 + 0.999866009;
    u_xlat12 = u_xlat27 * u_xlat4.x;
    u_xlat12 = u_xlat12 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb20 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat12 = u_xlatb20 ? u_xlat12 : float(0.0);
    u_xlat27 = u_xlat27 * u_xlat4.x + u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb4.x = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat4.x = u_xlatb4.x ? -3.14159274 : float(0.0);
    u_xlat27 = u_xlat27 + u_xlat4.x;
    u_xlat4.x = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat16 = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat16 + u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat4.x<(-u_xlat4.x));
#else
    u_xlatb24 = u_xlat4.x<(-u_xlat4.x);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb24;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat27) : u_xlat27;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat24 = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _NoiseTex_Uspeed + u_xlat24;
    u_xlat3.xw = u_xlat3.yz * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_5.x = _Time.y * _NoiseTex_Uspeed + u_xlat3.x;
    u_xlat16_5.y = _Time.y * _NoiseTex_Vspeed + u_xlat3.w;
    u_xlat24 = u_xlat16 * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat4.y = _Time.y * _NoiseTex_Vspeed + u_xlat24;
    u_xlatb1 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xw = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_5.xy;
    u_xlat4 = texture(_NoiseTex, u_xlat3.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb24 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb24) ? u_xlat4.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat4.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat4.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat4.x : u_xlat16_26;
    u_xlat16_26 = u_xlat16_26 + _Noise_Offset;
    u_xlat24 = _Time.y * _DetailTex_Uspeed;
    u_xlat24 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat24;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat4.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat6.x = u_xlat24 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat3.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat3.xy;
    u_xlat16_7.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_7.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat16 * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat6.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb1.x) ? u_xlat6.xy : u_xlat16_7.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_26) + u_xlat0.xw;
    u_xlat3 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat3.w : 0.0;
    u_xlat16_26 = (u_xlatb1.w) ? u_xlat3.z : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.z) ? u_xlat3.y : u_xlat16_26;
    u_xlat16_26 = (u_xlatb1.y) ? u_xlat3.x : u_xlat16_26;
    u_xlat16_6.xyz = _DetailColor.xyz * vec3(u_xlat16_26) + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_ColorBrightness);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vs_COLOR0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat16 * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb1 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb1.x) ? u_xlat4.xy : u_xlat16_5.xy;
    u_xlat2 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat2.w : 0.0;
    u_xlat16_5.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_13 = (u_xlatb1.w) ? u_xlat3.w : 0.0;
    u_xlat16_13 = (u_xlatb1.z) ? u_xlat3.z : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.y) ? u_xlat3.y : u_xlat16_13;
    u_xlat16_13 = (u_xlatb1.x) ? u_xlat3.x : u_xlat16_13;
    u_xlat16_21 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_13 * u_xlat16_5.x + (-u_xlat16_21);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_21>=u_xlat16_5.x);
#else
    u_xlatb16 = u_xlat16_21>=u_xlat16_5.x;
#endif
    u_xlati16 = (u_xlatb16) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb3.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16 = u_xlatb3.y ? intBitsToFloat(u_xlati16) : float(0.0);
    u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : u_xlat16;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat8.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat14.x = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat21 = u_xlat14.x * 0.0208350997 + -0.0851330012;
    u_xlat21 = u_xlat14.x * u_xlat21 + 0.180141002;
    u_xlat21 = u_xlat14.x * u_xlat21 + -0.330299497;
    u_xlat14.x = u_xlat14.x * u_xlat21 + 0.999866009;
    u_xlat21 = u_xlat14.x * u_xlat0.x;
    u_xlat21 = u_xlat21 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb15 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat21 = u_xlatb15 ? u_xlat21 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat14.x + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb14 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat21 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.xyz = (u_xlatb4.x) ? u_xlat1.xyz : u_xlat16_2.xxx;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat1.x = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat8 = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15.x = u_xlat8 * 0.0208350997 + -0.0851330012;
    u_xlat15.x = u_xlat8 * u_xlat15.x + 0.180141002;
    u_xlat15.x = u_xlat8 * u_xlat15.x + -0.330299497;
    u_xlat8 = u_xlat8 * u_xlat15.x + 0.999866009;
    u_xlat15.x = u_xlat8 * u_xlat1.x;
    u_xlat15.x = u_xlat15.x * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb22 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat15.x = u_xlatb22 ? u_xlat15.x : float(0.0);
    u_xlat1.x = u_xlat1.x * u_xlat8 + u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb8 = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat8 = u_xlatb8 ? -3.14159274 : float(0.0);
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat8 = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat14.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat8<(-u_xlat8));
#else
    u_xlatb21 = u_xlat8<(-u_xlat8);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb21;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat1.x) : u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat15.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat15.xy;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb3 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb3.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_23 = (u_xlatb3.w) ? u_xlat4.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.z) ? u_xlat4.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.y) ? u_xlat4.x : u_xlat16_23;
    u_xlat16_6.xyz = vec3(u_xlat16_23) * _DetailColor.xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat1.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb2 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat1.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_5.x + (-u_xlat16_19);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5.x);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5.x;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
mediump vec2 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat14.x = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat21 = u_xlat14.x * 0.0208350997 + -0.0851330012;
    u_xlat21 = u_xlat14.x * u_xlat21 + 0.180141002;
    u_xlat21 = u_xlat14.x * u_xlat21 + -0.330299497;
    u_xlat14.x = u_xlat14.x * u_xlat21 + 0.999866009;
    u_xlat21 = u_xlat14.x * u_xlat0.x;
    u_xlat21 = u_xlat21 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb15 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat21 = u_xlatb15 ? u_xlat21 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat14.x + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb14 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat21 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlatb0.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_9.xyz + _LerpColorDark.xyz;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat1.x = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat8 = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15.x = u_xlat8 * 0.0208350997 + -0.0851330012;
    u_xlat15.x = u_xlat8 * u_xlat15.x + 0.180141002;
    u_xlat15.x = u_xlat8 * u_xlat15.x + -0.330299497;
    u_xlat8 = u_xlat8 * u_xlat15.x + 0.999866009;
    u_xlat15.x = u_xlat8 * u_xlat1.x;
    u_xlat15.x = u_xlat15.x * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb22 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat15.x = u_xlatb22 ? u_xlat15.x : float(0.0);
    u_xlat1.x = u_xlat1.x * u_xlat8 + u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb8 = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat8 = u_xlatb8 ? -3.14159274 : float(0.0);
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat8 = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat14.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat8<(-u_xlat8));
#else
    u_xlatb21 = u_xlat8<(-u_xlat8);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb21;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat1.x) : u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat15.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat15.xy;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb3 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb3.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_23 = (u_xlatb3.w) ? u_xlat4.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.z) ? u_xlat4.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.y) ? u_xlat4.x : u_xlat16_23;
    u_xlat16_3.xyz = _DetailColor.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat1.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb2 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat1.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_5.x + (-u_xlat16_19);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5.x);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5.x;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat14.x = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat21 = u_xlat14.x * 0.0208350997 + -0.0851330012;
    u_xlat21 = u_xlat14.x * u_xlat21 + 0.180141002;
    u_xlat21 = u_xlat14.x * u_xlat21 + -0.330299497;
    u_xlat14.x = u_xlat14.x * u_xlat21 + 0.999866009;
    u_xlat21 = u_xlat14.x * u_xlat0.x;
    u_xlat21 = u_xlat21 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb15 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat21 = u_xlatb15 ? u_xlat21 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat14.x + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb14 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat21 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.xyz = (u_xlatb4.x) ? u_xlat1.xyz : u_xlat16_2.xxx;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat1.x = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat8 = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15.x = u_xlat8 * 0.0208350997 + -0.0851330012;
    u_xlat15.x = u_xlat8 * u_xlat15.x + 0.180141002;
    u_xlat15.x = u_xlat8 * u_xlat15.x + -0.330299497;
    u_xlat8 = u_xlat8 * u_xlat15.x + 0.999866009;
    u_xlat15.x = u_xlat8 * u_xlat1.x;
    u_xlat15.x = u_xlat15.x * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb22 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat15.x = u_xlatb22 ? u_xlat15.x : float(0.0);
    u_xlat1.x = u_xlat1.x * u_xlat8 + u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb8 = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat8 = u_xlatb8 ? -3.14159274 : float(0.0);
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat8 = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat14.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat8<(-u_xlat8));
#else
    u_xlatb21 = u_xlat8<(-u_xlat8);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb21;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat1.x) : u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat21 = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat21;
    u_xlat15.xy = u_xlat3.yz * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_5.x = _Time.y * _NoiseTex_Uspeed + u_xlat15.x;
    u_xlat16_5.y = _Time.y * _NoiseTex_Vspeed + u_xlat15.y;
    u_xlat21 = u_xlat14.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat21;
    u_xlatb4 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb4.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb21) ? u_xlat1.w : 0.0;
    u_xlat16_23 = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_23;
    u_xlat16_23 = u_xlat16_23 + _Noise_Offset;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat15.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat15.xy;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb3 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb3.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_23) + u_xlat0.xw;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_23 = (u_xlatb3.w) ? u_xlat4.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.z) ? u_xlat4.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.y) ? u_xlat4.x : u_xlat16_23;
    u_xlat16_6.xyz = vec3(u_xlat16_23) * _DetailColor.xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat1.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb2 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat1.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_5.x + (-u_xlat16_19);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5.x);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5.x;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _EulerAngleY;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
mediump vec2 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat14.x = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat21 = u_xlat14.x * 0.0208350997 + -0.0851330012;
    u_xlat21 = u_xlat14.x * u_xlat21 + 0.180141002;
    u_xlat21 = u_xlat14.x * u_xlat21 + -0.330299497;
    u_xlat14.x = u_xlat14.x * u_xlat21 + 0.999866009;
    u_xlat21 = u_xlat14.x * u_xlat0.x;
    u_xlat21 = u_xlat21 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb15 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat21 = u_xlatb15 ? u_xlat21 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat14.x + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb14 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat21 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlatb0.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_9.xyz + _LerpColorDark.xyz;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat1.x = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat8 = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15.x = u_xlat8 * 0.0208350997 + -0.0851330012;
    u_xlat15.x = u_xlat8 * u_xlat15.x + 0.180141002;
    u_xlat15.x = u_xlat8 * u_xlat15.x + -0.330299497;
    u_xlat8 = u_xlat8 * u_xlat15.x + 0.999866009;
    u_xlat15.x = u_xlat8 * u_xlat1.x;
    u_xlat15.x = u_xlat15.x * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb22 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat15.x = u_xlatb22 ? u_xlat15.x : float(0.0);
    u_xlat1.x = u_xlat1.x * u_xlat8 + u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb8 = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat8 = u_xlatb8 ? -3.14159274 : float(0.0);
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat8 = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat14.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat8<(-u_xlat8));
#else
    u_xlatb21 = u_xlat8<(-u_xlat8);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb21;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat1.x) : u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat21 = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat21;
    u_xlat15.xy = u_xlat3.yz * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_5.x = _Time.y * _NoiseTex_Uspeed + u_xlat15.x;
    u_xlat16_5.y = _Time.y * _NoiseTex_Vspeed + u_xlat15.y;
    u_xlat21 = u_xlat14.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat21;
    u_xlatb4 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb4.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb21) ? u_xlat1.w : 0.0;
    u_xlat16_23 = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_23;
    u_xlat16_23 = u_xlat16_23 + _Noise_Offset;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat15.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat15.xy;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb3 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb3.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_23) + u_xlat0.xw;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_23 = (u_xlatb3.w) ? u_xlat4.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.z) ? u_xlat4.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.y) ? u_xlat4.x : u_xlat16_23;
    u_xlat16_3.xyz = _DetailColor.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat1.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb2 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat1.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_5.x + (-u_xlat16_19);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5.x);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5.x;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat14.x = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat21 = u_xlat14.x * 0.0208350997 + -0.0851330012;
    u_xlat21 = u_xlat14.x * u_xlat21 + 0.180141002;
    u_xlat21 = u_xlat14.x * u_xlat21 + -0.330299497;
    u_xlat14.x = u_xlat14.x * u_xlat21 + 0.999866009;
    u_xlat21 = u_xlat14.x * u_xlat0.x;
    u_xlat21 = u_xlat21 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb15 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat21 = u_xlatb15 ? u_xlat21 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat14.x + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb14 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat21 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.xyz = (u_xlatb4.x) ? u_xlat1.xyz : u_xlat16_2.xxx;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat1.x = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat8 = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15.x = u_xlat8 * 0.0208350997 + -0.0851330012;
    u_xlat15.x = u_xlat8 * u_xlat15.x + 0.180141002;
    u_xlat15.x = u_xlat8 * u_xlat15.x + -0.330299497;
    u_xlat8 = u_xlat8 * u_xlat15.x + 0.999866009;
    u_xlat15.x = u_xlat8 * u_xlat1.x;
    u_xlat15.x = u_xlat15.x * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb22 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat15.x = u_xlatb22 ? u_xlat15.x : float(0.0);
    u_xlat1.x = u_xlat1.x * u_xlat8 + u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb8 = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat8 = u_xlatb8 ? -3.14159274 : float(0.0);
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat8 = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat14.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat8<(-u_xlat8));
#else
    u_xlatb21 = u_xlat8<(-u_xlat8);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb21;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat1.x) : u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat15.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat15.xy;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb3 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb3.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_23 = (u_xlatb3.w) ? u_xlat4.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.z) ? u_xlat4.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.y) ? u_xlat4.x : u_xlat16_23;
    u_xlat16_6.xyz = vec3(u_xlat16_23) * _DetailColor.xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat1.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb2 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat1.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_5.x + (-u_xlat16_19);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5.x);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5.x;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
mediump vec2 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat14.x = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat21 = u_xlat14.x * 0.0208350997 + -0.0851330012;
    u_xlat21 = u_xlat14.x * u_xlat21 + 0.180141002;
    u_xlat21 = u_xlat14.x * u_xlat21 + -0.330299497;
    u_xlat14.x = u_xlat14.x * u_xlat21 + 0.999866009;
    u_xlat21 = u_xlat14.x * u_xlat0.x;
    u_xlat21 = u_xlat21 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb15 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat21 = u_xlatb15 ? u_xlat21 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat14.x + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb14 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat21 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlatb0.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_9.xyz + _LerpColorDark.xyz;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat1.x = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat8 = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15.x = u_xlat8 * 0.0208350997 + -0.0851330012;
    u_xlat15.x = u_xlat8 * u_xlat15.x + 0.180141002;
    u_xlat15.x = u_xlat8 * u_xlat15.x + -0.330299497;
    u_xlat8 = u_xlat8 * u_xlat15.x + 0.999866009;
    u_xlat15.x = u_xlat8 * u_xlat1.x;
    u_xlat15.x = u_xlat15.x * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb22 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat15.x = u_xlatb22 ? u_xlat15.x : float(0.0);
    u_xlat1.x = u_xlat1.x * u_xlat8 + u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb8 = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat8 = u_xlatb8 ? -3.14159274 : float(0.0);
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat8 = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat14.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat8<(-u_xlat8));
#else
    u_xlatb21 = u_xlat8<(-u_xlat8);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb21;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat1.x) : u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat15.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat15.xy;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb3 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb3.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_23 = (u_xlatb3.w) ? u_xlat4.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.z) ? u_xlat4.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.y) ? u_xlat4.x : u_xlat16_23;
    u_xlat16_3.xyz = _DetailColor.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat1.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb2 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat1.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_5.x + (-u_xlat16_19);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5.x);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5.x;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _BaseColor;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat14.x = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat21 = u_xlat14.x * 0.0208350997 + -0.0851330012;
    u_xlat21 = u_xlat14.x * u_xlat21 + 0.180141002;
    u_xlat21 = u_xlat14.x * u_xlat21 + -0.330299497;
    u_xlat14.x = u_xlat14.x * u_xlat21 + 0.999866009;
    u_xlat21 = u_xlat14.x * u_xlat0.x;
    u_xlat21 = u_xlat21 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb15 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat21 = u_xlatb15 ? u_xlat21 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat14.x + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb14 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat21 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.xyz = (u_xlatb4.x) ? u_xlat1.xyz : u_xlat16_2.xxx;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat1.x = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat8 = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15.x = u_xlat8 * 0.0208350997 + -0.0851330012;
    u_xlat15.x = u_xlat8 * u_xlat15.x + 0.180141002;
    u_xlat15.x = u_xlat8 * u_xlat15.x + -0.330299497;
    u_xlat8 = u_xlat8 * u_xlat15.x + 0.999866009;
    u_xlat15.x = u_xlat8 * u_xlat1.x;
    u_xlat15.x = u_xlat15.x * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb22 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat15.x = u_xlatb22 ? u_xlat15.x : float(0.0);
    u_xlat1.x = u_xlat1.x * u_xlat8 + u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb8 = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat8 = u_xlatb8 ? -3.14159274 : float(0.0);
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat8 = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat14.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat8<(-u_xlat8));
#else
    u_xlatb21 = u_xlat8<(-u_xlat8);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb21;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat1.x) : u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat21 = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat21;
    u_xlat15.xy = u_xlat3.yz * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_5.x = _Time.y * _NoiseTex_Uspeed + u_xlat15.x;
    u_xlat16_5.y = _Time.y * _NoiseTex_Vspeed + u_xlat15.y;
    u_xlat21 = u_xlat14.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat21;
    u_xlatb4 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb4.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb21) ? u_xlat1.w : 0.0;
    u_xlat16_23 = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_23;
    u_xlat16_23 = u_xlat16_23 + _Noise_Offset;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat15.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat15.xy;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb3 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb3.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_23) + u_xlat0.xw;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_23 = (u_xlatb3.w) ? u_xlat4.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.z) ? u_xlat4.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.y) ? u_xlat4.x : u_xlat16_23;
    u_xlat16_6.xyz = vec3(u_xlat16_23) * _DetailColor.xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * _BaseColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat1.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb2 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat1.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_5.x + (-u_xlat16_19);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5.x);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5.x;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _EulerAngleY;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp float in_TEXCOORD2;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec2 u_xlat9;
float u_xlat16;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x + _EulerAngleY;
    u_xlat1.x = cos(u_xlat0.x);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat2.x = sin(in_TEXCOORD1.y);
    u_xlat3 = cos(in_TEXCOORD1.y);
    u_xlat8.x = u_xlat0.x * u_xlat2.x;
    u_xlat16 = u_xlat1.x * u_xlat3;
    u_xlat4 = sin(in_TEXCOORD0.w);
    u_xlat5 = cos(in_TEXCOORD0.w);
    u_xlat24 = u_xlat8.x * u_xlat4 + u_xlat16;
    u_xlat8.x = u_xlat16 * u_xlat4 + u_xlat8.x;
    u_xlat9.xy = vec2(float(1.0) / in_TEXCOORD1.z, float(1.0) / in_TEXCOORD1.w);
    u_xlat6.x = u_xlat24 * u_xlat9.x;
    u_xlat16 = u_xlat1.x * u_xlat2.x;
    u_xlat24 = u_xlat0.x * u_xlat3;
    u_xlat25 = u_xlat16 * u_xlat4 + (-u_xlat24);
    u_xlat16 = u_xlat24 * u_xlat4 + (-u_xlat16);
    u_xlat7.x = u_xlat9.y * u_xlat16;
    u_xlat6.z = u_xlat9.x * u_xlat25;
    u_xlat16 = u_xlat2.x * u_xlat5;
    u_xlat8.z = u_xlat3 * u_xlat5;
    u_xlat6.y = u_xlat9.x * u_xlat16;
    u_xlat7.yz = u_xlat8.zx * u_xlat9.yy;
    vs_TEXCOORD3.x = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD3.y = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD3.z = dot(u_xlat6.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat8.xyz = (-in_TEXCOORD0.xyz) + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    vs_TEXCOORD3.w = dot(u_xlat6.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.w = dot(u_xlat7.xyz, u_xlat8.xyz);
    vs_TEXCOORD4.x = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD4.y = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD4.z = dot(u_xlat7.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat9.x = float(1.0) / in_TEXCOORD2;
    u_xlat2.x = u_xlat0.x * u_xlat9.x;
    u_xlat2.z = u_xlat9.x * u_xlat1.x;
    u_xlat2.y = u_xlat9.x * (-u_xlat4);
    vs_TEXCOORD5.w = dot(u_xlat2.xyz, u_xlat8.xyz);
    vs_TEXCOORD5.x = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[0].xyz);
    vs_TEXCOORD5.y = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[1].xyz);
    vs_TEXCOORD5.z = dot(u_xlat2.xyz, hlslcc_mtx4x4unity_CameraToWorld[2].xyz);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	float _MaxClampAngleCos;
uniform 	float _VerticalFadeExp;
uniform 	float _VerticalFadeStart;
uniform 	mediump float _ColorBrightness;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	vec4 _BaseTex_ST;
uniform 	mediump vec4 _LerpColorDark;
uniform 	mediump vec4 _LerpColorLight;
uniform 	mediump float _LerpAlphaScaler;
uniform 	mediump vec4 _DetailColor;
uniform 	mediump float _DetailTexColorChannelSwitch;
uniform 	mediump float _DetailAnnularUVToggle;
uniform 	mediump float _DetailTex_Uspeed;
uniform 	vec4 _DetailTex_ST;
uniform 	mediump float _DetailTex_Vspeed;
uniform 	mediump float _DetailTexAnnularUV_TilingU;
uniform 	mediump float _DetailTexAnnularUV_OffsetU;
uniform 	mediump float _DetailTexAnnularUV_TilingV;
uniform 	mediump float _DetailTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseAnnularUVToggle;
uniform 	mediump float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	mediump float _NoiseTex_Vspeed;
uniform 	mediump float _NoiseTexAnnularUV_OffsetU;
uniform 	mediump float _NoiseTexAnnularUV_TilingU;
uniform 	mediump float _NoiseTexAnnularUV_TilingV;
uniform 	mediump float _NoiseTexAnnularUV_OffsetV;
uniform 	mediump float _Noise_Offset;
uniform 	mediump vec4 _DayColor;
uniform 	mediump float _AlphaBrightness;
uniform 	mediump float _AlphaModeToggle;
uniform 	mediump float _AlphaEdgeFade;
uniform 	mediump float _DetailTexAlphaChannelSwitch;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	mediump float _MaskAnnularUVToggle;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskTex_Uspeed;
uniform 	mediump float _MaskTex_Vspeed;
uniform 	mediump float _MaskTexAnnularUV_OffsetU;
uniform 	mediump float _MaskTexAnnularUV_TilingU;
uniform 	mediump float _MaskTexAnnularUV_TilingV;
uniform 	mediump float _MaskTexAnnularUV_OffsetV;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _DetailTex;
uniform lowp sampler2D _MaskTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
bvec4 u_xlatb4;
mediump vec2 u_xlat16_5;
mediump vec2 u_xlat16_6;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_12;
vec2 u_xlat14;
int u_xlati14;
bool u_xlatb14;
vec2 u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat7.xy = floor(u_xlat14.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat7.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat7.x = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), 0).y;
    u_xlat16_2.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat16_2.x + (-_MaxClampAngleCos);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x<0.0);
#else
    u_xlatb7 = u_xlat7.x<0.0;
#endif
    if((int(u_xlatb7) * int(0xffffffffu))!=0){discard;}
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.w = 1.0;
    u_xlat1.z = dot(vs_TEXCOORD4, u_xlat0);
    u_xlat1.x = dot(vs_TEXCOORD3, u_xlat0);
    u_xlat1.y = dot(vs_TEXCOORD5, u_xlat0);
    u_xlat0.xyz = -abs(u_xlat1.xzy) + vec3(0.5, 0.5, 0.5);
    u_xlatb0.xzw = lessThan(u_xlat0.xxyz, vec4(0.0, 0.0, 0.0, 0.0)).xzw;
    u_xlat7.x = u_xlat0.y + u_xlat0.y;
    u_xlat7.x = u_xlat7.x / _VerticalFadeStart;
    u_xlat7.x = max(u_xlat7.x, 0.00999999978);
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _VerticalFadeExp;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlatb0.x = u_xlatb0.z || u_xlatb0.x;
    u_xlatb0.x = u_xlatb0.w || u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.xz = u_xlat1.xy * vec2(-1.0, 1.0);
    u_xlat0.x = dot(u_xlat1.wy, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-u_xlat0.x) * 2.01999998 + 1.0;
    u_xlat3.z = u_xlat0.x * 2.01999998;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat14.x = min(abs(u_xlat1.y), abs(u_xlat1.x));
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat21 = u_xlat14.x * 0.0208350997 + -0.0851330012;
    u_xlat21 = u_xlat14.x * u_xlat21 + 0.180141002;
    u_xlat21 = u_xlat14.x * u_xlat21 + -0.330299497;
    u_xlat14.x = u_xlat14.x * u_xlat21 + 0.999866009;
    u_xlat21 = u_xlat14.x * u_xlat0.x;
    u_xlat21 = u_xlat21 * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(abs(u_xlat1.y)<abs(u_xlat1.x));
#else
    u_xlatb15 = abs(u_xlat1.y)<abs(u_xlat1.x);
#endif
    u_xlat21 = u_xlatb15 ? u_xlat21 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat14.x + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.y<(-u_xlat1.y));
#else
    u_xlatb14 = u_xlat1.y<(-u_xlat1.y);
#endif
    u_xlat14.x = u_xlatb14 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat14.x = min(u_xlat1.y, (-u_xlat1.x));
    u_xlat21 = max(u_xlat1.y, (-u_xlat1.x));
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21>=(-u_xlat21));
#else
    u_xlatb21 = u_xlat21>=(-u_xlat21);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat14.x<(-u_xlat14.x));
#else
    u_xlatb14 = u_xlat14.x<(-u_xlat14.x);
#endif
    u_xlatb14 = u_xlatb21 && u_xlatb14;
    u_xlat0.x = (u_xlatb14) ? (-u_xlat0.x) : u_xlat0.x;
    u_xlat3.y = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat3.x = u_xlat0.x * 0.159154952;
    u_xlat0.xz = u_xlat3.yz * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1 = texture(_BaseTex, u_xlat0.xz);
    u_xlatb0.xz = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(4.0, 0.0, 5.0, 0.0)).xz;
    u_xlat16_2.x = (u_xlatb0.z) ? 1.0 : 0.0;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.w : u_xlat16_2.x;
    u_xlatb4 = equal(vec4(vec4(_BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch, _BaseTexColorChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_2.x = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_2.x;
    u_xlatb0.x = u_xlatb4.x || u_xlatb4.y;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_9.xyz + _LerpColorDark.xyz;
    u_xlat0.xzw = u_xlat3.zxz + vec3(-0.5, 0.0, -0.5);
    u_xlat1.x = max(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat8 = min(abs(u_xlat0.x), abs(u_xlat3.x));
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat15.x = u_xlat8 * 0.0208350997 + -0.0851330012;
    u_xlat15.x = u_xlat8 * u_xlat15.x + 0.180141002;
    u_xlat15.x = u_xlat8 * u_xlat15.x + -0.330299497;
    u_xlat8 = u_xlat8 * u_xlat15.x + 0.999866009;
    u_xlat15.x = u_xlat8 * u_xlat1.x;
    u_xlat15.x = u_xlat15.x * -2.0 + 1.57079637;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(u_xlat0.x)<abs(u_xlat3.x));
#else
    u_xlatb22 = abs(u_xlat0.x)<abs(u_xlat3.x);
#endif
    u_xlat15.x = u_xlatb22 ? u_xlat15.x : float(0.0);
    u_xlat1.x = u_xlat1.x * u_xlat8 + u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x<(-u_xlat0.x));
#else
    u_xlatb8 = u_xlat0.x<(-u_xlat0.x);
#endif
    u_xlat8 = u_xlatb8 ? -3.14159274 : float(0.0);
    u_xlat1.x = u_xlat8 + u_xlat1.x;
    u_xlat8 = min(u_xlat0.x, u_xlat3.x);
    u_xlat0.x = max(u_xlat0.x, u_xlat3.x);
    u_xlat14.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat0.x>=(-u_xlat0.x));
#else
    u_xlatb0.x = u_xlat0.x>=(-u_xlat0.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat8<(-u_xlat8));
#else
    u_xlatb21 = u_xlat8<(-u_xlat8);
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb21;
    u_xlat0.x = (u_xlatb0.x) ? (-u_xlat1.x) : u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.159154952;
    u_xlat21 = _NoiseTexAnnularUV_TilingU * u_xlat0.x + _NoiseTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat21;
    u_xlat15.xy = u_xlat3.yz * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat16_5.x = _Time.y * _NoiseTex_Uspeed + u_xlat15.x;
    u_xlat16_5.y = _Time.y * _NoiseTex_Vspeed + u_xlat15.y;
    u_xlat21 = u_xlat14.x * _NoiseTexAnnularUV_TilingV + _NoiseTexAnnularUV_OffsetV;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat21;
    u_xlatb4 = equal(vec4(_NoiseAnnularUVToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb4.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb21) ? u_xlat1.w : 0.0;
    u_xlat16_23 = (u_xlatb4.w) ? u_xlat1.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb4.z) ? u_xlat1.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb4.y) ? u_xlat1.x : u_xlat16_23;
    u_xlat16_23 = u_xlat16_23 + _Noise_Offset;
    u_xlat21 = _Time.y * _DetailTex_Uspeed;
    u_xlat21 = _DetailTexAnnularUV_TilingU * u_xlat0.x + u_xlat21;
    u_xlat0.x = _MaskTexAnnularUV_TilingU * u_xlat0.x + _MaskTexAnnularUV_OffsetU;
    u_xlat1.x = _Time.y * _MaskTex_Uspeed + u_xlat0.x;
    u_xlat4.x = u_xlat21 + _DetailTexAnnularUV_OffsetU;
    u_xlat0.xw = u_xlat3.yz * _DetailTex_ST.xy + _DetailTex_ST.zw;
    u_xlat15.xy = u_xlat3.yz * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat16_5.xy = _Time.yy * vec2(_MaskTex_Uspeed, _MaskTex_Vspeed) + u_xlat15.xy;
    u_xlat16_6.x = _Time.y * _DetailTex_Uspeed + u_xlat0.x;
    u_xlat16_6.y = _Time.y * _DetailTex_Vspeed + u_xlat0.w;
    u_xlat0.x = _Time.y * _DetailTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _DetailTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat4.y = u_xlat0.x + _DetailTexAnnularUV_OffsetV;
    u_xlatb3 = equal(vec4(_DetailAnnularUVToggle, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch, _DetailTexColorChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xw = (u_xlatb3.x) ? u_xlat4.xy : u_xlat16_6.xy;
    u_xlat0.xw = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat16_23) + u_xlat0.xw;
    u_xlat4 = texture(_DetailTex, u_xlat0.xw);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_DetailTexColorChannelSwitch==3.0);
#else
    u_xlatb0.x = _DetailTexColorChannelSwitch==3.0;
#endif
    u_xlat16_23 = (u_xlatb0.x) ? u_xlat4.w : 0.0;
    u_xlat16_23 = (u_xlatb3.w) ? u_xlat4.z : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.z) ? u_xlat4.y : u_xlat16_23;
    u_xlat16_23 = (u_xlatb3.y) ? u_xlat4.x : u_xlat16_23;
    u_xlat16_3.xyz = _DetailColor.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _DayColor.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz;
    u_xlat0.x = _Time.y * _MaskTex_Vspeed;
    u_xlat0.x = u_xlat14.x * _MaskTexAnnularUV_TilingV + u_xlat0.x;
    u_xlat1.y = u_xlat0.x + _MaskTexAnnularUV_OffsetV;
    u_xlatb2 = equal(vec4(_MaskAnnularUVToggle, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat16_5.xy;
    u_xlat1 = texture(_MaskTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_MaskTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _MaskTexChannelSwitch==3.0;
#endif
    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat1.w : 0.0;
    u_xlat16_5.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat16_5.x;
    u_xlatb1 = equal(vec4(vec4(_DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch, _DetailTexAlphaChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16_12 = (u_xlatb1.w) ? u_xlat4.w : 0.0;
    u_xlat16_12 = (u_xlatb1.z) ? u_xlat4.z : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.y) ? u_xlat4.y : u_xlat16_12;
    u_xlat16_12 = (u_xlatb1.x) ? u_xlat4.x : u_xlat16_12;
    u_xlat16_19 = (-vs_COLOR0.w) + 1.0;
    u_xlat16_0 = u_xlat16_12 * u_xlat16_5.x + (-u_xlat16_19);
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_19>=u_xlat16_5.x);
#else
    u_xlatb14 = u_xlat16_19>=u_xlat16_5.x;
#endif
    u_xlati14 = (u_xlatb14) ? 0 : 0x3F800000;
    u_xlat0.x = u_xlat16_0 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlatb1.xy = equal(vec4(vec4(_AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle, _AlphaModeToggle)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat14.x = u_xlatb1.y ? intBitsToFloat(u_xlati14) : float(0.0);
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat14.x;
    u_xlat16_5.x = _DayColor.w * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    SV_Target0.w = u_xlat7.x * u_xlat0.x;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "_2COLORLERPTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_2COLORLERPTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_2COLORLERPTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_2COLORLERPTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "ANNULAR_UV_ON" }
""
}
SubProgram "gles3 " {
Keywords { "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "ANNULAR_UV_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ANNULAR_UV_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ANNULAR_UV_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "ANNULAR_UV_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_2COLORLERPTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_2COLORLERPTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_2COLORLERPTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_2COLORLERPTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "ANNULAR_UV_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "ANNULAR_UV_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "ANNULAR_UV_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "ANNULAR_UV_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "ANNULAR_UV_ON" "_2COLORLERPTOGGLE_ON" "_NOISETEXTOGGLEONDETAIL_ON" }
""
}
}
}
}
CustomEditor "MiHoYoASEMaterialInspector"
}