#define SKINNED

#pragma kernel SetupSkin
#pragma kernel SetupAttractions
#pragma kernel SetupNodes
#pragma kernel Seed
#pragma kernel Search
#pragma kernel Attract
#pragma kernel Connect
#pragma kernel Remove
#pragma kernel Grow
#pragma kernel Animate

#define THREAD_1D [numthreads(128, 1, 1)]

#include "Assets/SpaceColonization/Shaders/Common/Random.hlsl"

#include "../Common/SkinnedAttraction.hlsl"
#include "../Common/SkinnedNode.hlsl"
#include "../Common/Edge.hlsl"
#include "../Common/SkinnedCandidate.hlsl"

StructuredBuffer<float3> _Seeds;
uint _ConnectCount;

float _InfluenceDistance, _GrowthDistance, _KillDistance;
float _GrowthLength;

float _AttractionThreshold;
float _DT;

float _MassMin, _MassMax;

AppendStructuredBuffer<Edge> _EdgesAppend;

StructuredBuffer<float3> _Vertices;
StructuredBuffer<uint> _Bones;
StructuredBuffer<float4x4> _BoneMatrices, _BindPoses;
RWStructuredBuffer<SkinnedAttraction> _Attractions;

AppendStructuredBuffer<uint> _NodesPoolAppend;
ConsumeStructuredBuffer<uint> _NodesPoolConsume;
RWStructuredBuffer<SkinnedNode> _Nodes;

AppendStructuredBuffer<SkinnedCandidate> _CandidatesAppend;
ConsumeStructuredBuffer<SkinnedCandidate> _CandidatesConsume;

uint CreateNode(out SkinnedNode node)
{
  uint i = _NodesPoolConsume.Consume();
  node.position = node.animated = float3(0, 0, 0);
  node.index0 = -1;
  node.t = 0;
  node.offset = 0;
  node.mass = 0;
  node.from = -1;
  node.active = true;
  return i;
}

void CreateEdge(int a, int b)
{
  Edge e;
  e.a = a;
  e.b = b;
  _EdgesAppend.Append(e);
}

THREAD_1D
void SetupSkin (uint3 id : SV_DispatchThreadID)
{
  uint idx = id.x;
  uint count, stride;
  _Attractions.GetDimensions(count, stride);
  if (idx >= count)
    return;

  SkinnedAttraction attr = _Attractions[idx];

  float3 p = attr.position;
  uint closest = -1;
  float dist = 1e8;
  _Vertices.GetDimensions(count, stride);
  for (uint i = 0; i < count; i++)
  {
    float3 v = _Vertices[i];
    float l = distance(v, p);
    if (l < dist)
    {
      dist = l;
      closest = i;
    }
  }

  attr.bone = _Bones[closest];
  _Attractions[idx] = attr;
}

THREAD_1D
void SetupAttractions (uint3 id : SV_DispatchThreadID)
{
  uint idx = id.x;
  uint count, stride;
  _Attractions.GetDimensions(count, stride);
  if (idx >= count)
    return;

  SkinnedAttraction attr = _Attractions[idx];
  attr.active = true;
  attr.found = false;
  attr.nearest = -1;
  _Attractions[idx] = attr;
}

THREAD_1D
void SetupNodes (uint3 id : SV_DispatchThreadID)
{
  uint idx = id.x;
  uint count, stride;
  _Nodes.GetDimensions(count, stride);
  if (idx >= count)
    return;

  _NodesPoolAppend.Append(idx);

  SkinnedNode n = _Nodes[idx];
  n.active = false;
  _Nodes[idx] = n;
}

THREAD_1D
void Seed (uint3 id : SV_DispatchThreadID)
{
  uint idx = id.x;

  uint count, stride;
  _Seeds.GetDimensions(count, stride);
  if (idx >= count)
    return;

  SkinnedNode n;
  uint i = CreateNode(n);
  n.position = n.animated = _Seeds[idx];
  n.t = 1;
  n.offset = 0;
  n.from = -1;
  n.mass = lerp(_MassMin, _MassMax, nrand(id.xy));

  uint nearest = -1;
  float dist = 1e8;

  _Attractions.GetDimensions(count, stride);
  for (uint j = 0; j < count; j++)
  {
    SkinnedAttraction attr = _Attractions[j];
    float l = distance(attr.position, n.position);
    if (l < dist)
    {
      nearest = j;
      dist = l;
    }
  }
  n.index0 = _Attractions[nearest].bone;

  _Nodes[i] = n;
}

THREAD_1D
void Search (uint3 id : SV_DispatchThreadID)
{
  uint idx = id.x;
  uint count, stride;
  _Attractions.GetDimensions(count, stride);
  if (idx >= count)
    return;

  SkinnedAttraction attr = _Attractions[idx];

  attr.found = false;
  if (attr.active)
  {
    _Nodes.GetDimensions(count, stride);

    float min_dist = _InfluenceDistance;
    uint nearest = -1;

    for (uint i = 0; i < count; i++)
    {
      SkinnedNode n = _Nodes[i];

      if (n.active)
      {
        float3 dir = attr.position - n.position;
        float d = length(dir);
        if (d < min_dist)
        {
          min_dist = d;
          nearest = i;

          attr.found = true;
          attr.nearest = nearest;
        }
      }
    }

    _Attractions[idx] = attr;
  }
}


THREAD_1D
void Attract (uint3 id : SV_DispatchThreadID)
{
  uint idx = id.x;
  uint count, stride;
  _Nodes.GetDimensions(count, stride);
  if (idx >= count)
    return;

  SkinnedNode n = _Nodes[idx];
  if (n.active && n.t >= 1.0)
  {
    float3 dir = (0.0).xxx;
    uint counter = 0;

    float dist = 1e8;
    uint nearest = -1;

    // search neighbors in radius
    _Attractions.GetDimensions(count, stride);
    for (uint i = 0; i < count; i++)
    {
      SkinnedAttraction attr = _Attractions[i];
      if (attr.active && attr.found && attr.nearest == idx)
      {
        float3 dir2 = (attr.position - n.position);
        dir += normalize(dir2);
        counter++;

        float l2 = length(dir2);
        if (l2 < dist)
        {
          dist = l2;
          nearest = i;
        }
      }
    }

    if (counter > 0)
    {
      SkinnedCandidate c;
      dir = dir / counter;
      c.position = n.position + (dir * _GrowthDistance);
      c.node = idx;
      c.bone = _Attractions[nearest].bone;
      _CandidatesAppend.Append(c);
    }
  }
}


THREAD_1D
void Connect (uint3 id : SV_DispatchThreadID)
{
  uint idx = id.x;
  if (idx >= _ConnectCount)
    return;

  SkinnedCandidate c = _CandidatesConsume.Consume();

  SkinnedNode n1 = _Nodes[c.node];
  SkinnedNode n2;
  uint idx2 = CreateNode(n2);
  n2.position = c.position;
  n2.animated = c.position;
  n2.index0 = c.bone;
  n2.offset = n1.offset + 1.0;
  n2.mass = lerp(_MassMin, _MassMax, nrand(float2(c.node, idx2)));
  n2.from = c.node;

  _Nodes[c.node] = n1;
  _Nodes[idx2] = n2;
  CreateEdge(c.node, idx2);
}

THREAD_1D
void Remove(uint3 id : SV_DispatchThreadID)
{
  uint idx = id.x;
  uint count, stride;
  _Attractions.GetDimensions(count, stride);
  if (idx >= count)
    return;

  SkinnedAttraction attr = _Attractions[idx];
  if (!attr.active)
    return;

  _Nodes.GetDimensions(count, stride);
  for (uint i = 0; i < count; i++)
  {
    SkinnedNode n = _Nodes[i];
    if (n.active)
    {
      float d = distance(attr.position, n.position);
      if (d < _KillDistance)
      {
        attr.active = false;
        _Attractions[idx] = attr;
        return;
      }
    }
  }
}

THREAD_1D
void Grow (uint3 id : SV_DispatchThreadID)
{
  uint idx = id.x;
  uint count, stride;
  _Nodes.GetDimensions(count, stride);
  if (idx >= count)
    return;

  SkinnedNode n = _Nodes[idx];

  if (n.active)
  {
    n.t = saturate(n.t + _DT * n.mass);
    _Nodes[idx] = n;
  }
}

THREAD_1D
void Animate (uint3 id : SV_DispatchThreadID)
{
  uint idx = id.x;
  uint count, stride;
  _Nodes.GetDimensions(count, stride);
  if (idx >= count)
    return;

  SkinnedNode node = _Nodes[idx];
  if (node.active)
  {
    float4x4 bind = _BindPoses[node.index0];
    float4x4 m = _BoneMatrices[node.index0];
    node.animated = mul(mul(m, bind), float4(node.position, 1)).xyz;
    _Nodes[idx] = node;
  }
}

