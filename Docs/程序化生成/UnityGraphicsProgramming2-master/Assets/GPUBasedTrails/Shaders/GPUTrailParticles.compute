#pragma kernel Update
#pragma kernel WriteToInput

#include "GPUTrails.cginc"
#include "noise4D.cginc"

float3 snoise3D(float4 x)
{
	float s = snoise(x);
	float s1 = snoise(float4(x.y - 19.1, x.z + 33.4, x.x + 47.2, x.w));
	float s2 = snoise(float4(x.z + 74.2, x.x - 124.5, x.y + 99.4, x.w));
	float3 c = float3(s, s1, s2);
	return c;
}

float3 curlNoise(float4 p) {

	const float e = 0.0009765625;
	float4 dx = float4(e, 0.0, 0.0, 0.0);
	float4 dy = float4(0.0, e, 0.0, 0.0);
	float4 dz = float4(0.0, 0.0, e, 0.0);

	float3 p_x0 = snoise3D(p - dx);
	float3 p_x1 = snoise3D(p + dx);
	float3 p_y0 = snoise3D(p - dy);
	float3 p_y1 = snoise3D(p + dy);
	float3 p_z0 = snoise3D(p - dz);
	float3 p_z1 = snoise3D(p + dz);

	float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;
	float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;
	float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;

	const float divisor = 1.0 / (2.0 * e);
	return normalize(float3(x, y, z) * divisor);
}


////////////////////////////////////////////////////////////////////////////////
// Update
////////////////////////////////////////////////////////////////////////////////
struct Particle
{
	float3 position;
};

RWStructuredBuffer<Particle> _ParticleBufferWrite;
uint _ParticleNum;
float _Time;
float _TimeScale;
float _PositionScale;
float _NoiseScale;

[numthreads(256, 1, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;
	if (idx < _ParticleNum)
	{
		Particle particle = _ParticleBufferWrite[idx];
		float3 curl = curlNoise(float4(particle.position * _PositionScale, _Time * _TimeScale));
		particle.position += curl * _NoiseScale;

		_ParticleBufferWrite[idx] = particle;
	}
}	

////////////////////////////////////////////////////////////////////////////////
// WriteToInput
////////////////////////////////////////////////////////////////////////////////
StructuredBuffer<Particle> _ParticleBufferRead;
RWStructuredBuffer<Input> _InputBuffer;

[numthreads(256, 1, 1)]
void WriteToInput(uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;
	if (idx < _ParticleNum)
	{
		Input input;
		input.position = _ParticleBufferRead[idx].position;
		_InputBuffer[idx] = input;
	}
}